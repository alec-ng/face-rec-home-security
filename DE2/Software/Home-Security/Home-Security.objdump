
Home-Security.elf:     file format elf32-littlenios2
Home-Security.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010bdc memsz 0x00010bdc flags r-x
    LOAD off    0x00011bfc vaddr 0x00810bfc paddr 0x008127fc align 2**12
         filesz 0x00001c00 memsz 0x00001c00 flags rw-
    LOAD off    0x000143fc vaddr 0x008143fc paddr 0x008143fc align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000103d0  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000678  00810584  00810584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c00  00810bfc  008127fc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  008143fc  008143fc  000143fc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000137fc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e98  00000000  00000000  00013828  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000019ac  00000000  00000000  000146c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002b613  00000000  00000000  0001606c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008f29  00000000  00000000  0004167f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001785f  00000000  00000000  0004a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002140  00000000  00000000  00061e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002651  00000000  00000000  00063f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dfb1  00000000  00000000  00066599  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007454c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000745b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078ae9  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00078aec  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078af8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078af9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00078afa  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00078b05  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00078b10  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00078b1b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  00078b24  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000c6f50  00000000  00000000  00078b54  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00810584 l    d  .rodata	00000000 .rodata
00810bfc l    d  .rwdata	00000000 .rwdata
008143fc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Video_Stream.c
008127a4 l     O .rwdata	00000005 __func__.2927
008007cc l     F .text	00000068 alt_dma_rxchan_ioctl
00800834 l     F .text	00000068 alt_dma_txchan_ioctl
0080089c l     F .text	00000078 alt_dma_rxchan_prepare
00800914 l     F .text	00000078 alt_dma_txchan_send
0080098c l     F .text	00000024 alt_dma_rxchan_close
008009b0 l     F .text	00000024 alt_dma_txchan_close
00810754 l     O .rodata	0000000b __func__.3015
00000000 l    df *ABS*	00000000 communication.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
00810bfc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
008020fc l     F .text	00000058 __sprint_r
008108a2 l     O .rodata	00000010 blanks.3452
00810892 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00804160 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
0080432c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805d28 l     F .text	00000058 std
00805e34 l     F .text	00000008 __fp_lock
00805e3c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
008127c0 l     O .rwdata	00000004 charset
008108d4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810a1c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00808b48 l     F .text	00000058 __sprint_r
00810a38 l     O .rodata	00000010 blanks.3391
00810a28 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080ac88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080bdb4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080c628 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c688 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0080c70c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0080c7c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080c824 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c9ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080cb2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080cccc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080cdac l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080cf08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080d134 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008127ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080d400 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008115b8 l     O .rwdata	000000a4 Frame_Save_DMA_priv
0081165c l     O .rwdata	0000001c Frame_Save_DMA_tx
00811678 l     O .rwdata	0000001c Frame_Save_DMA_rx
00811694 l     O .rwdata	00001060 jtag_uart_0
008126f4 l     O .rwdata	00000030 audio_and_video_config_0
00812724 l     O .rwdata	0000002c character_lcd_0
00812750 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0080d71c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0080d874 l     F .text	000000a8 alt_avalon_dma_launch_txonly
0080d91c l     F .text	000000a8 alt_avalon_dma_launch_rxonly
0080d9c4 l     F .text	000003a4 alt_avalon_dma_ioctl
0080e118 l     F .text	000001c8 alt_avalon_dma_irq
0080e390 l     F .text	00000038 alt_dma_txchan_reg
0080e3c8 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080e608 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080e830 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f774 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080fb98 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080fcd4 l     F .text	000000dc alt_file_locked
0080ff38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
008073a4 g     F .text	00000094 _mprec_log10
00807490 g     F .text	00000088 __any_on
00809f9c g     F .text	00000070 _isatty_r
008109f4 g     O .rodata	00000028 __mprec_tinytens
0080cf68 g     F .text	0000006c alt_main
00801e74 g     F .text	000000a0 _puts_r
00814460 g     O .bss	00000100 alt_irq
0080a00c g     F .text	00000078 _lseek_r
008127fc g       *ABS*	00000000 __flash_rwdata_start
0080ef28 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080b7a8 g     F .text	00000088 __eqdf2
008146f0 g       *ABS*	00000000 __alt_heap_start
00800de0 g     F .text	000001f0 keyRelease
008088cc g     F .text	00000074 _kill_r
00801dfc g     F .text	00000044 printf
0080880c g     F .text	000000a0 _signal_r
00808948 g     F .text	00000068 __sseek
00805d90 g     F .text	000000a4 __sinit
0080e2e0 g     F .text	000000b0 alt_avalon_dma_init
00806a68 g     F .text	00000084 _setlocale_r
00805e90 g     F .text	00000068 __sfmoreglue
0080cff4 g     F .text	00000020 __malloc_unlock
0080114c g     F .text	0000003c lcd_write
008143fc g     O .bss	00000004 rx_done
008012dc g     F .text	00000030 send_type
00801448 g     F .text	00000080 send_byte
00806e20 g     F .text	000000e0 memmove
00805e80 g     F .text	00000010 _cleanup
00807518 g     F .text	000000bc _Balloc
0080b8b8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0080eeac g     F .text	0000007c get_DDRAM_addr
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809f28 g     F .text	00000074 _fstat_r
00814410 g     O .bss	00000004 errno
00814424 g     O .bss	00000004 alt_argv
0081a7a4 g       *ABS*	00000000 _gp
0080d2b0 g     F .text	00000030 usleep
0080ca4c g     F .text	00000020 getpid
0080c76c g     F .text	00000058 alt_dma_txchan_open
00811438 g     O .rwdata	00000180 alt_fd_list
0080c884 g     F .text	00000094 alt_find_dev
00806d80 g     F .text	000000a0 memcpy
0080f0c0 g     F .text	0000004c alt_up_character_lcd_write_fd
00805e74 g     F .text	0000000c _cleanup_r
0080ba50 g     F .text	000000f8 __floatsidf
0080fc5c g     F .text	00000078 alt_io_redirect
0080b9c8 g     F .text	00000088 __ltdf2
00810584 g       *ABS*	00000000 __DTOR_END__
00801f14 g     F .text	00000014 puts
008072f4 g     F .text	000000b0 __ratio
00809c44 g     F .text	00000024 __vfiprintf_internal
0080ea48 g     F .text	00000224 altera_avalon_jtag_uart_read
008016a8 g     F .text	00000014 malloc
00801e40 g     F .text	00000034 _printf_r
0080bef0 g     F .text	00000008 __udivsi3
0080ca6c g     F .text	000000c0 isatty
008085f0 g     F .text	000000cc _raise_r
00801578 g     F .text	00000064 __assert_func
00810904 g     O .rodata	000000c8 __mprec_tens
00806a44 g     F .text	00000008 __locale_charset
00810334 g     F .text	00000090 alt_icache_flush
00814404 g     O .bss	00000004 __malloc_top_pad
008088c8 g     F .text	00000004 _getpid_r
008127bc g     O .rwdata	00000004 __mb_cur_max
00806a4c g     F .text	0000000c _localeconv_r
00807c10 g     F .text	0000003c __i2b
00806428 g     F .text	0000049c __sfvwrite_r
00808744 g     F .text	000000b4 __sigtramp_r
00801f28 g     F .text	00000070 _sbrk_r
0080a084 g     F .text	00000078 _read_r
00811404 g     O .rwdata	0000000c __lc_ctype
008127d4 g     O .rwdata	00000004 alt_max_fd
0080c32c g     F .text	00000138 __unpack_d
00809e04 g     F .text	00000110 _fclose_r
00801414 g     F .text	00000034 init_comm
00805cf4 g     F .text	00000034 fflush
00814408 g     O .bss	00000004 __malloc_max_sbrked_mem
0080b118 g     F .text	00000074 __adddf3
0080d754 g     F .text	00000120 alt_avalon_dma_launch_bidir
008071d4 g     F .text	00000120 __b2d
0080a6d8 g     F .text	000005b0 __umoddi3
0080c6b4 g     F .text	00000058 alt_dma_rxchan_open
0080ce18 g     F .text	000000f0 lseek
008127b0 g     O .rwdata	00000004 _global_impure_ptr
00807f8c g     F .text	000005f4 _realloc_r
008146f0 g       *ABS*	00000000 __bss_end
0080faa0 g     F .text	000000f8 alt_iic_isr_register
00810030 g     F .text	0000010c alt_tick
0080a0fc g     F .text	000005dc __udivdi3
008109cc g     O .rodata	00000028 __mprec_bigtens
00807e6c g     F .text	00000120 __s2b
00804314 g     F .text	00000018 abort
0080bc20 g     F .text	00000194 __floatunsidf
008070f4 g     F .text	00000060 __mcmp
00805e5c g     F .text	00000018 __fp_lock_all
0080fa58 g     F .text	00000048 alt_ic_irq_enabled
0080ff98 g     F .text	00000098 alt_alarm_stop
0081442c g     O .bss	00000004 alt_irq_active
00800200 g     F .text	00000030 done
008000ec g     F .exceptions	000000c8 alt_irq_handler
00811410 g     O .rwdata	00000028 alt_dev_null
00814400 g     O .bss	00000004 char_lcd_dev
0080f3a8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0080f67c g     F .text	00000044 alt_dcache_flush_all
00806fc0 g     F .text	00000070 __hi0bits
0080bb48 g     F .text	000000d8 __fixdfsi
008127fc g       *ABS*	00000000 __ram_rwdata_end
008127cc g     O .rwdata	00000008 alt_dev_list
0080df44 g     F .text	00000080 alt_avalon_dma_space
0080d2e0 g     F .text	00000120 write
00810bfc g       *ABS*	00000000 __ram_rodata_end
0080c918 g     F .text	000000d4 fstat
0080cb8c g     F .text	00000140 kill
00800000 g       *ABS*	00000000 __alt_mem_SDRAM
00807d4c g     F .text	00000120 __pow5mult
00814414 g     O .bss	00000004 __nlocale_changed
00808ba0 g     F .text	000010a4 ___vfiprintf_internal_r
0080bef8 g     F .text	00000008 __umodsi3
008146f0 g       *ABS*	00000000 end
0080e548 g     F .text	000000c0 altera_avalon_jtag_uart_init
00810580 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080bf98 g     F .text	00000080 __clzsi2
0080ec6c g     F .text	00000240 altera_avalon_jtag_uart_write
00805d80 g     F .text	00000004 __sfp_lock_acquire
00806c9c g     F .text	000000e4 memchr
0080efd0 g     F .text	00000078 alt_up_character_lcd_write
00802154 g     F .text	00001eac ___vfprintf_internal_r
0080200c g     F .text	00000060 _sprintf_r
00800fd0 g     F .text	000000ac readKeypadCode
00806114 g     F .text	00000314 _free_r
0080dfc4 g     F .text	00000154 alt_avalon_dma_send
00804164 g     F .text	000001b0 __call_exitprocs
008127e0 g     O .rwdata	00000008 alt_dma_txchan_list
00814418 g     O .bss	00000004 __mlocale_changed
008127b8 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00814430 g     O .bss	00000004 _alt_tick_rate
008078dc g     F .text	0000014c __lshift
00814434 g     O .bss	00000004 _alt_nticks
008088ac g     F .text	0000001c signal
0080d014 g     F .text	00000120 read
0080d494 g     F .text	00000288 alt_sys_init
0080f234 g     F .text	000000b0 alt_up_character_lcd_shift_display
0081044c g     F .text	00000134 __register_exitproc
00807a28 g     F .text	000001e8 __multiply
0080f2e4 g     F .text	00000090 alt_up_character_lcd_erase_pos
0080e8e0 g     F .text	00000074 altera_avalon_jtag_uart_close
00810bfc g       *ABS*	00000000 __ram_rwdata_start
00810584 g       *ABS*	00000000 __ram_rodata_start
00814438 g     O .bss	00000028 __malloc_current_mallinfo
008075d4 g     F .text	0000017c __d2b
0080e400 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0081027c g     F .text	000000b8 alt_get_fd
0080f530 g     F .text	0000014c alt_busy_sleep
0080c464 g     F .text	000000c8 __fpcmp_parts_d
00801220 g     F .text	0000004c send_buffer
00809d94 g     F .text	00000070 _close_r
008010e4 g     F .text	00000068 servoUnlock
008103d8 g     F .text	00000074 memcmp
0080e4b0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008146f0 g       *ABS*	00000000 __alt_stack_base
0080e4f8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804024 g     F .text	0000013c __swsetup_r
0080b550 g     F .text	00000258 __divdf3
00805ef8 g     F .text	000000f0 __sfp
00807438 g     F .text	00000058 __copybits
00810ffc g     O .rwdata	00000408 __malloc_av_
00805d8c g     F .text	00000004 __sinit_lock_release
0080b18c g     F .text	000003c4 __muldf3
00808a2c g     F .text	00000060 __sread
0081015c g     F .text	00000120 alt_find_file
0080f6c0 g     F .text	000000b4 alt_dev_llist_insert
0080cfd4 g     F .text	00000020 __malloc_lock
0080d1f4 g     F .text	000000bc sbrk
00805af8 g     F .text	000001fc _fflush_r
00809ce0 g     F .text	000000b4 _calloc_r
008143fc g       *ABS*	00000000 __bss_start
00806f00 g     F .text	00000098 memset
00801188 g     F .text	00000054 lcd_init
00800230 g     F .text	0000059c main
0080ddac g     F .text	00000044 alt_avalon_dma_rx_ioctl
00814428 g     O .bss	00000004 alt_envp
0081440c g     O .bss	00000004 __malloc_max_total_mem
0080e458 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080f184 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00808940 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809f14 g     F .text	00000014 fclose
00814560 g     O .bss	00000190 _atexit0
00804544 g     F .text	000015b4 _dtoa_r
008016bc g     F .text	00000740 _malloc_r
00800bec g     F .text	000001f4 readKeypad
008127e8 g     O .rwdata	00000004 alt_errno
008011dc g     F .text	00000044 send_code
0080166c g     F .text	00000028 _fiprintf_r
00808734 g     F .text	00000010 _init_signal
0080698c g     F .text	000000b8 _fwalk
0080130c g     F .text	00000108 send_length
0080be30 g     F .text	00000060 __divsi3
00810a48 g     O .rodata	00000014 __thenan_df
0080ef90 g     F .text	00000040 alt_up_character_lcd_open_dev
00805fe8 g     F .text	0000012c _malloc_trim_r
00810584 g       *ABS*	00000000 __CTOR_END__
0080ef5c g     F .text	00000034 alt_up_character_lcd_init
00808a8c g     F .text	000000bc strcmp
00810584 g       *ABS*	00000000 __flash_rodata_start
00810584 g       *ABS*	00000000 __DTOR_LIST__
0080b830 g     F .text	00000088 __nedf2
0080d460 g     F .text	00000034 alt_irq_init
0080d194 g     F .text	00000060 alt_release_fd
00801f98 g     F .text	00000074 sprintf
0080f374 g     F .text	00000034 alt_up_character_lcd_cursor_off
00810a5c g     O .rodata	00000100 __clz_tab
0081441c g     O .bss	00000004 _PathLocale
008103c4 g     F .text	00000014 atexit
00809c68 g     F .text	00000078 _write_r
008009d4 g     F .text	00000218 super_mode
00806aec g     F .text	0000001c setlocale
008127ac g     O .rwdata	00000004 _impure_ptr
00814420 g     O .bss	00000004 alt_argc
0080f838 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00807154 g     F .text	00000080 __ulp
00808580 g     F .text	00000040 __isinfd
008014c8 g     F .text	000000b0 receive_response
00805e44 g     F .text	00000018 __fp_unlock_all
0080126c g     F .text	00000070 send_data
008127c4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806a58 g     F .text	00000010 localeconv
0080f8cc g     F .text	00000050 alt_ic_isr_register
008127fc g       *ABS*	00000000 _edata
008146f0 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080e954 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080f9b8 g     F .text	000000a0 alt_ic_irq_disable
008089b0 g     F .text	0000007c __swrite
008127b4 g     O .rwdata	00000004 __malloc_trim_threshold
0081013c g     F .text	00000020 altera_nios2_qsys_irq_init
008015f0 g     F .text	00000038 exit
00801628 g     F .text	00000044 fiprintf
008020e0 g     F .text	0000001c _vfiprintf_r
008068c4 g     F .text	000000c8 _fwalk_reent
00807750 g     F .text	0000018c __mdiff
0080be90 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00805d84 g     F .text	00000004 __sfp_lock_release
0080f048 g     F .text	00000078 alt_up_character_lcd_string
0080107c g     F .text	00000068 servoLock
008085c0 g     F .text	00000030 __isnand
0080c864 g     F .text	00000020 _exit
0080f3dc g     F .text	00000154 alt_alarm_start
0080bf00 g     F .text	00000098 __muldi3
00806b08 g     F .text	00000194 __smakebuf_r
0080206c g     F .text	00000074 strlen
008086d0 g     F .text	00000064 _init_signal_r
0080fdb0 g     F .text	00000188 open
0080b940 g     F .text	00000088 __gedf2
008015dc g     F .text	00000014 __assert
0080f89c g     F .text	00000030 alt_icache_flush_all
0080f10c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
008127f0 g     O .rwdata	00000004 alt_priority_mask
0080f91c g     F .text	0000009c alt_ic_irq_enable
00804000 g     F .text	00000024 __vfprintf_internal
0080ddf0 g     F .text	00000154 alt_avalon_dma_prepare
0080b098 g     F .text	00000080 __subdf3
008127d8 g     O .rwdata	00000008 alt_dma_rxchan_list
00807030 g     F .text	000000c4 __lo0bits
008127f4 g     O .rwdata	00000008 alt_alarm_list
0080f7d4 g     F .text	00000064 _do_ctors
008087f8 g     F .text	00000014 __sigtramp
0080c52c g     F .text	000000fc close
0080cd2c g     F .text	00000080 alt_load
0080c018 g     F .text	00000314 __pack_d
0080dd68 g     F .text	00000044 alt_avalon_dma_tx_ioctl
008086bc g     F .text	00000014 raise
00801694 g     F .text	00000014 free
00805d88 g     F .text	00000004 __sinit_lock_acquire
00807c4c g     F .text	00000100 __multadd
00806f98 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18d11804 	addi	r3,r3,17504
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18d11804 	addi	r3,r3,17504
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6a9e914 	ori	gp,gp,42916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	1090ff14 	ori	r2,r2,17404

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18d1bc14 	ori	r3,r3,18160

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080cd2c0 	call	80cd2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080cf680 	call	80cf68 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <done>:
/*
* Callback function that obtains notification that the data
* is received in the DMA transfer.
*/
void done (void* handle, int * data)
{
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13ffe15 	stw	r4,-8(fp)
  800210:	e17fff15 	stw	r5,-4(fp)
	rx_done++;
  800214:	d0a71617 	ldw	r2,-25512(gp)
  800218:	10800044 	addi	r2,r2,1
  80021c:	d0a71615 	stw	r2,-25512(gp)
}
  800220:	e037883a 	mov	sp,fp
  800224:	df000017 	ldw	fp,0(sp)
  800228:	dec00104 	addi	sp,sp,4
  80022c:	f800283a 	ret

00800230 <main>:

//Used to control LCD screen.
alt_up_character_lcd_dev * char_lcd_dev;

int main()
{
  800230:	defff104 	addi	sp,sp,-60
  800234:	dfc00e15 	stw	ra,56(sp)
  800238:	df000d15 	stw	fp,52(sp)
  80023c:	df000d04 	addi	fp,sp,52

	lcd_init();
  800240:	08011880 	call	801188 <lcd_init>

	init_comm();
  800244:	08014140 	call	801414 <init_comm>
	servoUnlock();
  800248:	08010e40 	call	8010e4 <servoUnlock>
	servoLock();
  80024c:	080107c0 	call	80107c <servoLock>
	char * pin_num = malloc(4*sizeof(char));
  800250:	01000104 	movi	r4,4
  800254:	08016a80 	call	8016a8 <malloc>
  800258:	e0bfff15 	stw	r2,-4(fp)
	int response; //The response from the Pi
	int i; //Iterator for various loops
	int wrong_count = 0; //The number of incorrect attempts in a row
  80025c:	e03ffc15 	stw	zero,-16(fp)

	//If system starts with switch 0 up, just send pictures
	if(IORD_ALTERA_AVALON_PIO_DATA(MODE_SWITCH_BASE) & 1){
  800260:	00804804 	movi	r2,288
  800264:	10800037 	ldwio	r2,0(r2)
  800268:	1080004c 	andi	r2,r2,1
  80026c:	10803fcc 	andi	r2,r2,255
  800270:	1005003a 	cmpeq	r2,r2,zero
  800274:	10000e1e 	bne	r2,zero,8002b0 <main+0x80>
		printf("Booted in super mode\n");
  800278:	01002074 	movhi	r4,129
  80027c:	21016104 	addi	r4,r4,1412
  800280:	0801f140 	call	801f14 <puts>
		lcd_write("Super Mode");
  800284:	01002074 	movhi	r4,129
  800288:	21016704 	addi	r4,r4,1436
  80028c:	080114c0 	call	80114c <lcd_write>
		while(IORD_ALTERA_AVALON_PIO_DATA(MODE_SWITCH_BASE) & 1){
  800290:	00000106 	br	800298 <main+0x68>
			super_mode();
  800294:	08009d40 	call	8009d4 <super_mode>

	//If system starts with switch 0 up, just send pictures
	if(IORD_ALTERA_AVALON_PIO_DATA(MODE_SWITCH_BASE) & 1){
		printf("Booted in super mode\n");
		lcd_write("Super Mode");
		while(IORD_ALTERA_AVALON_PIO_DATA(MODE_SWITCH_BASE) & 1){
  800298:	00804804 	movi	r2,288
  80029c:	10800037 	ldwio	r2,0(r2)
  8002a0:	1080004c 	andi	r2,r2,1
  8002a4:	10803fcc 	andi	r2,r2,255
  8002a8:	1004c03a 	cmpne	r2,r2,zero
  8002ac:	103ff91e 	bne	r2,zero,800294 <main+0x64>
			super_mode();
		}
	}

	printf("Returned to normal program\n");
  8002b0:	01002074 	movhi	r4,129
  8002b4:	21016a04 	addi	r4,r4,1448
  8002b8:	0801f140 	call	801f14 <puts>
  8002bc:	00000006 	br	8002c0 <main+0x90>
	while(1){
		//Initally turn off all LEDs
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
  8002c0:	00802004 	movi	r2,128
  8002c4:	10000035 	stwio	zero,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
  8002c8:	00802404 	movi	r2,144
  8002cc:	10000035 	stwio	zero,0(r2)
		printf("Waiting for user id\n");
  8002d0:	01002074 	movhi	r4,129
  8002d4:	21017104 	addi	r4,r4,1476
  8002d8:	0801f140 	call	801f14 <puts>
		lcd_write("Enter Code");
  8002dc:	01002074 	movhi	r4,129
  8002e0:	21017604 	addi	r4,r4,1496
  8002e4:	080114c0 	call	80114c <lcd_write>
		pin_num = readKeypadCode();
  8002e8:	0800fd00 	call	800fd0 <readKeypadCode>
  8002ec:	e0bfff15 	stw	r2,-4(fp)
		send_code(pin_num);
  8002f0:	e13fff17 	ldw	r4,-4(fp)
  8002f4:	08011dc0 	call	8011dc <send_code>

		printf("Waiting for response from Pi\n");
  8002f8:	01002074 	movhi	r4,129
  8002fc:	21017904 	addi	r4,r4,1508
  800300:	0801f140 	call	801f14 <puts>

		//If code is accepted
		if (receive_response()){
  800304:	08014c80 	call	8014c8 <receive_response>
  800308:	1005003a 	cmpeq	r2,r2,zero
  80030c:	1000ea1e 	bne	r2,zero,8006b8 <main+0x488>

				//Turn on 2 green LEDs
				IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 3);
  800310:	00c02004 	movi	r3,128
  800314:	008000c4 	movi	r2,3
  800318:	18800035 	stwio	r2,0(r3)

				//Wait for button 3 to be pressed
				printf("Waiting For Button Press\n");
  80031c:	01002074 	movhi	r4,129
  800320:	21018104 	addi	r4,r4,1540
  800324:	0801f140 	call	801f14 <puts>
				lcd_write("Take Picture");
  800328:	01002074 	movhi	r4,129
  80032c:	21018804 	addi	r4,r4,1568
  800330:	080114c0 	call	80114c <lcd_write>
				while((IORD_ALTERA_AVALON_PIO_DATA(BUTTON_3_BASE) & 1) == 1);
  800334:	00804234 	movhi	r2,264
  800338:	10841404 	addi	r2,r2,4176
  80033c:	10800037 	ldwio	r2,0(r2)
  800340:	1080004c 	andi	r2,r2,1
  800344:	10803fcc 	andi	r2,r2,255
  800348:	1004c03a 	cmpne	r2,r2,zero
  80034c:	103ff91e 	bne	r2,zero,800334 <main+0x104>

				//Turn on 1 more Green LED
				IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 7);
  800350:	00c02004 	movi	r3,128
  800354:	008001c4 	movi	r2,7
  800358:	18800035 	stwio	r2,0(r3)
				//START OF DMA CODE (MEMORY TO MEMORY)
				int rc;
				alt_dma_txchan txchan;
				alt_dma_rxchan rxchan;

				char * buffer = malloc(153600);
  80035c:	010000b4 	movhi	r4,2
  800360:	21160004 	addi	r4,r4,22528
  800364:	08016a80 	call	8016a8 <malloc>
  800368:	e0bff815 	stw	r2,-32(fp)

				assert(buffer);
  80036c:	e0bff817 	ldw	r2,-32(fp)
  800370:	1004c03a 	cmpne	r2,r2,zero
  800374:	1000071e 	bne	r2,zero,800394 <main+0x164>
  800378:	01002074 	movhi	r4,129
  80037c:	21018c04 	addi	r4,r4,1584
  800380:	01401bc4 	movi	r5,111
  800384:	d1a00004 	addi	r6,gp,-32768
  800388:	01c02074 	movhi	r7,129
  80038c:	39c19004 	addi	r7,r7,1600
  800390:	08015780 	call	801578 <__assert_func>

				//Initialize source and destination
				void* tx_data = (void*) FRAME_SAVE_DMA_READ_MASTER_PIXEL_BUFFER_BASE; // pointer to data to send
  800394:	00804034 	movhi	r2,256
  800398:	e0bff715 	stw	r2,-36(fp)
				void* rx_buffer = (void*) buffer; // pointer to rx buffer
  80039c:	e0bff817 	ldw	r2,-32(fp)
  8003a0:	e0bff615 	stw	r2,-40(fp)

				// Create transmit channel
				if ((txchan = alt_dma_txchan_open(FRAME_SAVE_DMA_NAME)) == NULL)
  8003a4:	01002074 	movhi	r4,129
  8003a8:	21019204 	addi	r4,r4,1608
  8003ac:	080c76c0 	call	80c76c <alt_dma_txchan_open>
  8003b0:	e0bffa15 	stw	r2,-24(fp)
  8003b4:	e0bffa17 	ldw	r2,-24(fp)
  8003b8:	1004c03a 	cmpne	r2,r2,zero
  8003bc:	1000051e 	bne	r2,zero,8003d4 <main+0x1a4>
				{
				  printf ("Failed to open transmit channel\n");
  8003c0:	01002074 	movhi	r4,129
  8003c4:	21019704 	addi	r4,r4,1628
  8003c8:	0801f140 	call	801f14 <puts>
				  exit (1);
  8003cc:	01000044 	movi	r4,1
  8003d0:	08015f00 	call	8015f0 <exit>
				}
				// create receive channel
				if ((rxchan = alt_dma_rxchan_open(FRAME_SAVE_DMA_NAME)) == NULL)
  8003d4:	01002074 	movhi	r4,129
  8003d8:	21019204 	addi	r4,r4,1608
  8003dc:	080c6b40 	call	80c6b4 <alt_dma_rxchan_open>
  8003e0:	e0bff915 	stw	r2,-28(fp)
  8003e4:	e0bff917 	ldw	r2,-28(fp)
  8003e8:	1004c03a 	cmpne	r2,r2,zero
  8003ec:	1000051e 	bne	r2,zero,800404 <main+0x1d4>
				{
				  printf ("Failed to open receive channel\n");
  8003f0:	01002074 	movhi	r4,129
  8003f4:	21019f04 	addi	r4,r4,1660
  8003f8:	0801f140 	call	801f14 <puts>
				  exit (1);
  8003fc:	01000044 	movi	r4,1
  800400:	08015f00 	call	8015f0 <exit>
				}

				//Specify the size
				alt_dma_rxchan_ioctl(rxchan, ALT_DMA_SET_MODE_8, NULL);
  800404:	e13ff917 	ldw	r4,-28(fp)
  800408:	01400144 	movi	r5,5
  80040c:	000d883a 	mov	r6,zero
  800410:	08007cc0 	call	8007cc <alt_dma_rxchan_ioctl>
				alt_dma_txchan_ioctl(txchan, ALT_DMA_SET_MODE_8, NULL);
  800414:	e13ffa17 	ldw	r4,-24(fp)
  800418:	01400144 	movi	r5,5
  80041c:	000d883a 	mov	r6,zero
  800420:	08008340 	call	800834 <alt_dma_txchan_ioctl>


				//Create receive Request
				if ((rc = alt_dma_rxchan_prepare (rxchan,
  800424:	01c02034 	movhi	r7,128
  800428:	39c08004 	addi	r7,r7,512
  80042c:	d8000015 	stw	zero,0(sp)
  800430:	e13ff917 	ldw	r4,-28(fp)
  800434:	e17ff617 	ldw	r5,-40(fp)
  800438:	018000b4 	movhi	r6,2
  80043c:	31960004 	addi	r6,r6,22528
  800440:	080089c0 	call	80089c <alt_dma_rxchan_prepare>
  800444:	e0bffb15 	stw	r2,-20(fp)
  800448:	e0bffb17 	ldw	r2,-20(fp)
  80044c:	1004403a 	cmpge	r2,r2,zero
  800450:	1000061e 	bne	r2,zero,80046c <main+0x23c>
					  rx_buffer,
					  153600,
					  done,
					  NULL)) < 0)
				{
				  printf ("Failed to request read: %i\n", rc);
  800454:	01002074 	movhi	r4,129
  800458:	2101a704 	addi	r4,r4,1692
  80045c:	e17ffb17 	ldw	r5,-20(fp)
  800460:	0801dfc0 	call	801dfc <printf>
				  exit (1);
  800464:	01000044 	movi	r4,1
  800468:	08015f00 	call	8015f0 <exit>
				}

				// Create send request
				if ((rc = alt_dma_txchan_send (txchan,
  80046c:	d8000015 	stw	zero,0(sp)
  800470:	e13ffa17 	ldw	r4,-24(fp)
  800474:	e17ff717 	ldw	r5,-36(fp)
  800478:	018000b4 	movhi	r6,2
  80047c:	31960004 	addi	r6,r6,22528
  800480:	000f883a 	mov	r7,zero
  800484:	08009140 	call	800914 <alt_dma_txchan_send>
  800488:	e0bffb15 	stw	r2,-20(fp)
  80048c:	e0bffb17 	ldw	r2,-20(fp)
  800490:	1004403a 	cmpge	r2,r2,zero
  800494:	1000061e 	bne	r2,zero,8004b0 <main+0x280>
					  tx_data,
					  153600,
					  NULL,
					  NULL)) < 0)
				{
				  printf ("Failed to request send: %i\n", rc);
  800498:	01002074 	movhi	r4,129
  80049c:	2101ae04 	addi	r4,r4,1720
  8004a0:	e17ffb17 	ldw	r5,-20(fp)
  8004a4:	0801dfc0 	call	801dfc <printf>
				  exit (1);
  8004a8:	01000044 	movi	r4,1
  8004ac:	08015f00 	call	8015f0 <exit>
				}


				printf("Transfering...\n");
  8004b0:	01002074 	movhi	r4,129
  8004b4:	2101b504 	addi	r4,r4,1748
  8004b8:	0801f140 	call	801f14 <puts>
				// wait for transfer to complete
				while (!rx_done);
  8004bc:	d0a71617 	ldw	r2,-25512(gp)
  8004c0:	1005003a 	cmpeq	r2,r2,zero
  8004c4:	103ffd1e 	bne	r2,zero,8004bc <main+0x28c>

				//Close the send and recieve channels
				alt_dma_rxchan_close(rxchan);
  8004c8:	e13ff917 	ldw	r4,-28(fp)
  8004cc:	080098c0 	call	80098c <alt_dma_rxchan_close>
				alt_dma_txchan_close(txchan);
  8004d0:	e13ffa17 	ldw	r4,-24(fp)
  8004d4:	08009b00 	call	8009b0 <alt_dma_txchan_close>

				printf ("Transfer successful!\n");
  8004d8:	01002074 	movhi	r4,129
  8004dc:	2101b904 	addi	r4,r4,1764
  8004e0:	0801f140 	call	801f14 <puts>

				//END OF DMA CODE

				//Send buffer data to the Raspberry Pi
				send_buffer( buffer );
  8004e4:	e13ff817 	ldw	r4,-32(fp)
  8004e8:	08012200 	call	801220 <send_buffer>
				free(buffer);
  8004ec:	e13ff817 	ldw	r4,-32(fp)
  8004f0:	08016940 	call	801694 <free>

				//Turn on one more green LED
				lcd_write("Waiting...");
  8004f4:	01002074 	movhi	r4,129
  8004f8:	2101bf04 	addi	r4,r4,1788
  8004fc:	080114c0 	call	80114c <lcd_write>
				IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 15);
  800500:	00c02004 	movi	r3,128
  800504:	008003c4 	movi	r2,15
  800508:	18800035 	stwio	r2,0(r3)

				//Wait for button 3 to be released (if still pressed)
				while ((IORD_ALTERA_AVALON_PIO_DATA(BUTTON_3_BASE) & 1) == 0);
  80050c:	00804234 	movhi	r2,264
  800510:	10841404 	addi	r2,r2,4176
  800514:	10800037 	ldwio	r2,0(r2)
  800518:	1080004c 	andi	r2,r2,1
  80051c:	1005003a 	cmpeq	r2,r2,zero
  800520:	103ffa1e 	bne	r2,zero,80050c <main+0x2dc>

				if(receive_response()){
  800524:	08014c80 	call	8014c8 <receive_response>
  800528:	1005003a 	cmpeq	r2,r2,zero
  80052c:	10001d1e 	bne	r2,zero,8005a4 <main+0x374>
					wrong_count = 0;
  800530:	e03ffc15 	stw	zero,-16(fp)
					lcd_write("Welcome Home");
  800534:	01002074 	movhi	r4,129
  800538:	2101c204 	addi	r4,r4,1800
  80053c:	080114c0 	call	80114c <lcd_write>
					servoUnlock();
  800540:	08010e40 	call	8010e4 <servoUnlock>
					for (i = 0; i < 10; i++){
  800544:	e03ffd15 	stw	zero,-12(fp)
  800548:	00000e06 	br	800584 <main+0x354>
						IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0xff);
  80054c:	00c02004 	movi	r3,128
  800550:	00803fc4 	movi	r2,255
  800554:	18800035 	stwio	r2,0(r3)
						usleep(500000);
  800558:	01000234 	movhi	r4,8
  80055c:	21284804 	addi	r4,r4,-24288
  800560:	080d2b00 	call	80d2b0 <usleep>
						IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
  800564:	00802004 	movi	r2,128
  800568:	10000035 	stwio	zero,0(r2)
						usleep(500000);
  80056c:	01000234 	movhi	r4,8
  800570:	21284804 	addi	r4,r4,-24288
  800574:	080d2b00 	call	80d2b0 <usleep>

				if(receive_response()){
					wrong_count = 0;
					lcd_write("Welcome Home");
					servoUnlock();
					for (i = 0; i < 10; i++){
  800578:	e0bffd17 	ldw	r2,-12(fp)
  80057c:	10800044 	addi	r2,r2,1
  800580:	e0bffd15 	stw	r2,-12(fp)
  800584:	e0bffd17 	ldw	r2,-12(fp)
  800588:	10800290 	cmplti	r2,r2,10
  80058c:	103fef1e 	bne	r2,zero,80054c <main+0x31c>
						IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0xff);
						usleep(500000);
						IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
						usleep(500000);
					}
					lcd_write("Locking...");
  800590:	01002074 	movhi	r4,129
  800594:	2101c604 	addi	r4,r4,1816
  800598:	080114c0 	call	80114c <lcd_write>
					servoLock();
  80059c:	080107c0 	call	80107c <servoLock>
  8005a0:	003f4706 	br	8002c0 <main+0x90>
				}
				//If face was not accepted
				else if (wrong_count < 2)
  8005a4:	e0bffc17 	ldw	r2,-16(fp)
  8005a8:	10800088 	cmpgei	r2,r2,2
  8005ac:	10001d1e 	bne	r2,zero,800624 <main+0x3f4>
				{
					IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
  8005b0:	00802004 	movi	r2,128
  8005b4:	10000035 	stwio	zero,0(r2)
					lcd_write("Incorrect Face");
  8005b8:	01002074 	movhi	r4,129
  8005bc:	2101c904 	addi	r4,r4,1828
  8005c0:	080114c0 	call	80114c <lcd_write>
					wrong_count++;
  8005c4:	e0bffc17 	ldw	r2,-16(fp)
  8005c8:	10800044 	addi	r2,r2,1
  8005cc:	e0bffc15 	stw	r2,-16(fp)
					for (i = 0; i < 3; i++){
  8005d0:	e03ffd15 	stw	zero,-12(fp)
  8005d4:	00000f06 	br	800614 <main+0x3e4>
						usleep(250000);
  8005d8:	01000134 	movhi	r4,4
  8005dc:	21342404 	addi	r4,r4,-12144
  8005e0:	080d2b00 	call	80d2b0 <usleep>
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0x3ffff);
  8005e4:	00c02404 	movi	r3,144
  8005e8:	00800134 	movhi	r2,4
  8005ec:	10bfffc4 	addi	r2,r2,-1
  8005f0:	18800035 	stwio	r2,0(r3)
						usleep(250000);
  8005f4:	01000134 	movhi	r4,4
  8005f8:	21342404 	addi	r4,r4,-12144
  8005fc:	080d2b00 	call	80d2b0 <usleep>
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
  800600:	00802404 	movi	r2,144
  800604:	10000035 	stwio	zero,0(r2)
				else if (wrong_count < 2)
				{
					IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
					lcd_write("Incorrect Face");
					wrong_count++;
					for (i = 0; i < 3; i++){
  800608:	e0bffd17 	ldw	r2,-12(fp)
  80060c:	10800044 	addi	r2,r2,1
  800610:	e0bffd15 	stw	r2,-12(fp)
  800614:	e0bffd17 	ldw	r2,-12(fp)
  800618:	108000d0 	cmplti	r2,r2,3
  80061c:	103fee1e 	bne	r2,zero,8005d8 <main+0x3a8>
  800620:	003f2706 	br	8002c0 <main+0x90>
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
					}
				}
				//If face was not accepted and 3 wrong attempts in a row
				else {
					IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
  800624:	00802004 	movi	r2,128
  800628:	10000035 	stwio	zero,0(r2)
					wrong_count = 0;
  80062c:	e03ffc15 	stw	zero,-16(fp)
					char * lock_string = malloc(20 * sizeof(char));
  800630:	01000504 	movi	r4,20
  800634:	08016a80 	call	8016a8 <malloc>
  800638:	e0bff515 	stw	r2,-44(fp)
					for (i = 15; i > 0; i--){
  80063c:	008003c4 	movi	r2,15
  800640:	e0bffd15 	stw	r2,-12(fp)
  800644:	00001606 	br	8006a0 <main+0x470>
						sprintf(lock_string, "Locked for %d s", i);
  800648:	e13ff517 	ldw	r4,-44(fp)
  80064c:	01402074 	movhi	r5,129
  800650:	2941cd04 	addi	r5,r5,1844
  800654:	e1bffd17 	ldw	r6,-12(fp)
  800658:	0801f980 	call	801f98 <sprintf>
						lcd_write(lock_string);
  80065c:	e13ff517 	ldw	r4,-44(fp)
  800660:	080114c0 	call	80114c <lcd_write>
						usleep(500000);
  800664:	01000234 	movhi	r4,8
  800668:	21284804 	addi	r4,r4,-24288
  80066c:	080d2b00 	call	80d2b0 <usleep>
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0x3ffff);
  800670:	00c02404 	movi	r3,144
  800674:	00800134 	movhi	r2,4
  800678:	10bfffc4 	addi	r2,r2,-1
  80067c:	18800035 	stwio	r2,0(r3)
						usleep(500000);
  800680:	01000234 	movhi	r4,8
  800684:	21284804 	addi	r4,r4,-24288
  800688:	080d2b00 	call	80d2b0 <usleep>
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
  80068c:	00802404 	movi	r2,144
  800690:	10000035 	stwio	zero,0(r2)
				//If face was not accepted and 3 wrong attempts in a row
				else {
					IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
					wrong_count = 0;
					char * lock_string = malloc(20 * sizeof(char));
					for (i = 15; i > 0; i--){
  800694:	e0bffd17 	ldw	r2,-12(fp)
  800698:	10bfffc4 	addi	r2,r2,-1
  80069c:	e0bffd15 	stw	r2,-12(fp)
  8006a0:	e0bffd17 	ldw	r2,-12(fp)
  8006a4:	10800048 	cmpgei	r2,r2,1
  8006a8:	103fe71e 	bne	r2,zero,800648 <main+0x418>
						usleep(500000);
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0x3ffff);
						usleep(500000);
						IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
					}
					free(lock_string);
  8006ac:	e13ff517 	ldw	r4,-44(fp)
  8006b0:	08016940 	call	801694 <free>
  8006b4:	003f0206 	br	8002c0 <main+0x90>
				}
		}
		//If keypad code was not accepted
		else if (wrong_count < 2)
  8006b8:	e0bffc17 	ldw	r2,-16(fp)
  8006bc:	10800088 	cmpgei	r2,r2,2
  8006c0:	10001d1e 	bne	r2,zero,800738 <main+0x508>
		{
			IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
  8006c4:	00802004 	movi	r2,128
  8006c8:	10000035 	stwio	zero,0(r2)
			lcd_write("Incorrect Code");
  8006cc:	01002074 	movhi	r4,129
  8006d0:	2101d104 	addi	r4,r4,1860
  8006d4:	080114c0 	call	80114c <lcd_write>
			wrong_count++;
  8006d8:	e0bffc17 	ldw	r2,-16(fp)
  8006dc:	10800044 	addi	r2,r2,1
  8006e0:	e0bffc15 	stw	r2,-16(fp)
			for (i = 0; i < 3; i++){
  8006e4:	e03ffd15 	stw	zero,-12(fp)
  8006e8:	00000f06 	br	800728 <main+0x4f8>
				usleep(250000);
  8006ec:	01000134 	movhi	r4,4
  8006f0:	21342404 	addi	r4,r4,-12144
  8006f4:	080d2b00 	call	80d2b0 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0x3ffff);
  8006f8:	00c02404 	movi	r3,144
  8006fc:	00800134 	movhi	r2,4
  800700:	10bfffc4 	addi	r2,r2,-1
  800704:	18800035 	stwio	r2,0(r3)
				usleep(250000);
  800708:	01000134 	movhi	r4,4
  80070c:	21342404 	addi	r4,r4,-12144
  800710:	080d2b00 	call	80d2b0 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
  800714:	00802404 	movi	r2,144
  800718:	10000035 	stwio	zero,0(r2)
		else if (wrong_count < 2)
		{
			IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
			lcd_write("Incorrect Code");
			wrong_count++;
			for (i = 0; i < 3; i++){
  80071c:	e0bffd17 	ldw	r2,-12(fp)
  800720:	10800044 	addi	r2,r2,1
  800724:	e0bffd15 	stw	r2,-12(fp)
  800728:	e0bffd17 	ldw	r2,-12(fp)
  80072c:	108000d0 	cmplti	r2,r2,3
  800730:	103fee1e 	bne	r2,zero,8006ec <main+0x4bc>
  800734:	003ee206 	br	8002c0 <main+0x90>
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
			}
		}
		//If code was not accepted and 3 wrong attempts in a row
		else {
			IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
  800738:	00802004 	movi	r2,128
  80073c:	10000035 	stwio	zero,0(r2)
			wrong_count = 0;
  800740:	e03ffc15 	stw	zero,-16(fp)
			char * lock_string = malloc(20 * sizeof(char));
  800744:	01000504 	movi	r4,20
  800748:	08016a80 	call	8016a8 <malloc>
  80074c:	e0bff415 	stw	r2,-48(fp)
			for (i = 15; i > 0; i--){
  800750:	008003c4 	movi	r2,15
  800754:	e0bffd15 	stw	r2,-12(fp)
  800758:	00001606 	br	8007b4 <main+0x584>
				sprintf(lock_string, "Locked for %d s", i);
  80075c:	e13ff417 	ldw	r4,-48(fp)
  800760:	01402074 	movhi	r5,129
  800764:	2941cd04 	addi	r5,r5,1844
  800768:	e1bffd17 	ldw	r6,-12(fp)
  80076c:	0801f980 	call	801f98 <sprintf>
				lcd_write(lock_string);
  800770:	e13ff417 	ldw	r4,-48(fp)
  800774:	080114c0 	call	80114c <lcd_write>
				usleep(500000);
  800778:	01000234 	movhi	r4,8
  80077c:	21284804 	addi	r4,r4,-24288
  800780:	080d2b00 	call	80d2b0 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0x3ffff);
  800784:	00c02404 	movi	r3,144
  800788:	00800134 	movhi	r2,4
  80078c:	10bfffc4 	addi	r2,r2,-1
  800790:	18800035 	stwio	r2,0(r3)
				usleep(500000);
  800794:	01000234 	movhi	r4,8
  800798:	21284804 	addi	r4,r4,-24288
  80079c:	080d2b00 	call	80d2b0 <usleep>
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
  8007a0:	00802404 	movi	r2,144
  8007a4:	10000035 	stwio	zero,0(r2)
		//If code was not accepted and 3 wrong attempts in a row
		else {
			IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LED_BASE, 0);
			wrong_count = 0;
			char * lock_string = malloc(20 * sizeof(char));
			for (i = 15; i > 0; i--){
  8007a8:	e0bffd17 	ldw	r2,-12(fp)
  8007ac:	10bfffc4 	addi	r2,r2,-1
  8007b0:	e0bffd15 	stw	r2,-12(fp)
  8007b4:	e0bffd17 	ldw	r2,-12(fp)
  8007b8:	10800048 	cmpgei	r2,r2,1
  8007bc:	103fe71e 	bne	r2,zero,80075c <main+0x52c>
				usleep(500000);
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0x3ffff);
				usleep(500000);
				IOWR_ALTERA_AVALON_PIO_DATA(RED_LED_BASE, 0);
			}
			free(lock_string);
  8007c0:	e13ff417 	ldw	r4,-48(fp)
  8007c4:	08016940 	call	801694 <free>
		}

  } //end of while loop
  8007c8:	003ebd06 	br	8002c0 <main+0x90>

008007cc <alt_dma_rxchan_ioctl>:
 */

static ALT_INLINE int alt_dma_rxchan_ioctl (alt_dma_rxchan dma, 
              int            req, 
              void*          arg)
{
  8007cc:	defffa04 	addi	sp,sp,-24
  8007d0:	dfc00515 	stw	ra,20(sp)
  8007d4:	df000415 	stw	fp,16(sp)
  8007d8:	df000404 	addi	fp,sp,16
  8007dc:	e13ffc15 	stw	r4,-16(fp)
  8007e0:	e17ffd15 	stw	r5,-12(fp)
  8007e4:	e1bffe15 	stw	r6,-8(fp)
  return dma ? dma->ioctl (dma, req, arg) : -ENODEV;
  8007e8:	e0bffc17 	ldw	r2,-16(fp)
  8007ec:	1005003a 	cmpeq	r2,r2,zero
  8007f0:	1000081e 	bne	r2,zero,800814 <alt_dma_rxchan_ioctl+0x48>
  8007f4:	e0bffc17 	ldw	r2,-16(fp)
  8007f8:	10800517 	ldw	r2,20(r2)
  8007fc:	e13ffc17 	ldw	r4,-16(fp)
  800800:	e17ffd17 	ldw	r5,-12(fp)
  800804:	e1bffe17 	ldw	r6,-8(fp)
  800808:	103ee83a 	callr	r2
  80080c:	e0bfff15 	stw	r2,-4(fp)
  800810:	00000206 	br	80081c <alt_dma_rxchan_ioctl+0x50>
  800814:	00bffb44 	movi	r2,-19
  800818:	e0bfff15 	stw	r2,-4(fp)
  80081c:	e0bfff17 	ldw	r2,-4(fp)
}
  800820:	e037883a 	mov	sp,fp
  800824:	dfc00117 	ldw	ra,4(sp)
  800828:	df000017 	ldw	fp,0(sp)
  80082c:	dec00204 	addi	sp,sp,8
  800830:	f800283a 	ret

00800834 <alt_dma_txchan_ioctl>:
 */

static ALT_INLINE int alt_dma_txchan_ioctl (alt_dma_txchan dma, 
              int            req, 
              void*          arg)
{
  800834:	defffa04 	addi	sp,sp,-24
  800838:	dfc00515 	stw	ra,20(sp)
  80083c:	df000415 	stw	fp,16(sp)
  800840:	df000404 	addi	fp,sp,16
  800844:	e13ffc15 	stw	r4,-16(fp)
  800848:	e17ffd15 	stw	r5,-12(fp)
  80084c:	e1bffe15 	stw	r6,-8(fp)
  return dma ? dma->ioctl (dma, req, arg) : -ENODEV;
  800850:	e0bffc17 	ldw	r2,-16(fp)
  800854:	1005003a 	cmpeq	r2,r2,zero
  800858:	1000081e 	bne	r2,zero,80087c <alt_dma_txchan_ioctl+0x48>
  80085c:	e0bffc17 	ldw	r2,-16(fp)
  800860:	10800517 	ldw	r2,20(r2)
  800864:	e13ffc17 	ldw	r4,-16(fp)
  800868:	e17ffd17 	ldw	r5,-12(fp)
  80086c:	e1bffe17 	ldw	r6,-8(fp)
  800870:	103ee83a 	callr	r2
  800874:	e0bfff15 	stw	r2,-4(fp)
  800878:	00000206 	br	800884 <alt_dma_txchan_ioctl+0x50>
  80087c:	00bffb44 	movi	r2,-19
  800880:	e0bfff15 	stw	r2,-4(fp)
  800884:	e0bfff17 	ldw	r2,-4(fp)
}
  800888:	e037883a 	mov	sp,fp
  80088c:	dfc00117 	ldw	ra,4(sp)
  800890:	df000017 	ldw	fp,0(sp)
  800894:	dec00204 	addi	sp,sp,8
  800898:	f800283a 	ret

0080089c <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
  80089c:	defff804 	addi	sp,sp,-32
  8008a0:	dfc00715 	stw	ra,28(sp)
  8008a4:	df000615 	stw	fp,24(sp)
  8008a8:	df000604 	addi	fp,sp,24
  8008ac:	e13ffb15 	stw	r4,-20(fp)
  8008b0:	e17ffc15 	stw	r5,-16(fp)
  8008b4:	e1bffd15 	stw	r6,-12(fp)
  8008b8:	e1fffe15 	stw	r7,-8(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
  8008bc:	e0bffb17 	ldw	r2,-20(fp)
  8008c0:	1005003a 	cmpeq	r2,r2,zero
  8008c4:	10000b1e 	bne	r2,zero,8008f4 <alt_dma_rxchan_prepare+0x58>
  8008c8:	e0bffb17 	ldw	r2,-20(fp)
  8008cc:	10c00417 	ldw	r3,16(r2)
  8008d0:	e0800217 	ldw	r2,8(fp)
  8008d4:	d8800015 	stw	r2,0(sp)
  8008d8:	e13ffb17 	ldw	r4,-20(fp)
  8008dc:	e17ffc17 	ldw	r5,-16(fp)
  8008e0:	e1bffd17 	ldw	r6,-12(fp)
  8008e4:	e1fffe17 	ldw	r7,-8(fp)
  8008e8:	183ee83a 	callr	r3
  8008ec:	e0bfff15 	stw	r2,-4(fp)
  8008f0:	00000206 	br	8008fc <alt_dma_rxchan_prepare+0x60>
  8008f4:	00bffb44 	movi	r2,-19
  8008f8:	e0bfff15 	stw	r2,-4(fp)
  8008fc:	e0bfff17 	ldw	r2,-4(fp)
}
  800900:	e037883a 	mov	sp,fp
  800904:	dfc00117 	ldw	ra,4(sp)
  800908:	df000017 	ldw	fp,0(sp)
  80090c:	dec00204 	addi	sp,sp,8
  800910:	f800283a 	ret

00800914 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  800914:	defff804 	addi	sp,sp,-32
  800918:	dfc00715 	stw	ra,28(sp)
  80091c:	df000615 	stw	fp,24(sp)
  800920:	df000604 	addi	fp,sp,24
  800924:	e13ffb15 	stw	r4,-20(fp)
  800928:	e17ffc15 	stw	r5,-16(fp)
  80092c:	e1bffd15 	stw	r6,-12(fp)
  800930:	e1fffe15 	stw	r7,-8(fp)
  return dma ? dma->dma_send (dma, 
  800934:	e0bffb17 	ldw	r2,-20(fp)
  800938:	1005003a 	cmpeq	r2,r2,zero
  80093c:	10000b1e 	bne	r2,zero,80096c <alt_dma_txchan_send+0x58>
  800940:	e0bffb17 	ldw	r2,-20(fp)
  800944:	10c00417 	ldw	r3,16(r2)
  800948:	e0800217 	ldw	r2,8(fp)
  80094c:	d8800015 	stw	r2,0(sp)
  800950:	e13ffb17 	ldw	r4,-20(fp)
  800954:	e17ffc17 	ldw	r5,-16(fp)
  800958:	e1bffd17 	ldw	r6,-12(fp)
  80095c:	e1fffe17 	ldw	r7,-8(fp)
  800960:	183ee83a 	callr	r3
  800964:	e0bfff15 	stw	r2,-4(fp)
  800968:	00000206 	br	800974 <alt_dma_txchan_send+0x60>
  80096c:	00bffb44 	movi	r2,-19
  800970:	e0bfff15 	stw	r2,-4(fp)
  800974:	e0bfff17 	ldw	r2,-4(fp)
        from, 
        length,
        done, 
        handle) : -ENODEV;
}
  800978:	e037883a 	mov	sp,fp
  80097c:	dfc00117 	ldw	ra,4(sp)
  800980:	df000017 	ldw	fp,0(sp)
  800984:	dec00204 	addi	sp,sp,8
  800988:	f800283a 	ret

0080098c <alt_dma_rxchan_close>:
 * system that it has finished with a given DMA receive channel. This is only
 * provided for completness.
 */

static ALT_INLINE int alt_dma_rxchan_close (alt_dma_rxchan dma)
{
  80098c:	defffe04 	addi	sp,sp,-8
  800990:	df000115 	stw	fp,4(sp)
  800994:	df000104 	addi	fp,sp,4
  800998:	e13fff15 	stw	r4,-4(fp)
  return 0;
  80099c:	0005883a 	mov	r2,zero
}
  8009a0:	e037883a 	mov	sp,fp
  8009a4:	df000017 	ldw	fp,0(sp)
  8009a8:	dec00104 	addi	sp,sp,4
  8009ac:	f800283a 	ret

008009b0 <alt_dma_txchan_close>:
 * system that it has finished with a given DMA transmit channel. This is only
 * provided for completness.
 */

static ALT_INLINE int alt_dma_txchan_close (alt_dma_txchan dma)
{
  8009b0:	defffe04 	addi	sp,sp,-8
  8009b4:	df000115 	stw	fp,4(sp)
  8009b8:	df000104 	addi	fp,sp,4
  8009bc:	e13fff15 	stw	r4,-4(fp)
  return 0;
  8009c0:	0005883a 	mov	r2,zero
}
  8009c4:	e037883a 	mov	sp,fp
  8009c8:	df000017 	ldw	fp,0(sp)
  8009cc:	dec00104 	addi	sp,sp,4
  8009d0:	f800283a 	ret

008009d4 <super_mode>:

  return 0;
}

void super_mode(void){
  8009d4:	defff704 	addi	sp,sp,-36
  8009d8:	dfc00815 	stw	ra,32(sp)
  8009dc:	df000715 	stw	fp,28(sp)
  8009e0:	df000704 	addi	fp,sp,28
	//Wait for button 3 to be pressed
	printf("Waiting For Button Press\n");
  8009e4:	01002074 	movhi	r4,129
  8009e8:	21018104 	addi	r4,r4,1540
  8009ec:	0801f140 	call	801f14 <puts>
	//Stop polling once the switch is pushed down
	while((IORD_ALTERA_AVALON_PIO_DATA(BUTTON_3_BASE) & 1) == 1){
  8009f0:	00000506 	br	800a08 <super_mode+0x34>
		if(!(IORD_ALTERA_AVALON_PIO_DATA(MODE_SWITCH_BASE) & 1))
  8009f4:	00804804 	movi	r2,288
  8009f8:	10800037 	ldwio	r2,0(r2)
  8009fc:	1080004c 	andi	r2,r2,1
  800a00:	1005003a 	cmpeq	r2,r2,zero
  800a04:	1000741e 	bne	r2,zero,800bd8 <super_mode+0x204>

void super_mode(void){
	//Wait for button 3 to be pressed
	printf("Waiting For Button Press\n");
	//Stop polling once the switch is pushed down
	while((IORD_ALTERA_AVALON_PIO_DATA(BUTTON_3_BASE) & 1) == 1){
  800a08:	00804234 	movhi	r2,264
  800a0c:	10841404 	addi	r2,r2,4176
  800a10:	10800037 	ldwio	r2,0(r2)
  800a14:	1080004c 	andi	r2,r2,1
  800a18:	10803fcc 	andi	r2,r2,255
  800a1c:	1004c03a 	cmpne	r2,r2,zero
  800a20:	103ff41e 	bne	r2,zero,8009f4 <super_mode+0x20>
	//START OF DMA CODE (MEMORY TO MEMORY)
	int rc;
	alt_dma_txchan txchan;
	alt_dma_rxchan rxchan;

	char * buffer = malloc(153600);
  800a24:	010000b4 	movhi	r4,2
  800a28:	21160004 	addi	r4,r4,22528
  800a2c:	08016a80 	call	8016a8 <malloc>
  800a30:	e0bffc15 	stw	r2,-16(fp)

	assert(buffer);
  800a34:	e0bffc17 	ldw	r2,-16(fp)
  800a38:	1004c03a 	cmpne	r2,r2,zero
  800a3c:	1000081e 	bne	r2,zero,800a60 <super_mode+0x8c>
  800a40:	01002074 	movhi	r4,129
  800a44:	21018c04 	addi	r4,r4,1584
  800a48:	01404444 	movi	r5,273
  800a4c:	01802074 	movhi	r6,129
  800a50:	3181d504 	addi	r6,r6,1876
  800a54:	01c02074 	movhi	r7,129
  800a58:	39c19004 	addi	r7,r7,1600
  800a5c:	08015780 	call	801578 <__assert_func>

	//Initialize source and destination
	void* tx_data = (void*) FRAME_SAVE_DMA_READ_MASTER_PIXEL_BUFFER_BASE; // pointer to data to send
  800a60:	00804034 	movhi	r2,256
  800a64:	e0bffb15 	stw	r2,-20(fp)
	void* rx_buffer = (void*) buffer; // pointer to rx buffer
  800a68:	e0bffc17 	ldw	r2,-16(fp)
  800a6c:	e0bffa15 	stw	r2,-24(fp)

	// Create transmit channel
	if ((txchan = alt_dma_txchan_open(FRAME_SAVE_DMA_NAME)) == NULL)
  800a70:	01002074 	movhi	r4,129
  800a74:	21019204 	addi	r4,r4,1608
  800a78:	080c76c0 	call	80c76c <alt_dma_txchan_open>
  800a7c:	e0bffe15 	stw	r2,-8(fp)
  800a80:	e0bffe17 	ldw	r2,-8(fp)
  800a84:	1004c03a 	cmpne	r2,r2,zero
  800a88:	1000051e 	bne	r2,zero,800aa0 <super_mode+0xcc>
	{
	  printf ("Failed to open transmit channel\n");
  800a8c:	01002074 	movhi	r4,129
  800a90:	21019704 	addi	r4,r4,1628
  800a94:	0801f140 	call	801f14 <puts>
	  exit (1);
  800a98:	01000044 	movi	r4,1
  800a9c:	08015f00 	call	8015f0 <exit>
	}
	// create receive channel
	if ((rxchan = alt_dma_rxchan_open(FRAME_SAVE_DMA_NAME)) == NULL)
  800aa0:	01002074 	movhi	r4,129
  800aa4:	21019204 	addi	r4,r4,1608
  800aa8:	080c6b40 	call	80c6b4 <alt_dma_rxchan_open>
  800aac:	e0bffd15 	stw	r2,-12(fp)
  800ab0:	e0bffd17 	ldw	r2,-12(fp)
  800ab4:	1004c03a 	cmpne	r2,r2,zero
  800ab8:	1000051e 	bne	r2,zero,800ad0 <super_mode+0xfc>
	{
	  printf ("Failed to open receive channel\n");
  800abc:	01002074 	movhi	r4,129
  800ac0:	21019f04 	addi	r4,r4,1660
  800ac4:	0801f140 	call	801f14 <puts>
	  exit (1);
  800ac8:	01000044 	movi	r4,1
  800acc:	08015f00 	call	8015f0 <exit>
	}

	//Specify the size
	alt_dma_rxchan_ioctl(rxchan, ALT_DMA_SET_MODE_8, NULL);
  800ad0:	e13ffd17 	ldw	r4,-12(fp)
  800ad4:	01400144 	movi	r5,5
  800ad8:	000d883a 	mov	r6,zero
  800adc:	08007cc0 	call	8007cc <alt_dma_rxchan_ioctl>
	alt_dma_txchan_ioctl(txchan, ALT_DMA_SET_MODE_8, NULL);
  800ae0:	e13ffe17 	ldw	r4,-8(fp)
  800ae4:	01400144 	movi	r5,5
  800ae8:	000d883a 	mov	r6,zero
  800aec:	08008340 	call	800834 <alt_dma_txchan_ioctl>


	//Create receive Request
	if ((rc = alt_dma_rxchan_prepare (rxchan,
  800af0:	01c02034 	movhi	r7,128
  800af4:	39c08004 	addi	r7,r7,512
  800af8:	d8000015 	stw	zero,0(sp)
  800afc:	e13ffd17 	ldw	r4,-12(fp)
  800b00:	e17ffa17 	ldw	r5,-24(fp)
  800b04:	018000b4 	movhi	r6,2
  800b08:	31960004 	addi	r6,r6,22528
  800b0c:	080089c0 	call	80089c <alt_dma_rxchan_prepare>
  800b10:	e0bfff15 	stw	r2,-4(fp)
  800b14:	e0bfff17 	ldw	r2,-4(fp)
  800b18:	1004403a 	cmpge	r2,r2,zero
  800b1c:	1000061e 	bne	r2,zero,800b38 <super_mode+0x164>
		  rx_buffer,
		  153600,
		  done,
		  NULL)) < 0)
	{
	  printf ("Failed to request read: %i\n", rc);
  800b20:	01002074 	movhi	r4,129
  800b24:	2101a704 	addi	r4,r4,1692
  800b28:	e17fff17 	ldw	r5,-4(fp)
  800b2c:	0801dfc0 	call	801dfc <printf>
	  exit (1);
  800b30:	01000044 	movi	r4,1
  800b34:	08015f00 	call	8015f0 <exit>
	}

	// Create send request
	if ((rc = alt_dma_txchan_send (txchan,
  800b38:	d8000015 	stw	zero,0(sp)
  800b3c:	e13ffe17 	ldw	r4,-8(fp)
  800b40:	e17ffb17 	ldw	r5,-20(fp)
  800b44:	018000b4 	movhi	r6,2
  800b48:	31960004 	addi	r6,r6,22528
  800b4c:	000f883a 	mov	r7,zero
  800b50:	08009140 	call	800914 <alt_dma_txchan_send>
  800b54:	e0bfff15 	stw	r2,-4(fp)
  800b58:	e0bfff17 	ldw	r2,-4(fp)
  800b5c:	1004403a 	cmpge	r2,r2,zero
  800b60:	1000061e 	bne	r2,zero,800b7c <super_mode+0x1a8>
		  tx_data,
		  153600,
		  NULL,
		  NULL)) < 0)
	{
	  printf ("Failed to request send: %i\n", rc);
  800b64:	01002074 	movhi	r4,129
  800b68:	2101ae04 	addi	r4,r4,1720
  800b6c:	e17fff17 	ldw	r5,-4(fp)
  800b70:	0801dfc0 	call	801dfc <printf>
	  exit (1);
  800b74:	01000044 	movi	r4,1
  800b78:	08015f00 	call	8015f0 <exit>
	}


	printf("Transfering...\n");
  800b7c:	01002074 	movhi	r4,129
  800b80:	2101b504 	addi	r4,r4,1748
  800b84:	0801f140 	call	801f14 <puts>
	// wait for transfer to complete
	while (!rx_done);
  800b88:	d0a71617 	ldw	r2,-25512(gp)
  800b8c:	1005003a 	cmpeq	r2,r2,zero
  800b90:	103ffd1e 	bne	r2,zero,800b88 <super_mode+0x1b4>

	//Close the send and recieve channels
	alt_dma_rxchan_close(rxchan);
  800b94:	e13ffd17 	ldw	r4,-12(fp)
  800b98:	080098c0 	call	80098c <alt_dma_rxchan_close>
	alt_dma_txchan_close(txchan);
  800b9c:	e13ffe17 	ldw	r4,-8(fp)
  800ba0:	08009b00 	call	8009b0 <alt_dma_txchan_close>

	printf ("Transfer successful!\n");
  800ba4:	01002074 	movhi	r4,129
  800ba8:	2101b904 	addi	r4,r4,1764
  800bac:	0801f140 	call	801f14 <puts>

	//END OF DMA CODE

	//Send buffer data to the Raspberry Pi
	send_buffer( buffer );
  800bb0:	e13ffc17 	ldw	r4,-16(fp)
  800bb4:	08012200 	call	801220 <send_buffer>
	free(buffer);
  800bb8:	e13ffc17 	ldw	r4,-16(fp)
  800bbc:	08016940 	call	801694 <free>

	//Wait for button 3 to be released (if still pressed)
	while ((IORD_ALTERA_AVALON_PIO_DATA(BUTTON_3_BASE) & 1) == 0);
  800bc0:	00804234 	movhi	r2,264
  800bc4:	10841404 	addi	r2,r2,4176
  800bc8:	10800037 	ldwio	r2,0(r2)
  800bcc:	1080004c 	andi	r2,r2,1
  800bd0:	1005003a 	cmpeq	r2,r2,zero
  800bd4:	103ffa1e 	bne	r2,zero,800bc0 <super_mode+0x1ec>
}
  800bd8:	e037883a 	mov	sp,fp
  800bdc:	dfc00117 	ldw	ra,4(sp)
  800be0:	df000017 	ldw	fp,0(sp)
  800be4:	dec00204 	addi	sp,sp,8
  800be8:	f800283a 	ret

00800bec <readKeypad>:

char readKeypad(void){
  800bec:	defffd04 	addi	sp,sp,-12
  800bf0:	dfc00215 	stw	ra,8(sp)
  800bf4:	df000115 	stw	fp,4(sp)
  800bf8:	df000104 	addi	fp,sp,4
	char key = -1;
  800bfc:	00bfffc4 	movi	r2,-1
  800c00:	e0bfff05 	stb	r2,-4(fp)

	//Left Column top to bottom
	IOWR_ALTERA_AVALON_PIO_DATA(KEYPAD_COLS_BASE, 1);
  800c04:	00c00404 	movi	r3,16
  800c08:	00800044 	movi	r2,1
  800c0c:	18800035 	stwio	r2,0(r3)
	usleep(20);
  800c10:	01000504 	movi	r4,20
  800c14:	080d2b00 	call	80d2b0 <usleep>
	if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 1)
  800c18:	00800804 	movi	r2,32
  800c1c:	10800037 	ldwio	r2,0(r2)
  800c20:	1080004c 	andi	r2,r2,1
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1005003a 	cmpeq	r2,r2,zero
  800c2c:	1000031e 	bne	r2,zero,800c3c <readKeypad+0x50>
		key = 1; //1
  800c30:	00800044 	movi	r2,1
  800c34:	e0bfff05 	stb	r2,-4(fp)
  800c38:	00001706 	br	800c98 <readKeypad+0xac>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 2)
  800c3c:	00800804 	movi	r2,32
  800c40:	10800037 	ldwio	r2,0(r2)
  800c44:	1080008c 	andi	r2,r2,2
  800c48:	1005003a 	cmpeq	r2,r2,zero
  800c4c:	1000031e 	bne	r2,zero,800c5c <readKeypad+0x70>
		key = 4;
  800c50:	00800104 	movi	r2,4
  800c54:	e0bfff05 	stb	r2,-4(fp)
  800c58:	00000f06 	br	800c98 <readKeypad+0xac>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 4)
  800c5c:	00800804 	movi	r2,32
  800c60:	10800037 	ldwio	r2,0(r2)
  800c64:	1080010c 	andi	r2,r2,4
  800c68:	1005003a 	cmpeq	r2,r2,zero
  800c6c:	1000031e 	bne	r2,zero,800c7c <readKeypad+0x90>
		key = 7;
  800c70:	008001c4 	movi	r2,7
  800c74:	e0bfff05 	stb	r2,-4(fp)
  800c78:	00000706 	br	800c98 <readKeypad+0xac>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
  800c7c:	00800804 	movi	r2,32
  800c80:	10800037 	ldwio	r2,0(r2)
  800c84:	1080020c 	andi	r2,r2,8
  800c88:	1005003a 	cmpeq	r2,r2,zero
  800c8c:	1000021e 	bne	r2,zero,800c98 <readKeypad+0xac>
		key = 10; //STAR
  800c90:	00800284 	movi	r2,10
  800c94:	e0bfff05 	stb	r2,-4(fp)

	//Middle Column top to bottom
	IOWR_ALTERA_AVALON_PIO_DATA(KEYPAD_COLS_BASE, 2);
  800c98:	00c00404 	movi	r3,16
  800c9c:	00800084 	movi	r2,2
  800ca0:	18800035 	stwio	r2,0(r3)
	usleep(20);
  800ca4:	01000504 	movi	r4,20
  800ca8:	080d2b00 	call	80d2b0 <usleep>
	if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 1)
  800cac:	00800804 	movi	r2,32
  800cb0:	10800037 	ldwio	r2,0(r2)
  800cb4:	1080004c 	andi	r2,r2,1
  800cb8:	10803fcc 	andi	r2,r2,255
  800cbc:	1005003a 	cmpeq	r2,r2,zero
  800cc0:	1000031e 	bne	r2,zero,800cd0 <readKeypad+0xe4>
		key = 2; //2
  800cc4:	00800084 	movi	r2,2
  800cc8:	e0bfff05 	stb	r2,-4(fp)
  800ccc:	00001606 	br	800d28 <readKeypad+0x13c>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 2)
  800cd0:	00800804 	movi	r2,32
  800cd4:	10800037 	ldwio	r2,0(r2)
  800cd8:	1080008c 	andi	r2,r2,2
  800cdc:	1005003a 	cmpeq	r2,r2,zero
  800ce0:	1000031e 	bne	r2,zero,800cf0 <readKeypad+0x104>
		key = 5;
  800ce4:	00800144 	movi	r2,5
  800ce8:	e0bfff05 	stb	r2,-4(fp)
  800cec:	00000e06 	br	800d28 <readKeypad+0x13c>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 4)
  800cf0:	00800804 	movi	r2,32
  800cf4:	10800037 	ldwio	r2,0(r2)
  800cf8:	1080010c 	andi	r2,r2,4
  800cfc:	1005003a 	cmpeq	r2,r2,zero
  800d00:	1000031e 	bne	r2,zero,800d10 <readKeypad+0x124>
		key = 8;
  800d04:	00800204 	movi	r2,8
  800d08:	e0bfff05 	stb	r2,-4(fp)
  800d0c:	00000606 	br	800d28 <readKeypad+0x13c>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
  800d10:	00800804 	movi	r2,32
  800d14:	10800037 	ldwio	r2,0(r2)
  800d18:	1080020c 	andi	r2,r2,8
  800d1c:	1005003a 	cmpeq	r2,r2,zero
  800d20:	1000011e 	bne	r2,zero,800d28 <readKeypad+0x13c>
		key = 0;
  800d24:	e03fff05 	stb	zero,-4(fp)

	//Right Column top to bottom
	IOWR_ALTERA_AVALON_PIO_DATA(KEYPAD_COLS_BASE, 4);
  800d28:	00c00404 	movi	r3,16
  800d2c:	00800104 	movi	r2,4
  800d30:	18800035 	stwio	r2,0(r3)
	usleep(20);
  800d34:	01000504 	movi	r4,20
  800d38:	080d2b00 	call	80d2b0 <usleep>
	if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 1)
  800d3c:	00800804 	movi	r2,32
  800d40:	10800037 	ldwio	r2,0(r2)
  800d44:	1080004c 	andi	r2,r2,1
  800d48:	10803fcc 	andi	r2,r2,255
  800d4c:	1005003a 	cmpeq	r2,r2,zero
  800d50:	1000031e 	bne	r2,zero,800d60 <readKeypad+0x174>
		key = 3; //3
  800d54:	008000c4 	movi	r2,3
  800d58:	e0bfff05 	stb	r2,-4(fp)
  800d5c:	00001706 	br	800dbc <readKeypad+0x1d0>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 2)
  800d60:	00800804 	movi	r2,32
  800d64:	10800037 	ldwio	r2,0(r2)
  800d68:	1080008c 	andi	r2,r2,2
  800d6c:	1005003a 	cmpeq	r2,r2,zero
  800d70:	1000031e 	bne	r2,zero,800d80 <readKeypad+0x194>
		key = 6;
  800d74:	00800184 	movi	r2,6
  800d78:	e0bfff05 	stb	r2,-4(fp)
  800d7c:	00000f06 	br	800dbc <readKeypad+0x1d0>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 4)
  800d80:	00800804 	movi	r2,32
  800d84:	10800037 	ldwio	r2,0(r2)
  800d88:	1080010c 	andi	r2,r2,4
  800d8c:	1005003a 	cmpeq	r2,r2,zero
  800d90:	1000031e 	bne	r2,zero,800da0 <readKeypad+0x1b4>
		key = 9;
  800d94:	00800244 	movi	r2,9
  800d98:	e0bfff05 	stb	r2,-4(fp)
  800d9c:	00000706 	br	800dbc <readKeypad+0x1d0>
	else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
  800da0:	00800804 	movi	r2,32
  800da4:	10800037 	ldwio	r2,0(r2)
  800da8:	1080020c 	andi	r2,r2,8
  800dac:	1005003a 	cmpeq	r2,r2,zero
  800db0:	1000021e 	bne	r2,zero,800dbc <readKeypad+0x1d0>
		key = 11; //POUND
  800db4:	008002c4 	movi	r2,11
  800db8:	e0bfff05 	stb	r2,-4(fp)

	usleep(100000);
  800dbc:	010000b4 	movhi	r4,2
  800dc0:	2121a804 	addi	r4,r4,-31072
  800dc4:	080d2b00 	call	80d2b0 <usleep>

	return key;
  800dc8:	e0bfff07 	ldb	r2,-4(fp)
}
  800dcc:	e037883a 	mov	sp,fp
  800dd0:	dfc00117 	ldw	ra,4(sp)
  800dd4:	df000017 	ldw	fp,0(sp)
  800dd8:	dec00204 	addi	sp,sp,8
  800ddc:	f800283a 	ret

00800de0 <keyRelease>:

void keyRelease(void){
  800de0:	defffd04 	addi	sp,sp,-12
  800de4:	dfc00215 	stw	ra,8(sp)
  800de8:	df000115 	stw	fp,4(sp)
  800dec:	df000104 	addi	fp,sp,4
	int pressed = 1;
  800df0:	00800044 	movi	r2,1
  800df4:	e0bfff15 	stw	r2,-4(fp)

	while(pressed == 1){
  800df8:	00006a06 	br	800fa4 <keyRelease+0x1c4>
		pressed = 0;
  800dfc:	e03fff15 	stw	zero,-4(fp)

		//Left Column top to bottom
		IOWR_ALTERA_AVALON_PIO_DATA(KEYPAD_COLS_BASE, 1);
  800e00:	00c00404 	movi	r3,16
  800e04:	00800044 	movi	r2,1
  800e08:	18800035 	stwio	r2,0(r3)
		if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 1)
  800e0c:	00800804 	movi	r2,32
  800e10:	10800037 	ldwio	r2,0(r2)
  800e14:	1080004c 	andi	r2,r2,1
  800e18:	10803fcc 	andi	r2,r2,255
  800e1c:	1005003a 	cmpeq	r2,r2,zero
  800e20:	1000031e 	bne	r2,zero,800e30 <keyRelease+0x50>
			pressed = 1;
  800e24:	00800044 	movi	r2,1
  800e28:	e0bfff15 	stw	r2,-4(fp)
  800e2c:	00001706 	br	800e8c <keyRelease+0xac>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 2)
  800e30:	00800804 	movi	r2,32
  800e34:	10800037 	ldwio	r2,0(r2)
  800e38:	1080008c 	andi	r2,r2,2
  800e3c:	1005003a 	cmpeq	r2,r2,zero
  800e40:	1000031e 	bne	r2,zero,800e50 <keyRelease+0x70>
			pressed = 1;
  800e44:	00800044 	movi	r2,1
  800e48:	e0bfff15 	stw	r2,-4(fp)
  800e4c:	00000f06 	br	800e8c <keyRelease+0xac>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 4)
  800e50:	00800804 	movi	r2,32
  800e54:	10800037 	ldwio	r2,0(r2)
  800e58:	1080010c 	andi	r2,r2,4
  800e5c:	1005003a 	cmpeq	r2,r2,zero
  800e60:	1000031e 	bne	r2,zero,800e70 <keyRelease+0x90>
			pressed = 1;
  800e64:	00800044 	movi	r2,1
  800e68:	e0bfff15 	stw	r2,-4(fp)
  800e6c:	00000706 	br	800e8c <keyRelease+0xac>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
  800e70:	00800804 	movi	r2,32
  800e74:	10800037 	ldwio	r2,0(r2)
  800e78:	1080020c 	andi	r2,r2,8
  800e7c:	1005003a 	cmpeq	r2,r2,zero
  800e80:	1000021e 	bne	r2,zero,800e8c <keyRelease+0xac>
			pressed = 1; //STAR
  800e84:	00800044 	movi	r2,1
  800e88:	e0bfff15 	stw	r2,-4(fp)

		//Middle Column top to bottom
		IOWR_ALTERA_AVALON_PIO_DATA(KEYPAD_COLS_BASE, 2);
  800e8c:	00c00404 	movi	r3,16
  800e90:	00800084 	movi	r2,2
  800e94:	18800035 	stwio	r2,0(r3)
		if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 1)
  800e98:	00800804 	movi	r2,32
  800e9c:	10800037 	ldwio	r2,0(r2)
  800ea0:	1080004c 	andi	r2,r2,1
  800ea4:	10803fcc 	andi	r2,r2,255
  800ea8:	1005003a 	cmpeq	r2,r2,zero
  800eac:	1000031e 	bne	r2,zero,800ebc <keyRelease+0xdc>
			pressed = 1;
  800eb0:	00800044 	movi	r2,1
  800eb4:	e0bfff15 	stw	r2,-4(fp)
  800eb8:	00001706 	br	800f18 <keyRelease+0x138>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 2)
  800ebc:	00800804 	movi	r2,32
  800ec0:	10800037 	ldwio	r2,0(r2)
  800ec4:	1080008c 	andi	r2,r2,2
  800ec8:	1005003a 	cmpeq	r2,r2,zero
  800ecc:	1000031e 	bne	r2,zero,800edc <keyRelease+0xfc>
			pressed = 1;
  800ed0:	00800044 	movi	r2,1
  800ed4:	e0bfff15 	stw	r2,-4(fp)
  800ed8:	00000f06 	br	800f18 <keyRelease+0x138>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 4)
  800edc:	00800804 	movi	r2,32
  800ee0:	10800037 	ldwio	r2,0(r2)
  800ee4:	1080010c 	andi	r2,r2,4
  800ee8:	1005003a 	cmpeq	r2,r2,zero
  800eec:	1000031e 	bne	r2,zero,800efc <keyRelease+0x11c>
			pressed = 1;
  800ef0:	00800044 	movi	r2,1
  800ef4:	e0bfff15 	stw	r2,-4(fp)
  800ef8:	00000706 	br	800f18 <keyRelease+0x138>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
  800efc:	00800804 	movi	r2,32
  800f00:	10800037 	ldwio	r2,0(r2)
  800f04:	1080020c 	andi	r2,r2,8
  800f08:	1005003a 	cmpeq	r2,r2,zero
  800f0c:	1000021e 	bne	r2,zero,800f18 <keyRelease+0x138>
			pressed = 1;
  800f10:	00800044 	movi	r2,1
  800f14:	e0bfff15 	stw	r2,-4(fp)

		//Right Column top to bottom
		IOWR_ALTERA_AVALON_PIO_DATA(KEYPAD_COLS_BASE, 4);
  800f18:	00c00404 	movi	r3,16
  800f1c:	00800104 	movi	r2,4
  800f20:	18800035 	stwio	r2,0(r3)
		if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 1)
  800f24:	00800804 	movi	r2,32
  800f28:	10800037 	ldwio	r2,0(r2)
  800f2c:	1080004c 	andi	r2,r2,1
  800f30:	10803fcc 	andi	r2,r2,255
  800f34:	1005003a 	cmpeq	r2,r2,zero
  800f38:	1000031e 	bne	r2,zero,800f48 <keyRelease+0x168>
			pressed = 1;
  800f3c:	00800044 	movi	r2,1
  800f40:	e0bfff15 	stw	r2,-4(fp)
  800f44:	00001706 	br	800fa4 <keyRelease+0x1c4>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 2)
  800f48:	00800804 	movi	r2,32
  800f4c:	10800037 	ldwio	r2,0(r2)
  800f50:	1080008c 	andi	r2,r2,2
  800f54:	1005003a 	cmpeq	r2,r2,zero
  800f58:	1000031e 	bne	r2,zero,800f68 <keyRelease+0x188>
			pressed = 1;
  800f5c:	00800044 	movi	r2,1
  800f60:	e0bfff15 	stw	r2,-4(fp)
  800f64:	00000f06 	br	800fa4 <keyRelease+0x1c4>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 4)
  800f68:	00800804 	movi	r2,32
  800f6c:	10800037 	ldwio	r2,0(r2)
  800f70:	1080010c 	andi	r2,r2,4
  800f74:	1005003a 	cmpeq	r2,r2,zero
  800f78:	1000031e 	bne	r2,zero,800f88 <keyRelease+0x1a8>
			pressed = 1;
  800f7c:	00800044 	movi	r2,1
  800f80:	e0bfff15 	stw	r2,-4(fp)
  800f84:	00000706 	br	800fa4 <keyRelease+0x1c4>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
  800f88:	00800804 	movi	r2,32
  800f8c:	10800037 	ldwio	r2,0(r2)
  800f90:	1080020c 	andi	r2,r2,8
  800f94:	1005003a 	cmpeq	r2,r2,zero
  800f98:	1000021e 	bne	r2,zero,800fa4 <keyRelease+0x1c4>
			pressed = 1; //POUND
  800f9c:	00800044 	movi	r2,1
  800fa0:	e0bfff15 	stw	r2,-4(fp)
}

void keyRelease(void){
	int pressed = 1;

	while(pressed == 1){
  800fa4:	e0bfff17 	ldw	r2,-4(fp)
  800fa8:	10800060 	cmpeqi	r2,r2,1
  800fac:	103f931e 	bne	r2,zero,800dfc <keyRelease+0x1c>
		else if (IORD_ALTERA_AVALON_PIO_DATA(KEYPAD_ROWS_BASE) & 8)
			pressed = 1; //POUND

	}

	usleep(100000);
  800fb0:	010000b4 	movhi	r4,2
  800fb4:	2121a804 	addi	r4,r4,-31072
  800fb8:	080d2b00 	call	80d2b0 <usleep>

	return;

}
  800fbc:	e037883a 	mov	sp,fp
  800fc0:	dfc00117 	ldw	ra,4(sp)
  800fc4:	df000017 	ldw	fp,0(sp)
  800fc8:	dec00204 	addi	sp,sp,8
  800fcc:	f800283a 	ret

00800fd0 <readKeypadCode>:

char * readKeypadCode(void){
  800fd0:	defffb04 	addi	sp,sp,-20
  800fd4:	dfc00415 	stw	ra,16(sp)
  800fd8:	df000315 	stw	fp,12(sp)
  800fdc:	df000304 	addi	fp,sp,12
	char key;
	char  * combo = malloc(5*sizeof(char));
  800fe0:	01000144 	movi	r4,5
  800fe4:	08016a80 	call	8016a8 <malloc>
  800fe8:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for (i = 0; i < 4; i ++){
  800fec:	e03ffd15 	stw	zero,-12(fp)
  800ff0:	00001606 	br	80104c <readKeypadCode+0x7c>
		key = -1;
  800ff4:	00bfffc4 	movi	r2,-1
  800ff8:	e0bfff05 	stb	r2,-4(fp)
		while(key == -1)
  800ffc:	00000206 	br	801008 <readKeypadCode+0x38>
			key = readKeypad();
  801000:	0800bec0 	call	800bec <readKeypad>
  801004:	e0bfff05 	stb	r2,-4(fp)
	char  * combo = malloc(5*sizeof(char));
	int i;

	for (i = 0; i < 4; i ++){
		key = -1;
		while(key == -1)
  801008:	e0bfff07 	ldb	r2,-4(fp)
  80100c:	10bfffe0 	cmpeqi	r2,r2,-1
  801010:	103ffb1e 	bne	r2,zero,801000 <readKeypadCode+0x30>
			key = readKeypad();

		printf("%d\n", key);
  801014:	e17fff07 	ldb	r5,-4(fp)
  801018:	01002074 	movhi	r4,129
  80101c:	2101d804 	addi	r4,r4,1888
  801020:	0801dfc0 	call	801dfc <printf>
		combo[i] = key;
  801024:	e0bffd17 	ldw	r2,-12(fp)
  801028:	1007883a 	mov	r3,r2
  80102c:	e0bffe17 	ldw	r2,-8(fp)
  801030:	1887883a 	add	r3,r3,r2
  801034:	e0bfff03 	ldbu	r2,-4(fp)
  801038:	18800005 	stb	r2,0(r3)
		keyRelease();
  80103c:	0800de00 	call	800de0 <keyRelease>
char * readKeypadCode(void){
	char key;
	char  * combo = malloc(5*sizeof(char));
	int i;

	for (i = 0; i < 4; i ++){
  801040:	e0bffd17 	ldw	r2,-12(fp)
  801044:	10800044 	addi	r2,r2,1
  801048:	e0bffd15 	stw	r2,-12(fp)
  80104c:	e0bffd17 	ldw	r2,-12(fp)
  801050:	10800110 	cmplti	r2,r2,4
  801054:	103fe71e 	bne	r2,zero,800ff4 <readKeypadCode+0x24>
		printf("%d\n", key);
		combo[i] = key;
		keyRelease();
	}

	combo[4] = '\0';
  801058:	e0bffe17 	ldw	r2,-8(fp)
  80105c:	10800104 	addi	r2,r2,4
  801060:	10000005 	stb	zero,0(r2)

	return combo;
  801064:	e0bffe17 	ldw	r2,-8(fp)
}
  801068:	e037883a 	mov	sp,fp
  80106c:	dfc00117 	ldw	ra,4(sp)
  801070:	df000017 	ldw	fp,0(sp)
  801074:	dec00204 	addi	sp,sp,8
  801078:	f800283a 	ret

0080107c <servoLock>:

void servoLock(){
  80107c:	defffd04 	addi	sp,sp,-12
  801080:	dfc00215 	stw	ra,8(sp)
  801084:	df000115 	stw	fp,4(sp)
  801088:	df000104 	addi	fp,sp,4
	int i;
	for(i = 0; i < 20; i++){
  80108c:	e03fff15 	stw	zero,-4(fp)
  801090:	00000c06 	br	8010c4 <servoLock+0x48>
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_CONTROLLER_BASE, 1);
  801094:	0007883a 	mov	r3,zero
  801098:	00800044 	movi	r2,1
  80109c:	18800035 	stwio	r2,0(r3)
		usleep(490);
  8010a0:	01007a84 	movi	r4,490
  8010a4:	080d2b00 	call	80d2b0 <usleep>
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_CONTROLLER_BASE, 0);
  8010a8:	0005883a 	mov	r2,zero
  8010ac:	10000035 	stwio	zero,0(r2)
		usleep(19510);
  8010b0:	01130d84 	movi	r4,19510
  8010b4:	080d2b00 	call	80d2b0 <usleep>
	return combo;
}

void servoLock(){
	int i;
	for(i = 0; i < 20; i++){
  8010b8:	e0bfff17 	ldw	r2,-4(fp)
  8010bc:	10800044 	addi	r2,r2,1
  8010c0:	e0bfff15 	stw	r2,-4(fp)
  8010c4:	e0bfff17 	ldw	r2,-4(fp)
  8010c8:	10800510 	cmplti	r2,r2,20
  8010cc:	103ff11e 	bne	r2,zero,801094 <servoLock+0x18>
		usleep(490);
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_CONTROLLER_BASE, 0);
		usleep(19510);
	}
	return;
}
  8010d0:	e037883a 	mov	sp,fp
  8010d4:	dfc00117 	ldw	ra,4(sp)
  8010d8:	df000017 	ldw	fp,0(sp)
  8010dc:	dec00204 	addi	sp,sp,8
  8010e0:	f800283a 	ret

008010e4 <servoUnlock>:

void servoUnlock(){
  8010e4:	defffd04 	addi	sp,sp,-12
  8010e8:	dfc00215 	stw	ra,8(sp)
  8010ec:	df000115 	stw	fp,4(sp)
  8010f0:	df000104 	addi	fp,sp,4
	int i;
	for(i = 0; i < 20; i++){
  8010f4:	e03fff15 	stw	zero,-4(fp)
  8010f8:	00000c06 	br	80112c <servoUnlock+0x48>
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_CONTROLLER_BASE, 1);
  8010fc:	0007883a 	mov	r3,zero
  801100:	00800044 	movi	r2,1
  801104:	18800035 	stwio	r2,0(r3)
		usleep(2400);
  801108:	01025804 	movi	r4,2400
  80110c:	080d2b00 	call	80d2b0 <usleep>
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_CONTROLLER_BASE, 0);
  801110:	0005883a 	mov	r2,zero
  801114:	10000035 	stwio	zero,0(r2)
		usleep(18600);
  801118:	01122a04 	movi	r4,18600
  80111c:	080d2b00 	call	80d2b0 <usleep>
	return;
}

void servoUnlock(){
	int i;
	for(i = 0; i < 20; i++){
  801120:	e0bfff17 	ldw	r2,-4(fp)
  801124:	10800044 	addi	r2,r2,1
  801128:	e0bfff15 	stw	r2,-4(fp)
  80112c:	e0bfff17 	ldw	r2,-4(fp)
  801130:	10800510 	cmplti	r2,r2,20
  801134:	103ff11e 	bne	r2,zero,8010fc <servoUnlock+0x18>
		usleep(2400);
		IOWR_ALTERA_AVALON_PIO_DATA(SERVO_CONTROLLER_BASE, 0);
		usleep(18600);
	}
	return;
}
  801138:	e037883a 	mov	sp,fp
  80113c:	dfc00117 	ldw	ra,4(sp)
  801140:	df000017 	ldw	fp,0(sp)
  801144:	dec00204 	addi	sp,sp,8
  801148:	f800283a 	ret

0080114c <lcd_write>:

void lcd_write( char* string ){
  80114c:	defffd04 	addi	sp,sp,-12
  801150:	dfc00215 	stw	ra,8(sp)
  801154:	df000115 	stw	fp,4(sp)
  801158:	df000104 	addi	fp,sp,4
  80115c:	e13fff15 	stw	r4,-4(fp)

	//Clears the whole lcd screen
	alt_up_character_lcd_init (char_lcd_dev);
  801160:	d1271717 	ldw	r4,-25508(gp)
  801164:	080ef5c0 	call	80ef5c <alt_up_character_lcd_init>

	alt_up_character_lcd_string( char_lcd_dev, string );
  801168:	d1271717 	ldw	r4,-25508(gp)
  80116c:	e17fff17 	ldw	r5,-4(fp)
  801170:	080f0480 	call	80f048 <alt_up_character_lcd_string>

	return;
}
  801174:	e037883a 	mov	sp,fp
  801178:	dfc00117 	ldw	ra,4(sp)
  80117c:	df000017 	ldw	fp,0(sp)
  801180:	dec00204 	addi	sp,sp,8
  801184:	f800283a 	ret

00801188 <lcd_init>:

void lcd_init( void ){
  801188:	defffe04 	addi	sp,sp,-8
  80118c:	dfc00115 	stw	ra,4(sp)
  801190:	df000015 	stw	fp,0(sp)
  801194:	d839883a 	mov	fp,sp

	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
  801198:	01002074 	movhi	r4,129
  80119c:	2101d904 	addi	r4,r4,1892
  8011a0:	080ef900 	call	80ef90 <alt_up_character_lcd_open_dev>
  8011a4:	d0a71715 	stw	r2,-25508(gp)

	alt_up_character_lcd_cursor_off(char_lcd_dev);
  8011a8:	d1271717 	ldw	r4,-25508(gp)
  8011ac:	080f3740 	call	80f374 <alt_up_character_lcd_cursor_off>

	if ( char_lcd_dev == NULL){
  8011b0:	d0a71717 	ldw	r2,-25508(gp)
  8011b4:	1004c03a 	cmpne	r2,r2,zero
  8011b8:	1000031e 	bne	r2,zero,8011c8 <lcd_init+0x40>
		printf ("Error: could not open character LCD device\n");
  8011bc:	01002074 	movhi	r4,129
  8011c0:	2101df04 	addi	r4,r4,1916
  8011c4:	0801f140 	call	801f14 <puts>
		return;
	}

}
  8011c8:	e037883a 	mov	sp,fp
  8011cc:	dfc00117 	ldw	ra,4(sp)
  8011d0:	df000017 	ldw	fp,0(sp)
  8011d4:	dec00204 	addi	sp,sp,8
  8011d8:	f800283a 	ret

008011dc <send_code>:
#include "communication.h"

void send_code( char *code ){
  8011dc:	defffd04 	addi	sp,sp,-12
  8011e0:	dfc00215 	stw	ra,8(sp)
  8011e4:	df000115 	stw	fp,4(sp)
  8011e8:	df000104 	addi	fp,sp,4
  8011ec:	e13fff15 	stw	r4,-4(fp)

	send_type(CODE_TYPE);
  8011f0:	01000084 	movi	r4,2
  8011f4:	08012dc0 	call	8012dc <send_type>

	send_length(CODE_LENGTH);
  8011f8:	01000104 	movi	r4,4
  8011fc:	080130c0 	call	80130c <send_length>

	send_data( code , CODE_LENGTH );
  801200:	e13fff17 	ldw	r4,-4(fp)
  801204:	01400104 	movi	r5,4
  801208:	080126c0 	call	80126c <send_data>
}
  80120c:	e037883a 	mov	sp,fp
  801210:	dfc00117 	ldw	ra,4(sp)
  801214:	df000017 	ldw	fp,0(sp)
  801218:	dec00204 	addi	sp,sp,8
  80121c:	f800283a 	ret

00801220 <send_buffer>:


void send_buffer( char *buffer ){
  801220:	defffd04 	addi	sp,sp,-12
  801224:	dfc00215 	stw	ra,8(sp)
  801228:	df000115 	stw	fp,4(sp)
  80122c:	df000104 	addi	fp,sp,4
  801230:	e13fff15 	stw	r4,-4(fp)

	send_type(BUFFER_TYPE);
  801234:	01000044 	movi	r4,1
  801238:	08012dc0 	call	8012dc <send_type>

	send_length(BUFFER_LENGTH);
  80123c:	010000b4 	movhi	r4,2
  801240:	21160004 	addi	r4,r4,22528
  801244:	080130c0 	call	80130c <send_length>

	send_data( buffer , BUFFER_LENGTH );
  801248:	e13fff17 	ldw	r4,-4(fp)
  80124c:	014000b4 	movhi	r5,2
  801250:	29560004 	addi	r5,r5,22528
  801254:	080126c0 	call	80126c <send_data>
}
  801258:	e037883a 	mov	sp,fp
  80125c:	dfc00117 	ldw	ra,4(sp)
  801260:	df000017 	ldw	fp,0(sp)
  801264:	dec00204 	addi	sp,sp,8
  801268:	f800283a 	ret

0080126c <send_data>:


void send_data( char* data , unsigned long length ){
  80126c:	defffb04 	addi	sp,sp,-20
  801270:	dfc00415 	stw	ra,16(sp)
  801274:	df000315 	stw	fp,12(sp)
  801278:	df000304 	addi	fp,sp,12
  80127c:	e13ffe15 	stw	r4,-8(fp)
  801280:	e17fff15 	stw	r5,-4(fp)

	int i;

	for( i = 0 ; i < length ; i++ ){
  801284:	e03ffd15 	stw	zero,-12(fp)
  801288:	00000c06 	br	8012bc <send_data+0x50>
//		if( length % 10000 == 0 )
				//printf( "%i    " , i );
		send_byte(data[i]);
  80128c:	e0bffd17 	ldw	r2,-12(fp)
  801290:	1007883a 	mov	r3,r2
  801294:	e0bffe17 	ldw	r2,-8(fp)
  801298:	1885883a 	add	r2,r3,r2
  80129c:	10800003 	ldbu	r2,0(r2)
  8012a0:	11003fcc 	andi	r4,r2,255
  8012a4:	2100201c 	xori	r4,r4,128
  8012a8:	213fe004 	addi	r4,r4,-128
  8012ac:	08014480 	call	801448 <send_byte>

void send_data( char* data , unsigned long length ){

	int i;

	for( i = 0 ; i < length ; i++ ){
  8012b0:	e0bffd17 	ldw	r2,-12(fp)
  8012b4:	10800044 	addi	r2,r2,1
  8012b8:	e0bffd15 	stw	r2,-12(fp)
  8012bc:	e0fffd17 	ldw	r3,-12(fp)
  8012c0:	e0bfff17 	ldw	r2,-4(fp)
  8012c4:	18bff136 	bltu	r3,r2,80128c <send_data+0x20>
//		if( length % 10000 == 0 )
				//printf( "%i    " , i );
		send_byte(data[i]);
	}
}
  8012c8:	e037883a 	mov	sp,fp
  8012cc:	dfc00117 	ldw	ra,4(sp)
  8012d0:	df000017 	ldw	fp,0(sp)
  8012d4:	dec00204 	addi	sp,sp,8
  8012d8:	f800283a 	ret

008012dc <send_type>:

void send_type( char type ){
  8012dc:	defffd04 	addi	sp,sp,-12
  8012e0:	dfc00215 	stw	ra,8(sp)
  8012e4:	df000115 	stw	fp,4(sp)
  8012e8:	df000104 	addi	fp,sp,4
  8012ec:	e13fff05 	stb	r4,-4(fp)
	send_byte( type );
  8012f0:	e13fff07 	ldb	r4,-4(fp)
  8012f4:	08014480 	call	801448 <send_byte>
}
  8012f8:	e037883a 	mov	sp,fp
  8012fc:	dfc00117 	ldw	ra,4(sp)
  801300:	df000017 	ldw	fp,0(sp)
  801304:	dec00204 	addi	sp,sp,8
  801308:	f800283a 	ret

0080130c <send_length>:

void send_length( unsigned long length ){
  80130c:	defffb04 	addi	sp,sp,-20
  801310:	dfc00415 	stw	ra,16(sp)
  801314:	df000315 	stw	fp,12(sp)
  801318:	df000304 	addi	fp,sp,12
  80131c:	e13ffe15 	stw	r4,-8(fp)

	int i;

	for( i = 0 ; i < 4 ; i++ ){
  801320:	e03ffd15 	stw	zero,-12(fp)
  801324:	00003306 	br	8013f4 <send_length+0xe8>

		switch( i ){
  801328:	e0bffd17 	ldw	r2,-12(fp)
  80132c:	e0bfff15 	stw	r2,-4(fp)
  801330:	e0ffff17 	ldw	r3,-4(fp)
  801334:	18800060 	cmpeqi	r2,r3,1
  801338:	1000141e 	bne	r2,zero,80138c <send_length+0x80>
  80133c:	e0ffff17 	ldw	r3,-4(fp)
  801340:	18800088 	cmpgei	r2,r3,2
  801344:	1000041e 	bne	r2,zero,801358 <send_length+0x4c>
  801348:	e0ffff17 	ldw	r3,-4(fp)
  80134c:	1805003a 	cmpeq	r2,r3,zero
  801350:	1000081e 	bne	r2,zero,801374 <send_length+0x68>
  801354:	00002406 	br	8013e8 <send_length+0xdc>
  801358:	e0ffff17 	ldw	r3,-4(fp)
  80135c:	188000a0 	cmpeqi	r2,r3,2
  801360:	1000121e 	bne	r2,zero,8013ac <send_length+0xa0>
  801364:	e0ffff17 	ldw	r3,-4(fp)
  801368:	188000e0 	cmpeqi	r2,r3,3
  80136c:	1000171e 	bne	r2,zero,8013cc <send_length+0xc0>
  801370:	00001d06 	br	8013e8 <send_length+0xdc>
		case 0 :
			send_byte( (char)( length & 0x000000FF ) );
  801374:	e0bffe17 	ldw	r2,-8(fp)
  801378:	11003fcc 	andi	r4,r2,255
  80137c:	2100201c 	xori	r4,r4,128
  801380:	213fe004 	addi	r4,r4,-128
  801384:	08014480 	call	801448 <send_byte>
			break;
  801388:	00001706 	br	8013e8 <send_length+0xdc>
		case 1 :
			send_byte( (char)( ( length & 0x0000FF00 ) >> 8 ) );
  80138c:	e0bffe17 	ldw	r2,-8(fp)
  801390:	10bfc00c 	andi	r2,r2,65280
  801394:	1004d23a 	srli	r2,r2,8
  801398:	11003fcc 	andi	r4,r2,255
  80139c:	2100201c 	xori	r4,r4,128
  8013a0:	213fe004 	addi	r4,r4,-128
  8013a4:	08014480 	call	801448 <send_byte>
			break;
  8013a8:	00000f06 	br	8013e8 <send_length+0xdc>
		case 2 :
			send_byte( (char)( ( length & 0x00FF0000 ) >> 16 ) );
  8013ac:	e0bffe17 	ldw	r2,-8(fp)
  8013b0:	10803fec 	andhi	r2,r2,255
  8013b4:	1004d43a 	srli	r2,r2,16
  8013b8:	11003fcc 	andi	r4,r2,255
  8013bc:	2100201c 	xori	r4,r4,128
  8013c0:	213fe004 	addi	r4,r4,-128
  8013c4:	08014480 	call	801448 <send_byte>
			break;
  8013c8:	00000706 	br	8013e8 <send_length+0xdc>
		case 3 :
			send_byte( (char)( ( length & 0xFF000000 ) >> 24 ) );
  8013cc:	e0bffe17 	ldw	r2,-8(fp)
  8013d0:	10bfc02c 	andhi	r2,r2,65280
  8013d4:	1004d63a 	srli	r2,r2,24
  8013d8:	11003fcc 	andi	r4,r2,255
  8013dc:	2100201c 	xori	r4,r4,128
  8013e0:	213fe004 	addi	r4,r4,-128
  8013e4:	08014480 	call	801448 <send_byte>

void send_length( unsigned long length ){

	int i;

	for( i = 0 ; i < 4 ; i++ ){
  8013e8:	e0bffd17 	ldw	r2,-12(fp)
  8013ec:	10800044 	addi	r2,r2,1
  8013f0:	e0bffd15 	stw	r2,-12(fp)
  8013f4:	e0bffd17 	ldw	r2,-12(fp)
  8013f8:	10800110 	cmplti	r2,r2,4
  8013fc:	103fca1e 	bne	r2,zero,801328 <send_length+0x1c>
			send_byte( (char)( ( length & 0xFF000000 ) >> 24 ) );
			break;
		}

	}
}
  801400:	e037883a 	mov	sp,fp
  801404:	dfc00117 	ldw	ra,4(sp)
  801408:	df000017 	ldw	fp,0(sp)
  80140c:	dec00204 	addi	sp,sp,8
  801410:	f800283a 	ret

00801414 <init_comm>:

void init_comm(){
  801414:	deffff04 	addi	sp,sp,-4
  801418:	df000015 	stw	fp,0(sp)
  80141c:	d839883a 	mov	fp,sp

	IOWR_ALTERA_AVALON_PIO_DATA( P_DATA_BASE, ZERO );
  801420:	00804234 	movhi	r2,264
  801424:	10841004 	addi	r2,r2,4160
  801428:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA( P_SIGNAL_BASE, ZERO );
  80142c:	00804234 	movhi	r2,264
  801430:	10840804 	addi	r2,r2,4128
  801434:	10000035 	stwio	zero,0(r2)

}
  801438:	e037883a 	mov	sp,fp
  80143c:	df000017 	ldw	fp,0(sp)
  801440:	dec00104 	addi	sp,sp,4
  801444:	f800283a 	ret

00801448 <send_byte>:

void send_byte( char data ){
  801448:	defffe04 	addi	sp,sp,-8
  80144c:	df000115 	stw	fp,4(sp)
  801450:	df000104 	addi	fp,sp,4
  801454:	e13fff05 	stb	r4,-4(fp)

	//printf("send data\n");
	IOWR_ALTERA_AVALON_PIO_DATA( P_DATA_BASE, data );
  801458:	e0ffff07 	ldb	r3,-4(fp)
  80145c:	00804234 	movhi	r2,264
  801460:	10841004 	addi	r2,r2,4160
  801464:	10c00035 	stwio	r3,0(r2)

	//printf("valid HIGH\n");
	IOWR_ALTERA_AVALON_PIO_DATA( P_SIGNAL_BASE, VALID_HIGH );
  801468:	00c04234 	movhi	r3,264
  80146c:	18c40804 	addi	r3,r3,4128
  801470:	00800084 	movi	r2,2
  801474:	18800035 	stwio	r2,0(r3)

	//printf("wait for ack HIGH\n");
	while( !(IORD_ALTERA_AVALON_PIO_DATA(P_INPUT_BASE) & 0x01) );
  801478:	00804234 	movhi	r2,264
  80147c:	10840c04 	addi	r2,r2,4144
  801480:	10800037 	ldwio	r2,0(r2)
  801484:	1080004c 	andi	r2,r2,1
  801488:	1005003a 	cmpeq	r2,r2,zero
  80148c:	103ffa1e 	bne	r2,zero,801478 <send_byte+0x30>

	//printf("valid LOW");
	IOWR_ALTERA_AVALON_PIO_DATA( P_SIGNAL_BASE, VALID_LOW );
  801490:	00804234 	movhi	r2,264
  801494:	10840804 	addi	r2,r2,4128
  801498:	10000035 	stwio	zero,0(r2)

	//printf("wait for ack LOW\n");
	while( (IORD_ALTERA_AVALON_PIO_DATA(P_INPUT_BASE) & 0x01) );
  80149c:	00804234 	movhi	r2,264
  8014a0:	10840c04 	addi	r2,r2,4144
  8014a4:	10800037 	ldwio	r2,0(r2)
  8014a8:	1080004c 	andi	r2,r2,1
  8014ac:	10803fcc 	andi	r2,r2,255
  8014b0:	1004c03a 	cmpne	r2,r2,zero
  8014b4:	103ff91e 	bne	r2,zero,80149c <send_byte+0x54>

}
  8014b8:	e037883a 	mov	sp,fp
  8014bc:	df000017 	ldw	fp,0(sp)
  8014c0:	dec00104 	addi	sp,sp,4
  8014c4:	f800283a 	ret

008014c8 <receive_response>:

int receive_response (void){
  8014c8:	defffd04 	addi	sp,sp,-12
  8014cc:	dfc00215 	stw	ra,8(sp)
  8014d0:	df000115 	stw	fp,4(sp)
  8014d4:	df000104 	addi	fp,sp,4
	int response = -1;
  8014d8:	00bfffc4 	movi	r2,-1
  8014dc:	e0bfff15 	stw	r2,-4(fp)
	printf("    Setting Valid High\n");
  8014e0:	01002074 	movhi	r4,129
  8014e4:	2101ea04 	addi	r4,r4,1960
  8014e8:	0801f140 	call	801f14 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA( P_SIGNAL_BASE, VALID_HIGH);
  8014ec:	00c04234 	movhi	r3,264
  8014f0:	18c40804 	addi	r3,r3,4128
  8014f4:	00800084 	movi	r2,2
  8014f8:	18800035 	stwio	r2,0(r3)

	while (response == -1){
  8014fc:	00000b06 	br	80152c <receive_response+0x64>
		if (IORD_ALTERA_AVALON_PIO_DATA(P_ACCEPT_BASE))
  801500:	00801404 	movi	r2,80
  801504:	10800037 	ldwio	r2,0(r2)
  801508:	1005003a 	cmpeq	r2,r2,zero
  80150c:	1000021e 	bne	r2,zero,801518 <receive_response+0x50>
			response = 1;
  801510:	00800044 	movi	r2,1
  801514:	e0bfff15 	stw	r2,-4(fp)
		if (IORD_ALTERA_AVALON_PIO_DATA(P_REJECT_BASE))
  801518:	00801804 	movi	r2,96
  80151c:	10800037 	ldwio	r2,0(r2)
  801520:	1005003a 	cmpeq	r2,r2,zero
  801524:	1000011e 	bne	r2,zero,80152c <receive_response+0x64>
			response = 0;
  801528:	e03fff15 	stw	zero,-4(fp)
int receive_response (void){
	int response = -1;
	printf("    Setting Valid High\n");
	IOWR_ALTERA_AVALON_PIO_DATA( P_SIGNAL_BASE, VALID_HIGH);

	while (response == -1){
  80152c:	e0bfff17 	ldw	r2,-4(fp)
  801530:	10bfffe0 	cmpeqi	r2,r2,-1
  801534:	103ff21e 	bne	r2,zero,801500 <receive_response+0x38>
		if (IORD_ALTERA_AVALON_PIO_DATA(P_ACCEPT_BASE))
			response = 1;
		if (IORD_ALTERA_AVALON_PIO_DATA(P_REJECT_BASE))
			response = 0;
	}
	printf("    Received %d\n", response);
  801538:	01002074 	movhi	r4,129
  80153c:	2101f004 	addi	r4,r4,1984
  801540:	e17fff17 	ldw	r5,-4(fp)
  801544:	0801dfc0 	call	801dfc <printf>
	printf("    Setting Valid Low\n");
  801548:	01002074 	movhi	r4,129
  80154c:	2101f504 	addi	r4,r4,2004
  801550:	0801f140 	call	801f14 <puts>
	IOWR_ALTERA_AVALON_PIO_DATA( P_SIGNAL_BASE, VALID_LOW);
  801554:	00804234 	movhi	r2,264
  801558:	10840804 	addi	r2,r2,4128
  80155c:	10000035 	stwio	zero,0(r2)

	return response;
  801560:	e0bfff17 	ldw	r2,-4(fp)
}
  801564:	e037883a 	mov	sp,fp
  801568:	dfc00117 	ldw	ra,4(sp)
  80156c:	df000017 	ldw	fp,0(sp)
  801570:	dec00204 	addi	sp,sp,8
  801574:	f800283a 	ret

00801578 <__assert_func>:
  801578:	00802074 	movhi	r2,129
  80157c:	1089eb04 	addi	r2,r2,10156
  801580:	10c00017 	ldw	r3,0(r2)
  801584:	defffc04 	addi	sp,sp,-16
  801588:	2011883a 	mov	r8,r4
  80158c:	dfc00315 	stw	ra,12(sp)
  801590:	3005883a 	mov	r2,r6
  801594:	2813883a 	mov	r9,r5
  801598:	19000317 	ldw	r4,12(r3)
  80159c:	30000b26 	beq	r6,zero,8015cc <__assert_func+0x54>
  8015a0:	00c02074 	movhi	r3,129
  8015a4:	18c20704 	addi	r3,r3,2076
  8015a8:	380d883a 	mov	r6,r7
  8015ac:	01402074 	movhi	r5,129
  8015b0:	2941fb04 	addi	r5,r5,2028
  8015b4:	400f883a 	mov	r7,r8
  8015b8:	da400015 	stw	r9,0(sp)
  8015bc:	d8c00115 	stw	r3,4(sp)
  8015c0:	d8800215 	stw	r2,8(sp)
  8015c4:	08016280 	call	801628 <fiprintf>
  8015c8:	08043140 	call	804314 <abort>
  8015cc:	00802074 	movhi	r2,129
  8015d0:	10820a04 	addi	r2,r2,2088
  8015d4:	1007883a 	mov	r3,r2
  8015d8:	003ff306 	br	8015a8 <__assert_func+0x30>

008015dc <__assert>:
  8015dc:	deffff04 	addi	sp,sp,-4
  8015e0:	300f883a 	mov	r7,r6
  8015e4:	000d883a 	mov	r6,zero
  8015e8:	dfc00015 	stw	ra,0(sp)
  8015ec:	08015780 	call	801578 <__assert_func>

008015f0 <exit>:
  8015f0:	defffe04 	addi	sp,sp,-8
  8015f4:	000b883a 	mov	r5,zero
  8015f8:	dc000015 	stw	r16,0(sp)
  8015fc:	dfc00115 	stw	ra,4(sp)
  801600:	2021883a 	mov	r16,r4
  801604:	08041640 	call	804164 <__call_exitprocs>
  801608:	00802074 	movhi	r2,129
  80160c:	1089ec04 	addi	r2,r2,10160
  801610:	11000017 	ldw	r4,0(r2)
  801614:	20800f17 	ldw	r2,60(r4)
  801618:	10000126 	beq	r2,zero,801620 <exit+0x30>
  80161c:	103ee83a 	callr	r2
  801620:	8009883a 	mov	r4,r16
  801624:	080c8640 	call	80c864 <_exit>

00801628 <fiprintf>:
  801628:	defffc04 	addi	sp,sp,-16
  80162c:	2007883a 	mov	r3,r4
  801630:	dfc00115 	stw	ra,4(sp)
  801634:	d9800215 	stw	r6,8(sp)
  801638:	d9c00315 	stw	r7,12(sp)
  80163c:	01802074 	movhi	r6,129
  801640:	3189eb04 	addi	r6,r6,10156
  801644:	31000017 	ldw	r4,0(r6)
  801648:	d8800204 	addi	r2,sp,8
  80164c:	280d883a 	mov	r6,r5
  801650:	100f883a 	mov	r7,r2
  801654:	180b883a 	mov	r5,r3
  801658:	d8800015 	stw	r2,0(sp)
  80165c:	08020e00 	call	8020e0 <_vfiprintf_r>
  801660:	dfc00117 	ldw	ra,4(sp)
  801664:	dec00404 	addi	sp,sp,16
  801668:	f800283a 	ret

0080166c <_fiprintf_r>:
  80166c:	defffd04 	addi	sp,sp,-12
  801670:	dfc00115 	stw	ra,4(sp)
  801674:	d9c00215 	stw	r7,8(sp)
  801678:	d8800204 	addi	r2,sp,8
  80167c:	100f883a 	mov	r7,r2
  801680:	d8800015 	stw	r2,0(sp)
  801684:	08020e00 	call	8020e0 <_vfiprintf_r>
  801688:	dfc00117 	ldw	ra,4(sp)
  80168c:	dec00304 	addi	sp,sp,12
  801690:	f800283a 	ret

00801694 <free>:
  801694:	00802074 	movhi	r2,129
  801698:	1089eb04 	addi	r2,r2,10156
  80169c:	200b883a 	mov	r5,r4
  8016a0:	11000017 	ldw	r4,0(r2)
  8016a4:	08061141 	jmpi	806114 <_free_r>

008016a8 <malloc>:
  8016a8:	00802074 	movhi	r2,129
  8016ac:	1089eb04 	addi	r2,r2,10156
  8016b0:	200b883a 	mov	r5,r4
  8016b4:	11000017 	ldw	r4,0(r2)
  8016b8:	08016bc1 	jmpi	8016bc <_malloc_r>

008016bc <_malloc_r>:
  8016bc:	defff604 	addi	sp,sp,-40
  8016c0:	28c002c4 	addi	r3,r5,11
  8016c4:	00800584 	movi	r2,22
  8016c8:	dc800215 	stw	r18,8(sp)
  8016cc:	dfc00915 	stw	ra,36(sp)
  8016d0:	df000815 	stw	fp,32(sp)
  8016d4:	ddc00715 	stw	r23,28(sp)
  8016d8:	dd800615 	stw	r22,24(sp)
  8016dc:	dd400515 	stw	r21,20(sp)
  8016e0:	dd000415 	stw	r20,16(sp)
  8016e4:	dcc00315 	stw	r19,12(sp)
  8016e8:	dc400115 	stw	r17,4(sp)
  8016ec:	dc000015 	stw	r16,0(sp)
  8016f0:	2025883a 	mov	r18,r4
  8016f4:	10c01236 	bltu	r2,r3,801740 <_malloc_r+0x84>
  8016f8:	04400404 	movi	r17,16
  8016fc:	8940142e 	bgeu	r17,r5,801750 <_malloc_r+0x94>
  801700:	00800304 	movi	r2,12
  801704:	0007883a 	mov	r3,zero
  801708:	90800015 	stw	r2,0(r18)
  80170c:	1805883a 	mov	r2,r3
  801710:	dfc00917 	ldw	ra,36(sp)
  801714:	df000817 	ldw	fp,32(sp)
  801718:	ddc00717 	ldw	r23,28(sp)
  80171c:	dd800617 	ldw	r22,24(sp)
  801720:	dd400517 	ldw	r21,20(sp)
  801724:	dd000417 	ldw	r20,16(sp)
  801728:	dcc00317 	ldw	r19,12(sp)
  80172c:	dc800217 	ldw	r18,8(sp)
  801730:	dc400117 	ldw	r17,4(sp)
  801734:	dc000017 	ldw	r16,0(sp)
  801738:	dec00a04 	addi	sp,sp,40
  80173c:	f800283a 	ret
  801740:	00bffe04 	movi	r2,-8
  801744:	18a2703a 	and	r17,r3,r2
  801748:	883fed16 	blt	r17,zero,801700 <_malloc_r+0x44>
  80174c:	897fec36 	bltu	r17,r5,801700 <_malloc_r+0x44>
  801750:	9009883a 	mov	r4,r18
  801754:	080cfd40 	call	80cfd4 <__malloc_lock>
  801758:	00807dc4 	movi	r2,503
  80175c:	14402b2e 	bgeu	r2,r17,80180c <_malloc_r+0x150>
  801760:	8806d27a 	srli	r3,r17,9
  801764:	18003f1e 	bne	r3,zero,801864 <_malloc_r+0x1a8>
  801768:	880cd0fa 	srli	r6,r17,3
  80176c:	300490fa 	slli	r2,r6,3
  801770:	02c02074 	movhi	r11,129
  801774:	5ac3ff04 	addi	r11,r11,4092
  801778:	12cb883a 	add	r5,r2,r11
  80177c:	2c000317 	ldw	r16,12(r5)
  801780:	580f883a 	mov	r7,r11
  801784:	2c00041e 	bne	r5,r16,801798 <_malloc_r+0xdc>
  801788:	00000a06 	br	8017b4 <_malloc_r+0xf8>
  80178c:	1800860e 	bge	r3,zero,8019a8 <_malloc_r+0x2ec>
  801790:	84000317 	ldw	r16,12(r16)
  801794:	2c000726 	beq	r5,r16,8017b4 <_malloc_r+0xf8>
  801798:	80800117 	ldw	r2,4(r16)
  80179c:	00ffff04 	movi	r3,-4
  8017a0:	10c8703a 	and	r4,r2,r3
  8017a4:	2447c83a 	sub	r3,r4,r17
  8017a8:	008003c4 	movi	r2,15
  8017ac:	10fff70e 	bge	r2,r3,80178c <_malloc_r+0xd0>
  8017b0:	31bfffc4 	addi	r6,r6,-1
  8017b4:	32400044 	addi	r9,r6,1
  8017b8:	02802074 	movhi	r10,129
  8017bc:	52840104 	addi	r10,r10,4100
  8017c0:	54000217 	ldw	r16,8(r10)
  8017c4:	8280a026 	beq	r16,r10,801a48 <_malloc_r+0x38c>
  8017c8:	80800117 	ldw	r2,4(r16)
  8017cc:	00ffff04 	movi	r3,-4
  8017d0:	10ca703a 	and	r5,r2,r3
  8017d4:	2c4dc83a 	sub	r6,r5,r17
  8017d8:	008003c4 	movi	r2,15
  8017dc:	11808316 	blt	r2,r6,8019ec <_malloc_r+0x330>
  8017e0:	52800315 	stw	r10,12(r10)
  8017e4:	52800215 	stw	r10,8(r10)
  8017e8:	30002916 	blt	r6,zero,801890 <_malloc_r+0x1d4>
  8017ec:	8147883a 	add	r3,r16,r5
  8017f0:	18800117 	ldw	r2,4(r3)
  8017f4:	9009883a 	mov	r4,r18
  8017f8:	10800054 	ori	r2,r2,1
  8017fc:	18800115 	stw	r2,4(r3)
  801800:	080cff40 	call	80cff4 <__malloc_unlock>
  801804:	80c00204 	addi	r3,r16,8
  801808:	003fc006 	br	80170c <_malloc_r+0x50>
  80180c:	02c02074 	movhi	r11,129
  801810:	5ac3ff04 	addi	r11,r11,4092
  801814:	8ac5883a 	add	r2,r17,r11
  801818:	14000317 	ldw	r16,12(r2)
  80181c:	580f883a 	mov	r7,r11
  801820:	8806d0fa 	srli	r3,r17,3
  801824:	14006c26 	beq	r2,r16,8019d8 <_malloc_r+0x31c>
  801828:	80c00117 	ldw	r3,4(r16)
  80182c:	00bfff04 	movi	r2,-4
  801830:	81800317 	ldw	r6,12(r16)
  801834:	1886703a 	and	r3,r3,r2
  801838:	80c7883a 	add	r3,r16,r3
  80183c:	18800117 	ldw	r2,4(r3)
  801840:	81400217 	ldw	r5,8(r16)
  801844:	9009883a 	mov	r4,r18
  801848:	10800054 	ori	r2,r2,1
  80184c:	18800115 	stw	r2,4(r3)
  801850:	31400215 	stw	r5,8(r6)
  801854:	29800315 	stw	r6,12(r5)
  801858:	080cff40 	call	80cff4 <__malloc_unlock>
  80185c:	80c00204 	addi	r3,r16,8
  801860:	003faa06 	br	80170c <_malloc_r+0x50>
  801864:	00800104 	movi	r2,4
  801868:	10c0052e 	bgeu	r2,r3,801880 <_malloc_r+0x1c4>
  80186c:	00800504 	movi	r2,20
  801870:	10c07836 	bltu	r2,r3,801a54 <_malloc_r+0x398>
  801874:	198016c4 	addi	r6,r3,91
  801878:	300490fa 	slli	r2,r6,3
  80187c:	003fbc06 	br	801770 <_malloc_r+0xb4>
  801880:	8804d1ba 	srli	r2,r17,6
  801884:	11800e04 	addi	r6,r2,56
  801888:	300490fa 	slli	r2,r6,3
  80188c:	003fb806 	br	801770 <_malloc_r+0xb4>
  801890:	00807fc4 	movi	r2,511
  801894:	1140bb36 	bltu	r2,r5,801b84 <_malloc_r+0x4c8>
  801898:	2806d0fa 	srli	r3,r5,3
  80189c:	573ffe04 	addi	fp,r10,-8
  8018a0:	00800044 	movi	r2,1
  8018a4:	180890fa 	slli	r4,r3,3
  8018a8:	1807d0ba 	srai	r3,r3,2
  8018ac:	e1c00117 	ldw	r7,4(fp)
  8018b0:	5909883a 	add	r4,r11,r4
  8018b4:	21400217 	ldw	r5,8(r4)
  8018b8:	10c4983a 	sll	r2,r2,r3
  8018bc:	81000315 	stw	r4,12(r16)
  8018c0:	81400215 	stw	r5,8(r16)
  8018c4:	388eb03a 	or	r7,r7,r2
  8018c8:	2c000315 	stw	r16,12(r5)
  8018cc:	24000215 	stw	r16,8(r4)
  8018d0:	e1c00115 	stw	r7,4(fp)
  8018d4:	4807883a 	mov	r3,r9
  8018d8:	4800cd16 	blt	r9,zero,801c10 <_malloc_r+0x554>
  8018dc:	1807d0ba 	srai	r3,r3,2
  8018e0:	00800044 	movi	r2,1
  8018e4:	10c8983a 	sll	r4,r2,r3
  8018e8:	39004436 	bltu	r7,r4,8019fc <_malloc_r+0x340>
  8018ec:	21c4703a 	and	r2,r4,r7
  8018f0:	10000a1e 	bne	r2,zero,80191c <_malloc_r+0x260>
  8018f4:	2109883a 	add	r4,r4,r4
  8018f8:	00bfff04 	movi	r2,-4
  8018fc:	4884703a 	and	r2,r9,r2
  801900:	3906703a 	and	r3,r7,r4
  801904:	12400104 	addi	r9,r2,4
  801908:	1800041e 	bne	r3,zero,80191c <_malloc_r+0x260>
  80190c:	2109883a 	add	r4,r4,r4
  801910:	3904703a 	and	r2,r7,r4
  801914:	4a400104 	addi	r9,r9,4
  801918:	103ffc26 	beq	r2,zero,80190c <_malloc_r+0x250>
  80191c:	480490fa 	slli	r2,r9,3
  801920:	4819883a 	mov	r12,r9
  801924:	023fff04 	movi	r8,-4
  801928:	589b883a 	add	r13,r11,r2
  80192c:	6807883a 	mov	r3,r13
  801930:	014003c4 	movi	r5,15
  801934:	1c000317 	ldw	r16,12(r3)
  801938:	1c00041e 	bne	r3,r16,80194c <_malloc_r+0x290>
  80193c:	0000a706 	br	801bdc <_malloc_r+0x520>
  801940:	3000ab0e 	bge	r6,zero,801bf0 <_malloc_r+0x534>
  801944:	84000317 	ldw	r16,12(r16)
  801948:	1c00a426 	beq	r3,r16,801bdc <_malloc_r+0x520>
  80194c:	80800117 	ldw	r2,4(r16)
  801950:	1204703a 	and	r2,r2,r8
  801954:	144dc83a 	sub	r6,r2,r17
  801958:	29bff90e 	bge	r5,r6,801940 <_malloc_r+0x284>
  80195c:	81000317 	ldw	r4,12(r16)
  801960:	80c00217 	ldw	r3,8(r16)
  801964:	89400054 	ori	r5,r17,1
  801968:	8445883a 	add	r2,r16,r17
  80196c:	20c00215 	stw	r3,8(r4)
  801970:	19000315 	stw	r4,12(r3)
  801974:	81400115 	stw	r5,4(r16)
  801978:	1187883a 	add	r3,r2,r6
  80197c:	31000054 	ori	r4,r6,1
  801980:	50800315 	stw	r2,12(r10)
  801984:	50800215 	stw	r2,8(r10)
  801988:	19800015 	stw	r6,0(r3)
  80198c:	11000115 	stw	r4,4(r2)
  801990:	12800215 	stw	r10,8(r2)
  801994:	12800315 	stw	r10,12(r2)
  801998:	9009883a 	mov	r4,r18
  80199c:	080cff40 	call	80cff4 <__malloc_unlock>
  8019a0:	80c00204 	addi	r3,r16,8
  8019a4:	003f5906 	br	80170c <_malloc_r+0x50>
  8019a8:	8109883a 	add	r4,r16,r4
  8019ac:	20800117 	ldw	r2,4(r4)
  8019b0:	80c00217 	ldw	r3,8(r16)
  8019b4:	81400317 	ldw	r5,12(r16)
  8019b8:	10800054 	ori	r2,r2,1
  8019bc:	20800115 	stw	r2,4(r4)
  8019c0:	28c00215 	stw	r3,8(r5)
  8019c4:	19400315 	stw	r5,12(r3)
  8019c8:	9009883a 	mov	r4,r18
  8019cc:	080cff40 	call	80cff4 <__malloc_unlock>
  8019d0:	80c00204 	addi	r3,r16,8
  8019d4:	003f4d06 	br	80170c <_malloc_r+0x50>
  8019d8:	80800204 	addi	r2,r16,8
  8019dc:	14000317 	ldw	r16,12(r2)
  8019e0:	143f911e 	bne	r2,r16,801828 <_malloc_r+0x16c>
  8019e4:	1a400084 	addi	r9,r3,2
  8019e8:	003f7306 	br	8017b8 <_malloc_r+0xfc>
  8019ec:	88c00054 	ori	r3,r17,1
  8019f0:	8445883a 	add	r2,r16,r17
  8019f4:	80c00115 	stw	r3,4(r16)
  8019f8:	003fdf06 	br	801978 <_malloc_r+0x2bc>
  8019fc:	e4000217 	ldw	r16,8(fp)
  801a00:	00bfff04 	movi	r2,-4
  801a04:	80c00117 	ldw	r3,4(r16)
  801a08:	802d883a 	mov	r22,r16
  801a0c:	18aa703a 	and	r21,r3,r2
  801a10:	ac401636 	bltu	r21,r17,801a6c <_malloc_r+0x3b0>
  801a14:	ac49c83a 	sub	r4,r21,r17
  801a18:	008003c4 	movi	r2,15
  801a1c:	1100130e 	bge	r2,r4,801a6c <_malloc_r+0x3b0>
  801a20:	88800054 	ori	r2,r17,1
  801a24:	8447883a 	add	r3,r16,r17
  801a28:	80800115 	stw	r2,4(r16)
  801a2c:	20800054 	ori	r2,r4,1
  801a30:	18800115 	stw	r2,4(r3)
  801a34:	e0c00215 	stw	r3,8(fp)
  801a38:	9009883a 	mov	r4,r18
  801a3c:	080cff40 	call	80cff4 <__malloc_unlock>
  801a40:	80c00204 	addi	r3,r16,8
  801a44:	003f3106 	br	80170c <_malloc_r+0x50>
  801a48:	39c00117 	ldw	r7,4(r7)
  801a4c:	573ffe04 	addi	fp,r10,-8
  801a50:	003fa006 	br	8018d4 <_malloc_r+0x218>
  801a54:	00801504 	movi	r2,84
  801a58:	10c06736 	bltu	r2,r3,801bf8 <_malloc_r+0x53c>
  801a5c:	8804d33a 	srli	r2,r17,12
  801a60:	11801b84 	addi	r6,r2,110
  801a64:	300490fa 	slli	r2,r6,3
  801a68:	003f4106 	br	801770 <_malloc_r+0xb4>
  801a6c:	d0a71817 	ldw	r2,-25504(gp)
  801a70:	d0e00517 	ldw	r3,-32748(gp)
  801a74:	053fffc4 	movi	r20,-1
  801a78:	10800404 	addi	r2,r2,16
  801a7c:	88a7883a 	add	r19,r17,r2
  801a80:	1d000326 	beq	r3,r20,801a90 <_malloc_r+0x3d4>
  801a84:	98c3ffc4 	addi	r3,r19,4095
  801a88:	00bc0004 	movi	r2,-4096
  801a8c:	18a6703a 	and	r19,r3,r2
  801a90:	9009883a 	mov	r4,r18
  801a94:	980b883a 	mov	r5,r19
  801a98:	0801f280 	call	801f28 <_sbrk_r>
  801a9c:	1009883a 	mov	r4,r2
  801aa0:	15000426 	beq	r2,r20,801ab4 <_malloc_r+0x3f8>
  801aa4:	854b883a 	add	r5,r16,r21
  801aa8:	1029883a 	mov	r20,r2
  801aac:	11405a2e 	bgeu	r2,r5,801c18 <_malloc_r+0x55c>
  801ab0:	87000c26 	beq	r16,fp,801ae4 <_malloc_r+0x428>
  801ab4:	e4000217 	ldw	r16,8(fp)
  801ab8:	80c00117 	ldw	r3,4(r16)
  801abc:	00bfff04 	movi	r2,-4
  801ac0:	1884703a 	and	r2,r3,r2
  801ac4:	14400336 	bltu	r2,r17,801ad4 <_malloc_r+0x418>
  801ac8:	1449c83a 	sub	r4,r2,r17
  801acc:	008003c4 	movi	r2,15
  801ad0:	113fd316 	blt	r2,r4,801a20 <_malloc_r+0x364>
  801ad4:	9009883a 	mov	r4,r18
  801ad8:	080cff40 	call	80cff4 <__malloc_unlock>
  801adc:	0007883a 	mov	r3,zero
  801ae0:	003f0a06 	br	80170c <_malloc_r+0x50>
  801ae4:	05c02074 	movhi	r23,129
  801ae8:	bdd10e04 	addi	r23,r23,17464
  801aec:	b8800017 	ldw	r2,0(r23)
  801af0:	988d883a 	add	r6,r19,r2
  801af4:	b9800015 	stw	r6,0(r23)
  801af8:	d0e00517 	ldw	r3,-32748(gp)
  801afc:	00bfffc4 	movi	r2,-1
  801b00:	18808e26 	beq	r3,r2,801d3c <_malloc_r+0x680>
  801b04:	2145c83a 	sub	r2,r4,r5
  801b08:	3085883a 	add	r2,r6,r2
  801b0c:	b8800015 	stw	r2,0(r23)
  801b10:	20c001cc 	andi	r3,r4,7
  801b14:	18005f1e 	bne	r3,zero,801c94 <_malloc_r+0x5d8>
  801b18:	000b883a 	mov	r5,zero
  801b1c:	a4c5883a 	add	r2,r20,r19
  801b20:	1083ffcc 	andi	r2,r2,4095
  801b24:	00c40004 	movi	r3,4096
  801b28:	1887c83a 	sub	r3,r3,r2
  801b2c:	28e7883a 	add	r19,r5,r3
  801b30:	9009883a 	mov	r4,r18
  801b34:	980b883a 	mov	r5,r19
  801b38:	0801f280 	call	801f28 <_sbrk_r>
  801b3c:	1007883a 	mov	r3,r2
  801b40:	00bfffc4 	movi	r2,-1
  801b44:	18807a26 	beq	r3,r2,801d30 <_malloc_r+0x674>
  801b48:	1d05c83a 	sub	r2,r3,r20
  801b4c:	9885883a 	add	r2,r19,r2
  801b50:	10c00054 	ori	r3,r2,1
  801b54:	b8800017 	ldw	r2,0(r23)
  801b58:	a021883a 	mov	r16,r20
  801b5c:	a0c00115 	stw	r3,4(r20)
  801b60:	9885883a 	add	r2,r19,r2
  801b64:	b8800015 	stw	r2,0(r23)
  801b68:	e5000215 	stw	r20,8(fp)
  801b6c:	b7003626 	beq	r22,fp,801c48 <_malloc_r+0x58c>
  801b70:	018003c4 	movi	r6,15
  801b74:	35404b36 	bltu	r6,r21,801ca4 <_malloc_r+0x5e8>
  801b78:	00800044 	movi	r2,1
  801b7c:	a0800115 	stw	r2,4(r20)
  801b80:	003fcd06 	br	801ab8 <_malloc_r+0x3fc>
  801b84:	2808d27a 	srli	r4,r5,9
  801b88:	2000371e 	bne	r4,zero,801c68 <_malloc_r+0x5ac>
  801b8c:	2808d0fa 	srli	r4,r5,3
  801b90:	200690fa 	slli	r3,r4,3
  801b94:	1ad1883a 	add	r8,r3,r11
  801b98:	41800217 	ldw	r6,8(r8)
  801b9c:	41805b26 	beq	r8,r6,801d0c <_malloc_r+0x650>
  801ba0:	30800117 	ldw	r2,4(r6)
  801ba4:	00ffff04 	movi	r3,-4
  801ba8:	10c4703a 	and	r2,r2,r3
  801bac:	2880022e 	bgeu	r5,r2,801bb8 <_malloc_r+0x4fc>
  801bb0:	31800217 	ldw	r6,8(r6)
  801bb4:	41bffa1e 	bne	r8,r6,801ba0 <_malloc_r+0x4e4>
  801bb8:	32000317 	ldw	r8,12(r6)
  801bbc:	39c00117 	ldw	r7,4(r7)
  801bc0:	82000315 	stw	r8,12(r16)
  801bc4:	81800215 	stw	r6,8(r16)
  801bc8:	07002074 	movhi	fp,129
  801bcc:	e703ff04 	addi	fp,fp,4092
  801bd0:	34000315 	stw	r16,12(r6)
  801bd4:	44000215 	stw	r16,8(r8)
  801bd8:	003f3e06 	br	8018d4 <_malloc_r+0x218>
  801bdc:	63000044 	addi	r12,r12,1
  801be0:	608000cc 	andi	r2,r12,3
  801be4:	10005d26 	beq	r2,zero,801d5c <_malloc_r+0x6a0>
  801be8:	18c00204 	addi	r3,r3,8
  801bec:	003f5106 	br	801934 <_malloc_r+0x278>
  801bf0:	8089883a 	add	r4,r16,r2
  801bf4:	003f6d06 	br	8019ac <_malloc_r+0x2f0>
  801bf8:	00805504 	movi	r2,340
  801bfc:	10c02036 	bltu	r2,r3,801c80 <_malloc_r+0x5c4>
  801c00:	8804d3fa 	srli	r2,r17,15
  801c04:	11801dc4 	addi	r6,r2,119
  801c08:	300490fa 	slli	r2,r6,3
  801c0c:	003ed806 	br	801770 <_malloc_r+0xb4>
  801c10:	48c000c4 	addi	r3,r9,3
  801c14:	003f3106 	br	8018dc <_malloc_r+0x220>
  801c18:	05c02074 	movhi	r23,129
  801c1c:	bdd10e04 	addi	r23,r23,17464
  801c20:	b8800017 	ldw	r2,0(r23)
  801c24:	988d883a 	add	r6,r19,r2
  801c28:	b9800015 	stw	r6,0(r23)
  801c2c:	293fb21e 	bne	r5,r4,801af8 <_malloc_r+0x43c>
  801c30:	2083ffcc 	andi	r2,r4,4095
  801c34:	103fb01e 	bne	r2,zero,801af8 <_malloc_r+0x43c>
  801c38:	e4000217 	ldw	r16,8(fp)
  801c3c:	9d45883a 	add	r2,r19,r21
  801c40:	10800054 	ori	r2,r2,1
  801c44:	80800115 	stw	r2,4(r16)
  801c48:	b8c00017 	ldw	r3,0(r23)
  801c4c:	d0a71917 	ldw	r2,-25500(gp)
  801c50:	10c0012e 	bgeu	r2,r3,801c58 <_malloc_r+0x59c>
  801c54:	d0e71915 	stw	r3,-25500(gp)
  801c58:	d0a71a17 	ldw	r2,-25496(gp)
  801c5c:	10ff962e 	bgeu	r2,r3,801ab8 <_malloc_r+0x3fc>
  801c60:	d0e71a15 	stw	r3,-25496(gp)
  801c64:	003f9406 	br	801ab8 <_malloc_r+0x3fc>
  801c68:	00800104 	movi	r2,4
  801c6c:	11001e36 	bltu	r2,r4,801ce8 <_malloc_r+0x62c>
  801c70:	2804d1ba 	srli	r2,r5,6
  801c74:	11000e04 	addi	r4,r2,56
  801c78:	200690fa 	slli	r3,r4,3
  801c7c:	003fc506 	br	801b94 <_malloc_r+0x4d8>
  801c80:	00815504 	movi	r2,1364
  801c84:	10c01d2e 	bgeu	r2,r3,801cfc <_malloc_r+0x640>
  801c88:	01801f84 	movi	r6,126
  801c8c:	0080fc04 	movi	r2,1008
  801c90:	003eb706 	br	801770 <_malloc_r+0xb4>
  801c94:	00800204 	movi	r2,8
  801c98:	10cbc83a 	sub	r5,r2,r3
  801c9c:	2169883a 	add	r20,r4,r5
  801ca0:	003f9e06 	br	801b1c <_malloc_r+0x460>
  801ca4:	00bffe04 	movi	r2,-8
  801ca8:	a93ffd04 	addi	r4,r21,-12
  801cac:	2088703a 	and	r4,r4,r2
  801cb0:	b10b883a 	add	r5,r22,r4
  801cb4:	00c00144 	movi	r3,5
  801cb8:	28c00215 	stw	r3,8(r5)
  801cbc:	28c00115 	stw	r3,4(r5)
  801cc0:	b0800117 	ldw	r2,4(r22)
  801cc4:	1080004c 	andi	r2,r2,1
  801cc8:	2084b03a 	or	r2,r4,r2
  801ccc:	b0800115 	stw	r2,4(r22)
  801cd0:	313fdd2e 	bgeu	r6,r4,801c48 <_malloc_r+0x58c>
  801cd4:	b1400204 	addi	r5,r22,8
  801cd8:	9009883a 	mov	r4,r18
  801cdc:	08061140 	call	806114 <_free_r>
  801ce0:	e4000217 	ldw	r16,8(fp)
  801ce4:	003fd806 	br	801c48 <_malloc_r+0x58c>
  801ce8:	00800504 	movi	r2,20
  801cec:	11001536 	bltu	r2,r4,801d44 <_malloc_r+0x688>
  801cf0:	210016c4 	addi	r4,r4,91
  801cf4:	200690fa 	slli	r3,r4,3
  801cf8:	003fa606 	br	801b94 <_malloc_r+0x4d8>
  801cfc:	8804d4ba 	srli	r2,r17,18
  801d00:	11801f04 	addi	r6,r2,124
  801d04:	300490fa 	slli	r2,r6,3
  801d08:	003e9906 	br	801770 <_malloc_r+0xb4>
  801d0c:	2009d0ba 	srai	r4,r4,2
  801d10:	01402074 	movhi	r5,129
  801d14:	2943ff04 	addi	r5,r5,4092
  801d18:	00c00044 	movi	r3,1
  801d1c:	28800117 	ldw	r2,4(r5)
  801d20:	1906983a 	sll	r3,r3,r4
  801d24:	10c4b03a 	or	r2,r2,r3
  801d28:	28800115 	stw	r2,4(r5)
  801d2c:	003fa306 	br	801bbc <_malloc_r+0x500>
  801d30:	0027883a 	mov	r19,zero
  801d34:	00c00044 	movi	r3,1
  801d38:	003f8606 	br	801b54 <_malloc_r+0x498>
  801d3c:	d1200515 	stw	r4,-32748(gp)
  801d40:	003f7306 	br	801b10 <_malloc_r+0x454>
  801d44:	00801504 	movi	r2,84
  801d48:	11001936 	bltu	r2,r4,801db0 <_malloc_r+0x6f4>
  801d4c:	2804d33a 	srli	r2,r5,12
  801d50:	11001b84 	addi	r4,r2,110
  801d54:	200690fa 	slli	r3,r4,3
  801d58:	003f8e06 	br	801b94 <_malloc_r+0x4d8>
  801d5c:	480b883a 	mov	r5,r9
  801d60:	6807883a 	mov	r3,r13
  801d64:	288000cc 	andi	r2,r5,3
  801d68:	18fffe04 	addi	r3,r3,-8
  801d6c:	297fffc4 	addi	r5,r5,-1
  801d70:	10001526 	beq	r2,zero,801dc8 <_malloc_r+0x70c>
  801d74:	18800217 	ldw	r2,8(r3)
  801d78:	10fffa26 	beq	r2,r3,801d64 <_malloc_r+0x6a8>
  801d7c:	2109883a 	add	r4,r4,r4
  801d80:	393f1e36 	bltu	r7,r4,8019fc <_malloc_r+0x340>
  801d84:	203f1d26 	beq	r4,zero,8019fc <_malloc_r+0x340>
  801d88:	21c4703a 	and	r2,r4,r7
  801d8c:	10000226 	beq	r2,zero,801d98 <_malloc_r+0x6dc>
  801d90:	6013883a 	mov	r9,r12
  801d94:	003ee106 	br	80191c <_malloc_r+0x260>
  801d98:	2109883a 	add	r4,r4,r4
  801d9c:	3904703a 	and	r2,r7,r4
  801da0:	63000104 	addi	r12,r12,4
  801da4:	103ffc26 	beq	r2,zero,801d98 <_malloc_r+0x6dc>
  801da8:	6013883a 	mov	r9,r12
  801dac:	003edb06 	br	80191c <_malloc_r+0x260>
  801db0:	00805504 	movi	r2,340
  801db4:	11000836 	bltu	r2,r4,801dd8 <_malloc_r+0x71c>
  801db8:	2804d3fa 	srli	r2,r5,15
  801dbc:	11001dc4 	addi	r4,r2,119
  801dc0:	200690fa 	slli	r3,r4,3
  801dc4:	003f7306 	br	801b94 <_malloc_r+0x4d8>
  801dc8:	0104303a 	nor	r2,zero,r4
  801dcc:	388e703a 	and	r7,r7,r2
  801dd0:	e1c00115 	stw	r7,4(fp)
  801dd4:	003fe906 	br	801d7c <_malloc_r+0x6c0>
  801dd8:	00815504 	movi	r2,1364
  801ddc:	1100032e 	bgeu	r2,r4,801dec <_malloc_r+0x730>
  801de0:	01001f84 	movi	r4,126
  801de4:	00c0fc04 	movi	r3,1008
  801de8:	003f6a06 	br	801b94 <_malloc_r+0x4d8>
  801dec:	2804d4ba 	srli	r2,r5,18
  801df0:	11001f04 	addi	r4,r2,124
  801df4:	200690fa 	slli	r3,r4,3
  801df8:	003f6606 	br	801b94 <_malloc_r+0x4d8>

00801dfc <printf>:
  801dfc:	defffb04 	addi	sp,sp,-20
  801e00:	dfc00115 	stw	ra,4(sp)
  801e04:	d9400215 	stw	r5,8(sp)
  801e08:	d9800315 	stw	r6,12(sp)
  801e0c:	d9c00415 	stw	r7,16(sp)
  801e10:	00802074 	movhi	r2,129
  801e14:	1089eb04 	addi	r2,r2,10156
  801e18:	10c00017 	ldw	r3,0(r2)
  801e1c:	200b883a 	mov	r5,r4
  801e20:	d8800204 	addi	r2,sp,8
  801e24:	19000217 	ldw	r4,8(r3)
  801e28:	100d883a 	mov	r6,r2
  801e2c:	d8800015 	stw	r2,0(sp)
  801e30:	08040000 	call	804000 <__vfprintf_internal>
  801e34:	dfc00117 	ldw	ra,4(sp)
  801e38:	dec00504 	addi	sp,sp,20
  801e3c:	f800283a 	ret

00801e40 <_printf_r>:
  801e40:	defffc04 	addi	sp,sp,-16
  801e44:	dfc00115 	stw	ra,4(sp)
  801e48:	d9800215 	stw	r6,8(sp)
  801e4c:	d9c00315 	stw	r7,12(sp)
  801e50:	280d883a 	mov	r6,r5
  801e54:	21400217 	ldw	r5,8(r4)
  801e58:	d8c00204 	addi	r3,sp,8
  801e5c:	180f883a 	mov	r7,r3
  801e60:	d8c00015 	stw	r3,0(sp)
  801e64:	08021540 	call	802154 <___vfprintf_internal_r>
  801e68:	dfc00117 	ldw	ra,4(sp)
  801e6c:	dec00404 	addi	sp,sp,16
  801e70:	f800283a 	ret

00801e74 <_puts_r>:
  801e74:	defff604 	addi	sp,sp,-40
  801e78:	dc400715 	stw	r17,28(sp)
  801e7c:	2023883a 	mov	r17,r4
  801e80:	2809883a 	mov	r4,r5
  801e84:	dfc00915 	stw	ra,36(sp)
  801e88:	dcc00815 	stw	r19,32(sp)
  801e8c:	2827883a 	mov	r19,r5
  801e90:	080206c0 	call	80206c <strlen>
  801e94:	89400217 	ldw	r5,8(r17)
  801e98:	00c02074 	movhi	r3,129
  801e9c:	18c20c04 	addi	r3,r3,2096
  801ea0:	01c00044 	movi	r7,1
  801ea4:	12000044 	addi	r8,r2,1
  801ea8:	d8c00515 	stw	r3,20(sp)
  801eac:	d9c00615 	stw	r7,24(sp)
  801eb0:	d8c00304 	addi	r3,sp,12
  801eb4:	01c00084 	movi	r7,2
  801eb8:	8809883a 	mov	r4,r17
  801ebc:	d80d883a 	mov	r6,sp
  801ec0:	d8c00015 	stw	r3,0(sp)
  801ec4:	dcc00315 	stw	r19,12(sp)
  801ec8:	da000215 	stw	r8,8(sp)
  801ecc:	d9c00115 	stw	r7,4(sp)
  801ed0:	d8800415 	stw	r2,16(sp)
  801ed4:	08064280 	call	806428 <__sfvwrite_r>
  801ed8:	00ffffc4 	movi	r3,-1
  801edc:	10000626 	beq	r2,zero,801ef8 <_puts_r+0x84>
  801ee0:	1805883a 	mov	r2,r3
  801ee4:	dfc00917 	ldw	ra,36(sp)
  801ee8:	dcc00817 	ldw	r19,32(sp)
  801eec:	dc400717 	ldw	r17,28(sp)
  801ef0:	dec00a04 	addi	sp,sp,40
  801ef4:	f800283a 	ret
  801ef8:	00c00284 	movi	r3,10
  801efc:	1805883a 	mov	r2,r3
  801f00:	dfc00917 	ldw	ra,36(sp)
  801f04:	dcc00817 	ldw	r19,32(sp)
  801f08:	dc400717 	ldw	r17,28(sp)
  801f0c:	dec00a04 	addi	sp,sp,40
  801f10:	f800283a 	ret

00801f14 <puts>:
  801f14:	00802074 	movhi	r2,129
  801f18:	1089eb04 	addi	r2,r2,10156
  801f1c:	200b883a 	mov	r5,r4
  801f20:	11000017 	ldw	r4,0(r2)
  801f24:	0801e741 	jmpi	801e74 <_puts_r>

00801f28 <_sbrk_r>:
  801f28:	defffd04 	addi	sp,sp,-12
  801f2c:	dc000015 	stw	r16,0(sp)
  801f30:	04002074 	movhi	r16,129
  801f34:	84110404 	addi	r16,r16,17424
  801f38:	dc400115 	stw	r17,4(sp)
  801f3c:	80000015 	stw	zero,0(r16)
  801f40:	2023883a 	mov	r17,r4
  801f44:	2809883a 	mov	r4,r5
  801f48:	dfc00215 	stw	ra,8(sp)
  801f4c:	080d1f40 	call	80d1f4 <sbrk>
  801f50:	1007883a 	mov	r3,r2
  801f54:	00bfffc4 	movi	r2,-1
  801f58:	18800626 	beq	r3,r2,801f74 <_sbrk_r+0x4c>
  801f5c:	1805883a 	mov	r2,r3
  801f60:	dfc00217 	ldw	ra,8(sp)
  801f64:	dc400117 	ldw	r17,4(sp)
  801f68:	dc000017 	ldw	r16,0(sp)
  801f6c:	dec00304 	addi	sp,sp,12
  801f70:	f800283a 	ret
  801f74:	80800017 	ldw	r2,0(r16)
  801f78:	103ff826 	beq	r2,zero,801f5c <_sbrk_r+0x34>
  801f7c:	88800015 	stw	r2,0(r17)
  801f80:	1805883a 	mov	r2,r3
  801f84:	dfc00217 	ldw	ra,8(sp)
  801f88:	dc400117 	ldw	r17,4(sp)
  801f8c:	dc000017 	ldw	r16,0(sp)
  801f90:	dec00304 	addi	sp,sp,12
  801f94:	f800283a 	ret

00801f98 <sprintf>:
  801f98:	deffe504 	addi	sp,sp,-108
  801f9c:	2013883a 	mov	r9,r4
  801fa0:	dfc01815 	stw	ra,96(sp)
  801fa4:	d9801915 	stw	r6,100(sp)
  801fa8:	d9c01a15 	stw	r7,104(sp)
  801fac:	d8801904 	addi	r2,sp,100
  801fb0:	d8800015 	stw	r2,0(sp)
  801fb4:	00802074 	movhi	r2,129
  801fb8:	1089eb04 	addi	r2,r2,10156
  801fbc:	11000017 	ldw	r4,0(r2)
  801fc0:	d9c00017 	ldw	r7,0(sp)
  801fc4:	00808204 	movi	r2,520
  801fc8:	00e00034 	movhi	r3,32768
  801fcc:	18ffffc4 	addi	r3,r3,-1
  801fd0:	280d883a 	mov	r6,r5
  801fd4:	d880040d 	sth	r2,16(sp)
  801fd8:	d9400104 	addi	r5,sp,4
  801fdc:	00bfffc4 	movi	r2,-1
  801fe0:	d8c00615 	stw	r3,24(sp)
  801fe4:	d8c00315 	stw	r3,12(sp)
  801fe8:	da400515 	stw	r9,20(sp)
  801fec:	d880048d 	sth	r2,18(sp)
  801ff0:	da400115 	stw	r9,4(sp)
  801ff4:	08021540 	call	802154 <___vfprintf_internal_r>
  801ff8:	d8c00117 	ldw	r3,4(sp)
  801ffc:	18000005 	stb	zero,0(r3)
  802000:	dfc01817 	ldw	ra,96(sp)
  802004:	dec01b04 	addi	sp,sp,108
  802008:	f800283a 	ret

0080200c <_sprintf_r>:
  80200c:	deffe604 	addi	sp,sp,-104
  802010:	2813883a 	mov	r9,r5
  802014:	dfc01815 	stw	ra,96(sp)
  802018:	d9c01915 	stw	r7,100(sp)
  80201c:	d8801904 	addi	r2,sp,100
  802020:	d8800015 	stw	r2,0(sp)
  802024:	100f883a 	mov	r7,r2
  802028:	00808204 	movi	r2,520
  80202c:	00e00034 	movhi	r3,32768
  802030:	18ffffc4 	addi	r3,r3,-1
  802034:	d880040d 	sth	r2,16(sp)
  802038:	d9400104 	addi	r5,sp,4
  80203c:	00bfffc4 	movi	r2,-1
  802040:	d8c00615 	stw	r3,24(sp)
  802044:	d8c00315 	stw	r3,12(sp)
  802048:	da400515 	stw	r9,20(sp)
  80204c:	d880048d 	sth	r2,18(sp)
  802050:	da400115 	stw	r9,4(sp)
  802054:	08021540 	call	802154 <___vfprintf_internal_r>
  802058:	d8c00117 	ldw	r3,4(sp)
  80205c:	18000005 	stb	zero,0(r3)
  802060:	dfc01817 	ldw	ra,96(sp)
  802064:	dec01a04 	addi	sp,sp,104
  802068:	f800283a 	ret

0080206c <strlen>:
  80206c:	208000cc 	andi	r2,r4,3
  802070:	2011883a 	mov	r8,r4
  802074:	1000161e 	bne	r2,zero,8020d0 <strlen+0x64>
  802078:	20c00017 	ldw	r3,0(r4)
  80207c:	017fbff4 	movhi	r5,65279
  802080:	297fbfc4 	addi	r5,r5,-257
  802084:	01e02074 	movhi	r7,32897
  802088:	39e02004 	addi	r7,r7,-32640
  80208c:	1945883a 	add	r2,r3,r5
  802090:	11c4703a 	and	r2,r2,r7
  802094:	00c6303a 	nor	r3,zero,r3
  802098:	1886703a 	and	r3,r3,r2
  80209c:	18000c1e 	bne	r3,zero,8020d0 <strlen+0x64>
  8020a0:	280d883a 	mov	r6,r5
  8020a4:	380b883a 	mov	r5,r7
  8020a8:	21000104 	addi	r4,r4,4
  8020ac:	20800017 	ldw	r2,0(r4)
  8020b0:	1187883a 	add	r3,r2,r6
  8020b4:	1946703a 	and	r3,r3,r5
  8020b8:	0084303a 	nor	r2,zero,r2
  8020bc:	10c4703a 	and	r2,r2,r3
  8020c0:	103ff926 	beq	r2,zero,8020a8 <strlen+0x3c>
  8020c4:	20800007 	ldb	r2,0(r4)
  8020c8:	10000326 	beq	r2,zero,8020d8 <strlen+0x6c>
  8020cc:	21000044 	addi	r4,r4,1
  8020d0:	20800007 	ldb	r2,0(r4)
  8020d4:	103ffd1e 	bne	r2,zero,8020cc <strlen+0x60>
  8020d8:	2205c83a 	sub	r2,r4,r8
  8020dc:	f800283a 	ret

008020e0 <_vfiprintf_r>:
  8020e0:	defffe04 	addi	sp,sp,-8
  8020e4:	dfc00115 	stw	ra,4(sp)
  8020e8:	d9c00015 	stw	r7,0(sp)
  8020ec:	0808ba00 	call	808ba0 <___vfiprintf_internal_r>
  8020f0:	dfc00117 	ldw	ra,4(sp)
  8020f4:	dec00204 	addi	sp,sp,8
  8020f8:	f800283a 	ret

008020fc <__sprint_r>:
  8020fc:	30800217 	ldw	r2,8(r6)
  802100:	defffe04 	addi	sp,sp,-8
  802104:	dc000015 	stw	r16,0(sp)
  802108:	dfc00115 	stw	ra,4(sp)
  80210c:	3021883a 	mov	r16,r6
  802110:	0007883a 	mov	r3,zero
  802114:	1000061e 	bne	r2,zero,802130 <__sprint_r+0x34>
  802118:	1805883a 	mov	r2,r3
  80211c:	30000115 	stw	zero,4(r6)
  802120:	dfc00117 	ldw	ra,4(sp)
  802124:	dc000017 	ldw	r16,0(sp)
  802128:	dec00204 	addi	sp,sp,8
  80212c:	f800283a 	ret
  802130:	08064280 	call	806428 <__sfvwrite_r>
  802134:	1007883a 	mov	r3,r2
  802138:	1805883a 	mov	r2,r3
  80213c:	80000115 	stw	zero,4(r16)
  802140:	80000215 	stw	zero,8(r16)
  802144:	dfc00117 	ldw	ra,4(sp)
  802148:	dc000017 	ldw	r16,0(sp)
  80214c:	dec00204 	addi	sp,sp,8
  802150:	f800283a 	ret

00802154 <___vfprintf_internal_r>:
  802154:	defea404 	addi	sp,sp,-1392
  802158:	dd815815 	stw	r22,1376(sp)
  80215c:	dc015215 	stw	r16,1352(sp)
  802160:	d9c15115 	stw	r7,1348(sp)
  802164:	dfc15b15 	stw	ra,1388(sp)
  802168:	df015a15 	stw	fp,1384(sp)
  80216c:	ddc15915 	stw	r23,1380(sp)
  802170:	dd415715 	stw	r21,1372(sp)
  802174:	dd015615 	stw	r20,1368(sp)
  802178:	dcc15515 	stw	r19,1364(sp)
  80217c:	dc815415 	stw	r18,1360(sp)
  802180:	dc415315 	stw	r17,1356(sp)
  802184:	282d883a 	mov	r22,r5
  802188:	3021883a 	mov	r16,r6
  80218c:	d9014f15 	stw	r4,1340(sp)
  802190:	0806a4c0 	call	806a4c <_localeconv_r>
  802194:	10800017 	ldw	r2,0(r2)
  802198:	d9c15117 	ldw	r7,1348(sp)
  80219c:	d8814915 	stw	r2,1316(sp)
  8021a0:	d8814f17 	ldw	r2,1340(sp)
  8021a4:	10000226 	beq	r2,zero,8021b0 <___vfprintf_internal_r+0x5c>
  8021a8:	10800e17 	ldw	r2,56(r2)
  8021ac:	10020d26 	beq	r2,zero,8029e4 <___vfprintf_internal_r+0x890>
  8021b0:	b080030b 	ldhu	r2,12(r22)
  8021b4:	1080020c 	andi	r2,r2,8
  8021b8:	10020e26 	beq	r2,zero,8029f4 <___vfprintf_internal_r+0x8a0>
  8021bc:	b0800417 	ldw	r2,16(r22)
  8021c0:	10020c26 	beq	r2,zero,8029f4 <___vfprintf_internal_r+0x8a0>
  8021c4:	b200030b 	ldhu	r8,12(r22)
  8021c8:	00800284 	movi	r2,10
  8021cc:	40c0068c 	andi	r3,r8,26
  8021d0:	18802f1e 	bne	r3,r2,802290 <___vfprintf_internal_r+0x13c>
  8021d4:	b080038f 	ldh	r2,14(r22)
  8021d8:	10002d16 	blt	r2,zero,802290 <___vfprintf_internal_r+0x13c>
  8021dc:	b240038b 	ldhu	r9,14(r22)
  8021e0:	b2800717 	ldw	r10,28(r22)
  8021e4:	b2c00917 	ldw	r11,36(r22)
  8021e8:	d9014f17 	ldw	r4,1340(sp)
  8021ec:	dc402904 	addi	r17,sp,164
  8021f0:	d8804004 	addi	r2,sp,256
  8021f4:	00c10004 	movi	r3,1024
  8021f8:	423fff4c 	andi	r8,r8,65533
  8021fc:	800d883a 	mov	r6,r16
  802200:	880b883a 	mov	r5,r17
  802204:	da002c0d 	sth	r8,176(sp)
  802208:	da402c8d 	sth	r9,178(sp)
  80220c:	da803015 	stw	r10,192(sp)
  802210:	dac03215 	stw	r11,200(sp)
  802214:	d8802d15 	stw	r2,180(sp)
  802218:	d8c02e15 	stw	r3,184(sp)
  80221c:	d8802915 	stw	r2,164(sp)
  802220:	d8c02b15 	stw	r3,172(sp)
  802224:	d8002f15 	stw	zero,188(sp)
  802228:	08021540 	call	802154 <___vfprintf_internal_r>
  80222c:	d8814b15 	stw	r2,1324(sp)
  802230:	10000416 	blt	r2,zero,802244 <___vfprintf_internal_r+0xf0>
  802234:	d9014f17 	ldw	r4,1340(sp)
  802238:	880b883a 	mov	r5,r17
  80223c:	0805af80 	call	805af8 <_fflush_r>
  802240:	1002321e 	bne	r2,zero,802b0c <___vfprintf_internal_r+0x9b8>
  802244:	d8802c0b 	ldhu	r2,176(sp)
  802248:	1080100c 	andi	r2,r2,64
  80224c:	10000326 	beq	r2,zero,80225c <___vfprintf_internal_r+0x108>
  802250:	b080030b 	ldhu	r2,12(r22)
  802254:	10801014 	ori	r2,r2,64
  802258:	b080030d 	sth	r2,12(r22)
  80225c:	d8814b17 	ldw	r2,1324(sp)
  802260:	dfc15b17 	ldw	ra,1388(sp)
  802264:	df015a17 	ldw	fp,1384(sp)
  802268:	ddc15917 	ldw	r23,1380(sp)
  80226c:	dd815817 	ldw	r22,1376(sp)
  802270:	dd415717 	ldw	r21,1372(sp)
  802274:	dd015617 	ldw	r20,1368(sp)
  802278:	dcc15517 	ldw	r19,1364(sp)
  80227c:	dc815417 	ldw	r18,1360(sp)
  802280:	dc415317 	ldw	r17,1356(sp)
  802284:	dc015217 	ldw	r16,1352(sp)
  802288:	dec15c04 	addi	sp,sp,1392
  80228c:	f800283a 	ret
  802290:	0005883a 	mov	r2,zero
  802294:	0007883a 	mov	r3,zero
  802298:	dd401904 	addi	r21,sp,100
  80229c:	d8814215 	stw	r2,1288(sp)
  8022a0:	802f883a 	mov	r23,r16
  8022a4:	d8c14315 	stw	r3,1292(sp)
  8022a8:	d8014b15 	stw	zero,1324(sp)
  8022ac:	d8014815 	stw	zero,1312(sp)
  8022b0:	d8014415 	stw	zero,1296(sp)
  8022b4:	d8014715 	stw	zero,1308(sp)
  8022b8:	dd400c15 	stw	r21,48(sp)
  8022bc:	d8000e15 	stw	zero,56(sp)
  8022c0:	d8000d15 	stw	zero,52(sp)
  8022c4:	b8800007 	ldb	r2,0(r23)
  8022c8:	10001926 	beq	r2,zero,802330 <___vfprintf_internal_r+0x1dc>
  8022cc:	00c00944 	movi	r3,37
  8022d0:	10c01726 	beq	r2,r3,802330 <___vfprintf_internal_r+0x1dc>
  8022d4:	b821883a 	mov	r16,r23
  8022d8:	00000106 	br	8022e0 <___vfprintf_internal_r+0x18c>
  8022dc:	10c00326 	beq	r2,r3,8022ec <___vfprintf_internal_r+0x198>
  8022e0:	84000044 	addi	r16,r16,1
  8022e4:	80800007 	ldb	r2,0(r16)
  8022e8:	103ffc1e 	bne	r2,zero,8022dc <___vfprintf_internal_r+0x188>
  8022ec:	85e7c83a 	sub	r19,r16,r23
  8022f0:	98000e26 	beq	r19,zero,80232c <___vfprintf_internal_r+0x1d8>
  8022f4:	dc800e17 	ldw	r18,56(sp)
  8022f8:	dc400d17 	ldw	r17,52(sp)
  8022fc:	008001c4 	movi	r2,7
  802300:	94e5883a 	add	r18,r18,r19
  802304:	8c400044 	addi	r17,r17,1
  802308:	adc00015 	stw	r23,0(r21)
  80230c:	dc800e15 	stw	r18,56(sp)
  802310:	acc00115 	stw	r19,4(r21)
  802314:	dc400d15 	stw	r17,52(sp)
  802318:	14428b16 	blt	r2,r17,802d48 <___vfprintf_internal_r+0xbf4>
  80231c:	ad400204 	addi	r21,r21,8
  802320:	d9014b17 	ldw	r4,1324(sp)
  802324:	24c9883a 	add	r4,r4,r19
  802328:	d9014b15 	stw	r4,1324(sp)
  80232c:	802f883a 	mov	r23,r16
  802330:	b8800007 	ldb	r2,0(r23)
  802334:	10013c26 	beq	r2,zero,802828 <___vfprintf_internal_r+0x6d4>
  802338:	bdc00044 	addi	r23,r23,1
  80233c:	d8000405 	stb	zero,16(sp)
  802340:	b8c00007 	ldb	r3,0(r23)
  802344:	04ffffc4 	movi	r19,-1
  802348:	d8014c15 	stw	zero,1328(sp)
  80234c:	d8014a15 	stw	zero,1320(sp)
  802350:	d8c14d15 	stw	r3,1332(sp)
  802354:	bdc00044 	addi	r23,r23,1
  802358:	d9414d17 	ldw	r5,1332(sp)
  80235c:	00801604 	movi	r2,88
  802360:	28fff804 	addi	r3,r5,-32
  802364:	10c06036 	bltu	r2,r3,8024e8 <___vfprintf_internal_r+0x394>
  802368:	18c5883a 	add	r2,r3,r3
  80236c:	1085883a 	add	r2,r2,r2
  802370:	00c02034 	movhi	r3,128
  802374:	18c8e104 	addi	r3,r3,9092
  802378:	10c5883a 	add	r2,r2,r3
  80237c:	11000017 	ldw	r4,0(r2)
  802380:	2000683a 	jmp	r4
  802384:	008032f8 	rdprs	r2,zero,203
  802388:	008024e8 	cmpgeui	r2,zero,147
  80238c:	008024e8 	cmpgeui	r2,zero,147
  802390:	008032e4 	muli	r2,zero,203
  802394:	008024e8 	cmpgeui	r2,zero,147
  802398:	008024e8 	cmpgeui	r2,zero,147
  80239c:	008024e8 	cmpgeui	r2,zero,147
  8023a0:	008024e8 	cmpgeui	r2,zero,147
  8023a4:	008024e8 	cmpgeui	r2,zero,147
  8023a8:	008024e8 	cmpgeui	r2,zero,147
  8023ac:	008030c4 	movi	r2,195
  8023b0:	008032d4 	movui	r2,203
  8023b4:	008024e8 	cmpgeui	r2,zero,147
  8023b8:	008030dc 	xori	r2,zero,195
  8023bc:	00803370 	cmpltui	r2,zero,205
  8023c0:	008024e8 	cmpgeui	r2,zero,147
  8023c4:	0080335c 	xori	r2,zero,205
  8023c8:	00803324 	muli	r2,zero,204
  8023cc:	00803324 	muli	r2,zero,204
  8023d0:	00803324 	muli	r2,zero,204
  8023d4:	00803324 	muli	r2,zero,204
  8023d8:	00803324 	muli	r2,zero,204
  8023dc:	00803324 	muli	r2,zero,204
  8023e0:	00803324 	muli	r2,zero,204
  8023e4:	00803324 	muli	r2,zero,204
  8023e8:	00803324 	muli	r2,zero,204
  8023ec:	008024e8 	cmpgeui	r2,zero,147
  8023f0:	008024e8 	cmpgeui	r2,zero,147
  8023f4:	008024e8 	cmpgeui	r2,zero,147
  8023f8:	008024e8 	cmpgeui	r2,zero,147
  8023fc:	008024e8 	cmpgeui	r2,zero,147
  802400:	008024e8 	cmpgeui	r2,zero,147
  802404:	008024e8 	cmpgeui	r2,zero,147
  802408:	008024e8 	cmpgeui	r2,zero,147
  80240c:	008024e8 	cmpgeui	r2,zero,147
  802410:	008024e8 	cmpgeui	r2,zero,147
  802414:	00802b40 	call	802b4 <__reset-0x77fd4c>
  802418:	008031ac 	andhi	r2,zero,198
  80241c:	008024e8 	cmpgeui	r2,zero,147
  802420:	008031ac 	andhi	r2,zero,198
  802424:	008024e8 	cmpgeui	r2,zero,147
  802428:	008024e8 	cmpgeui	r2,zero,147
  80242c:	008024e8 	cmpgeui	r2,zero,147
  802430:	008024e8 	cmpgeui	r2,zero,147
  802434:	00803310 	cmplti	r2,zero,204
  802438:	008024e8 	cmpgeui	r2,zero,147
  80243c:	008024e8 	cmpgeui	r2,zero,147
  802440:	00802bf4 	movhi	r2,175
  802444:	008024e8 	cmpgeui	r2,zero,147
  802448:	008024e8 	cmpgeui	r2,zero,147
  80244c:	008024e8 	cmpgeui	r2,zero,147
  802450:	008024e8 	cmpgeui	r2,zero,147
  802454:	008024e8 	cmpgeui	r2,zero,147
  802458:	00802c40 	call	802c4 <__reset-0x77fd3c>
  80245c:	008024e8 	cmpgeui	r2,zero,147
  802460:	008024e8 	cmpgeui	r2,zero,147
  802464:	00803260 	cmpeqi	r2,zero,201
  802468:	008024e8 	cmpgeui	r2,zero,147
  80246c:	008024e8 	cmpgeui	r2,zero,147
  802470:	008024e8 	cmpgeui	r2,zero,147
  802474:	008024e8 	cmpgeui	r2,zero,147
  802478:	008024e8 	cmpgeui	r2,zero,147
  80247c:	008024e8 	cmpgeui	r2,zero,147
  802480:	008024e8 	cmpgeui	r2,zero,147
  802484:	008024e8 	cmpgeui	r2,zero,147
  802488:	008024e8 	cmpgeui	r2,zero,147
  80248c:	008024e8 	cmpgeui	r2,zero,147
  802490:	00803234 	movhi	r2,200
  802494:	00802b4c 	andi	r2,zero,173
  802498:	008031ac 	andhi	r2,zero,198
  80249c:	008031ac 	andhi	r2,zero,198
  8024a0:	008031ac 	andhi	r2,zero,198
  8024a4:	00803198 	cmpnei	r2,zero,198
  8024a8:	00802b4c 	andi	r2,zero,173
  8024ac:	008024e8 	cmpgeui	r2,zero,147
  8024b0:	008024e8 	cmpgeui	r2,zero,147
  8024b4:	00803120 	cmpeqi	r2,zero,196
  8024b8:	008024e8 	cmpgeui	r2,zero,147
  8024bc:	008030f0 	cmpltui	r2,zero,195
  8024c0:	00802c00 	call	802c0 <__reset-0x77fd40>
  8024c4:	00803150 	cmplti	r2,zero,197
  8024c8:	0080313c 	xorhi	r2,zero,196
  8024cc:	008024e8 	cmpgeui	r2,zero,147
  8024d0:	008033cc 	andi	r2,zero,207
  8024d4:	008024e8 	cmpgeui	r2,zero,147
  8024d8:	00802c4c 	andi	r2,zero,177
  8024dc:	008024e8 	cmpgeui	r2,zero,147
  8024e0:	008024e8 	cmpgeui	r2,zero,147
  8024e4:	008032c4 	movi	r2,203
  8024e8:	d9014d17 	ldw	r4,1332(sp)
  8024ec:	2000ce26 	beq	r4,zero,802828 <___vfprintf_internal_r+0x6d4>
  8024f0:	01400044 	movi	r5,1
  8024f4:	d9800f04 	addi	r6,sp,60
  8024f8:	d9c14015 	stw	r7,1280(sp)
  8024fc:	d9414515 	stw	r5,1300(sp)
  802500:	d9814115 	stw	r6,1284(sp)
  802504:	280f883a 	mov	r7,r5
  802508:	d9000f05 	stb	r4,60(sp)
  80250c:	d8000405 	stb	zero,16(sp)
  802510:	d8014615 	stw	zero,1304(sp)
  802514:	d8c14c17 	ldw	r3,1328(sp)
  802518:	1880008c 	andi	r2,r3,2
  80251c:	1005003a 	cmpeq	r2,r2,zero
  802520:	d8815015 	stw	r2,1344(sp)
  802524:	1000031e 	bne	r2,zero,802534 <___vfprintf_internal_r+0x3e0>
  802528:	d9014517 	ldw	r4,1300(sp)
  80252c:	21000084 	addi	r4,r4,2
  802530:	d9014515 	stw	r4,1300(sp)
  802534:	d9414c17 	ldw	r5,1328(sp)
  802538:	2940210c 	andi	r5,r5,132
  80253c:	d9414e15 	stw	r5,1336(sp)
  802540:	28002d1e 	bne	r5,zero,8025f8 <___vfprintf_internal_r+0x4a4>
  802544:	d9814a17 	ldw	r6,1320(sp)
  802548:	d8814517 	ldw	r2,1300(sp)
  80254c:	30a1c83a 	sub	r16,r6,r2
  802550:	0400290e 	bge	zero,r16,8025f8 <___vfprintf_internal_r+0x4a4>
  802554:	00800404 	movi	r2,16
  802558:	1404580e 	bge	r2,r16,8036bc <___vfprintf_internal_r+0x1568>
  80255c:	dc800e17 	ldw	r18,56(sp)
  802560:	dc400d17 	ldw	r17,52(sp)
  802564:	1027883a 	mov	r19,r2
  802568:	07002074 	movhi	fp,129
  80256c:	e7022884 	addi	fp,fp,2210
  802570:	050001c4 	movi	r20,7
  802574:	00000306 	br	802584 <___vfprintf_internal_r+0x430>
  802578:	843ffc04 	addi	r16,r16,-16
  80257c:	ad400204 	addi	r21,r21,8
  802580:	9c00130e 	bge	r19,r16,8025d0 <___vfprintf_internal_r+0x47c>
  802584:	94800404 	addi	r18,r18,16
  802588:	8c400044 	addi	r17,r17,1
  80258c:	af000015 	stw	fp,0(r21)
  802590:	acc00115 	stw	r19,4(r21)
  802594:	dc800e15 	stw	r18,56(sp)
  802598:	dc400d15 	stw	r17,52(sp)
  80259c:	a47ff60e 	bge	r20,r17,802578 <___vfprintf_internal_r+0x424>
  8025a0:	d9014f17 	ldw	r4,1340(sp)
  8025a4:	b00b883a 	mov	r5,r22
  8025a8:	d9800c04 	addi	r6,sp,48
  8025ac:	d9c15115 	stw	r7,1348(sp)
  8025b0:	08020fc0 	call	8020fc <__sprint_r>
  8025b4:	d9c15117 	ldw	r7,1348(sp)
  8025b8:	10009e1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8025bc:	843ffc04 	addi	r16,r16,-16
  8025c0:	dc800e17 	ldw	r18,56(sp)
  8025c4:	dc400d17 	ldw	r17,52(sp)
  8025c8:	dd401904 	addi	r21,sp,100
  8025cc:	9c3fed16 	blt	r19,r16,802584 <___vfprintf_internal_r+0x430>
  8025d0:	9425883a 	add	r18,r18,r16
  8025d4:	8c400044 	addi	r17,r17,1
  8025d8:	008001c4 	movi	r2,7
  8025dc:	af000015 	stw	fp,0(r21)
  8025e0:	ac000115 	stw	r16,4(r21)
  8025e4:	dc800e15 	stw	r18,56(sp)
  8025e8:	dc400d15 	stw	r17,52(sp)
  8025ec:	1441f516 	blt	r2,r17,802dc4 <___vfprintf_internal_r+0xc70>
  8025f0:	ad400204 	addi	r21,r21,8
  8025f4:	00000206 	br	802600 <___vfprintf_internal_r+0x4ac>
  8025f8:	dc800e17 	ldw	r18,56(sp)
  8025fc:	dc400d17 	ldw	r17,52(sp)
  802600:	d8800407 	ldb	r2,16(sp)
  802604:	10000b26 	beq	r2,zero,802634 <___vfprintf_internal_r+0x4e0>
  802608:	00800044 	movi	r2,1
  80260c:	94800044 	addi	r18,r18,1
  802610:	8c400044 	addi	r17,r17,1
  802614:	a8800115 	stw	r2,4(r21)
  802618:	d8c00404 	addi	r3,sp,16
  80261c:	008001c4 	movi	r2,7
  802620:	a8c00015 	stw	r3,0(r21)
  802624:	dc800e15 	stw	r18,56(sp)
  802628:	dc400d15 	stw	r17,52(sp)
  80262c:	1441da16 	blt	r2,r17,802d98 <___vfprintf_internal_r+0xc44>
  802630:	ad400204 	addi	r21,r21,8
  802634:	d9015017 	ldw	r4,1344(sp)
  802638:	20000b1e 	bne	r4,zero,802668 <___vfprintf_internal_r+0x514>
  80263c:	d8800444 	addi	r2,sp,17
  802640:	94800084 	addi	r18,r18,2
  802644:	8c400044 	addi	r17,r17,1
  802648:	a8800015 	stw	r2,0(r21)
  80264c:	00c00084 	movi	r3,2
  802650:	008001c4 	movi	r2,7
  802654:	a8c00115 	stw	r3,4(r21)
  802658:	dc800e15 	stw	r18,56(sp)
  80265c:	dc400d15 	stw	r17,52(sp)
  802660:	1441c216 	blt	r2,r17,802d6c <___vfprintf_internal_r+0xc18>
  802664:	ad400204 	addi	r21,r21,8
  802668:	d9414e17 	ldw	r5,1336(sp)
  80266c:	00802004 	movi	r2,128
  802670:	2880b126 	beq	r5,r2,802938 <___vfprintf_internal_r+0x7e4>
  802674:	d8c14617 	ldw	r3,1304(sp)
  802678:	19e1c83a 	sub	r16,r3,r7
  80267c:	0400260e 	bge	zero,r16,802718 <___vfprintf_internal_r+0x5c4>
  802680:	00800404 	movi	r2,16
  802684:	1403c90e 	bge	r2,r16,8035ac <___vfprintf_internal_r+0x1458>
  802688:	1027883a 	mov	r19,r2
  80268c:	07002074 	movhi	fp,129
  802690:	e7022484 	addi	fp,fp,2194
  802694:	050001c4 	movi	r20,7
  802698:	00000306 	br	8026a8 <___vfprintf_internal_r+0x554>
  80269c:	843ffc04 	addi	r16,r16,-16
  8026a0:	ad400204 	addi	r21,r21,8
  8026a4:	9c00130e 	bge	r19,r16,8026f4 <___vfprintf_internal_r+0x5a0>
  8026a8:	94800404 	addi	r18,r18,16
  8026ac:	8c400044 	addi	r17,r17,1
  8026b0:	af000015 	stw	fp,0(r21)
  8026b4:	acc00115 	stw	r19,4(r21)
  8026b8:	dc800e15 	stw	r18,56(sp)
  8026bc:	dc400d15 	stw	r17,52(sp)
  8026c0:	a47ff60e 	bge	r20,r17,80269c <___vfprintf_internal_r+0x548>
  8026c4:	d9014f17 	ldw	r4,1340(sp)
  8026c8:	b00b883a 	mov	r5,r22
  8026cc:	d9800c04 	addi	r6,sp,48
  8026d0:	d9c15115 	stw	r7,1348(sp)
  8026d4:	08020fc0 	call	8020fc <__sprint_r>
  8026d8:	d9c15117 	ldw	r7,1348(sp)
  8026dc:	1000551e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8026e0:	843ffc04 	addi	r16,r16,-16
  8026e4:	dc800e17 	ldw	r18,56(sp)
  8026e8:	dc400d17 	ldw	r17,52(sp)
  8026ec:	dd401904 	addi	r21,sp,100
  8026f0:	9c3fed16 	blt	r19,r16,8026a8 <___vfprintf_internal_r+0x554>
  8026f4:	9425883a 	add	r18,r18,r16
  8026f8:	8c400044 	addi	r17,r17,1
  8026fc:	008001c4 	movi	r2,7
  802700:	af000015 	stw	fp,0(r21)
  802704:	ac000115 	stw	r16,4(r21)
  802708:	dc800e15 	stw	r18,56(sp)
  80270c:	dc400d15 	stw	r17,52(sp)
  802710:	14418216 	blt	r2,r17,802d1c <___vfprintf_internal_r+0xbc8>
  802714:	ad400204 	addi	r21,r21,8
  802718:	d9014c17 	ldw	r4,1328(sp)
  80271c:	2080400c 	andi	r2,r4,256
  802720:	10004a1e 	bne	r2,zero,80284c <___vfprintf_internal_r+0x6f8>
  802724:	d9414117 	ldw	r5,1284(sp)
  802728:	91e5883a 	add	r18,r18,r7
  80272c:	8c400044 	addi	r17,r17,1
  802730:	008001c4 	movi	r2,7
  802734:	a9400015 	stw	r5,0(r21)
  802738:	a9c00115 	stw	r7,4(r21)
  80273c:	dc800e15 	stw	r18,56(sp)
  802740:	dc400d15 	stw	r17,52(sp)
  802744:	14416716 	blt	r2,r17,802ce4 <___vfprintf_internal_r+0xb90>
  802748:	a8c00204 	addi	r3,r21,8
  80274c:	d9814c17 	ldw	r6,1328(sp)
  802750:	3080010c 	andi	r2,r6,4
  802754:	10002826 	beq	r2,zero,8027f8 <___vfprintf_internal_r+0x6a4>
  802758:	d8814a17 	ldw	r2,1320(sp)
  80275c:	d9014517 	ldw	r4,1300(sp)
  802760:	1121c83a 	sub	r16,r2,r4
  802764:	0400240e 	bge	zero,r16,8027f8 <___vfprintf_internal_r+0x6a4>
  802768:	00800404 	movi	r2,16
  80276c:	14044f0e 	bge	r2,r16,8038ac <___vfprintf_internal_r+0x1758>
  802770:	dc400d17 	ldw	r17,52(sp)
  802774:	1027883a 	mov	r19,r2
  802778:	07002074 	movhi	fp,129
  80277c:	e7022884 	addi	fp,fp,2210
  802780:	050001c4 	movi	r20,7
  802784:	00000306 	br	802794 <___vfprintf_internal_r+0x640>
  802788:	843ffc04 	addi	r16,r16,-16
  80278c:	18c00204 	addi	r3,r3,8
  802790:	9c00110e 	bge	r19,r16,8027d8 <___vfprintf_internal_r+0x684>
  802794:	94800404 	addi	r18,r18,16
  802798:	8c400044 	addi	r17,r17,1
  80279c:	1f000015 	stw	fp,0(r3)
  8027a0:	1cc00115 	stw	r19,4(r3)
  8027a4:	dc800e15 	stw	r18,56(sp)
  8027a8:	dc400d15 	stw	r17,52(sp)
  8027ac:	a47ff60e 	bge	r20,r17,802788 <___vfprintf_internal_r+0x634>
  8027b0:	d9014f17 	ldw	r4,1340(sp)
  8027b4:	b00b883a 	mov	r5,r22
  8027b8:	d9800c04 	addi	r6,sp,48
  8027bc:	08020fc0 	call	8020fc <__sprint_r>
  8027c0:	10001c1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8027c4:	843ffc04 	addi	r16,r16,-16
  8027c8:	dc800e17 	ldw	r18,56(sp)
  8027cc:	dc400d17 	ldw	r17,52(sp)
  8027d0:	d8c01904 	addi	r3,sp,100
  8027d4:	9c3fef16 	blt	r19,r16,802794 <___vfprintf_internal_r+0x640>
  8027d8:	9425883a 	add	r18,r18,r16
  8027dc:	8c400044 	addi	r17,r17,1
  8027e0:	008001c4 	movi	r2,7
  8027e4:	1f000015 	stw	fp,0(r3)
  8027e8:	1c000115 	stw	r16,4(r3)
  8027ec:	dc800e15 	stw	r18,56(sp)
  8027f0:	dc400d15 	stw	r17,52(sp)
  8027f4:	1440cb16 	blt	r2,r17,802b24 <___vfprintf_internal_r+0x9d0>
  8027f8:	d8814a17 	ldw	r2,1320(sp)
  8027fc:	d9414517 	ldw	r5,1300(sp)
  802800:	1140010e 	bge	r2,r5,802808 <___vfprintf_internal_r+0x6b4>
  802804:	2805883a 	mov	r2,r5
  802808:	d9814b17 	ldw	r6,1324(sp)
  80280c:	308d883a 	add	r6,r6,r2
  802810:	d9814b15 	stw	r6,1324(sp)
  802814:	90013b1e 	bne	r18,zero,802d04 <___vfprintf_internal_r+0xbb0>
  802818:	d9c14017 	ldw	r7,1280(sp)
  80281c:	dd401904 	addi	r21,sp,100
  802820:	d8000d15 	stw	zero,52(sp)
  802824:	003ea706 	br	8022c4 <___vfprintf_internal_r+0x170>
  802828:	d8800e17 	ldw	r2,56(sp)
  80282c:	10053f1e 	bne	r2,zero,803d2c <___vfprintf_internal_r+0x1bd8>
  802830:	d8000d15 	stw	zero,52(sp)
  802834:	b080030b 	ldhu	r2,12(r22)
  802838:	1080100c 	andi	r2,r2,64
  80283c:	103e8726 	beq	r2,zero,80225c <___vfprintf_internal_r+0x108>
  802840:	00bfffc4 	movi	r2,-1
  802844:	d8814b15 	stw	r2,1324(sp)
  802848:	003e8406 	br	80225c <___vfprintf_internal_r+0x108>
  80284c:	d9814d17 	ldw	r6,1332(sp)
  802850:	00801944 	movi	r2,101
  802854:	11806e16 	blt	r2,r6,802a10 <___vfprintf_internal_r+0x8bc>
  802858:	d9414717 	ldw	r5,1308(sp)
  80285c:	00c00044 	movi	r3,1
  802860:	1943430e 	bge	r3,r5,803570 <___vfprintf_internal_r+0x141c>
  802864:	d8814117 	ldw	r2,1284(sp)
  802868:	94800044 	addi	r18,r18,1
  80286c:	8c400044 	addi	r17,r17,1
  802870:	a8800015 	stw	r2,0(r21)
  802874:	008001c4 	movi	r2,7
  802878:	a8c00115 	stw	r3,4(r21)
  80287c:	dc800e15 	stw	r18,56(sp)
  802880:	dc400d15 	stw	r17,52(sp)
  802884:	1441ca16 	blt	r2,r17,802fb0 <___vfprintf_internal_r+0xe5c>
  802888:	a8c00204 	addi	r3,r21,8
  80288c:	d9014917 	ldw	r4,1316(sp)
  802890:	00800044 	movi	r2,1
  802894:	94800044 	addi	r18,r18,1
  802898:	8c400044 	addi	r17,r17,1
  80289c:	18800115 	stw	r2,4(r3)
  8028a0:	008001c4 	movi	r2,7
  8028a4:	19000015 	stw	r4,0(r3)
  8028a8:	dc800e15 	stw	r18,56(sp)
  8028ac:	dc400d15 	stw	r17,52(sp)
  8028b0:	1441b616 	blt	r2,r17,802f8c <___vfprintf_internal_r+0xe38>
  8028b4:	1cc00204 	addi	r19,r3,8
  8028b8:	d9014217 	ldw	r4,1288(sp)
  8028bc:	d9414317 	ldw	r5,1292(sp)
  8028c0:	000d883a 	mov	r6,zero
  8028c4:	000f883a 	mov	r7,zero
  8028c8:	080b8300 	call	80b830 <__nedf2>
  8028cc:	10017426 	beq	r2,zero,802ea0 <___vfprintf_internal_r+0xd4c>
  8028d0:	d9414717 	ldw	r5,1308(sp)
  8028d4:	d9814117 	ldw	r6,1284(sp)
  8028d8:	8c400044 	addi	r17,r17,1
  8028dc:	2c85883a 	add	r2,r5,r18
  8028e0:	14bfffc4 	addi	r18,r2,-1
  8028e4:	28bfffc4 	addi	r2,r5,-1
  8028e8:	30c00044 	addi	r3,r6,1
  8028ec:	98800115 	stw	r2,4(r19)
  8028f0:	008001c4 	movi	r2,7
  8028f4:	98c00015 	stw	r3,0(r19)
  8028f8:	dc800e15 	stw	r18,56(sp)
  8028fc:	dc400d15 	stw	r17,52(sp)
  802900:	14418e16 	blt	r2,r17,802f3c <___vfprintf_internal_r+0xde8>
  802904:	9cc00204 	addi	r19,r19,8
  802908:	d9414817 	ldw	r5,1312(sp)
  80290c:	d8800804 	addi	r2,sp,32
  802910:	8c400044 	addi	r17,r17,1
  802914:	9165883a 	add	r18,r18,r5
  802918:	98800015 	stw	r2,0(r19)
  80291c:	008001c4 	movi	r2,7
  802920:	99400115 	stw	r5,4(r19)
  802924:	dc800e15 	stw	r18,56(sp)
  802928:	dc400d15 	stw	r17,52(sp)
  80292c:	1440ed16 	blt	r2,r17,802ce4 <___vfprintf_internal_r+0xb90>
  802930:	98c00204 	addi	r3,r19,8
  802934:	003f8506 	br	80274c <___vfprintf_internal_r+0x5f8>
  802938:	d9814a17 	ldw	r6,1320(sp)
  80293c:	d8814517 	ldw	r2,1300(sp)
  802940:	30a1c83a 	sub	r16,r6,r2
  802944:	043f4b0e 	bge	zero,r16,802674 <___vfprintf_internal_r+0x520>
  802948:	00800404 	movi	r2,16
  80294c:	1404340e 	bge	r2,r16,803a20 <___vfprintf_internal_r+0x18cc>
  802950:	1027883a 	mov	r19,r2
  802954:	07002074 	movhi	fp,129
  802958:	e7022484 	addi	fp,fp,2194
  80295c:	050001c4 	movi	r20,7
  802960:	00000306 	br	802970 <___vfprintf_internal_r+0x81c>
  802964:	843ffc04 	addi	r16,r16,-16
  802968:	ad400204 	addi	r21,r21,8
  80296c:	9c00130e 	bge	r19,r16,8029bc <___vfprintf_internal_r+0x868>
  802970:	94800404 	addi	r18,r18,16
  802974:	8c400044 	addi	r17,r17,1
  802978:	af000015 	stw	fp,0(r21)
  80297c:	acc00115 	stw	r19,4(r21)
  802980:	dc800e15 	stw	r18,56(sp)
  802984:	dc400d15 	stw	r17,52(sp)
  802988:	a47ff60e 	bge	r20,r17,802964 <___vfprintf_internal_r+0x810>
  80298c:	d9014f17 	ldw	r4,1340(sp)
  802990:	b00b883a 	mov	r5,r22
  802994:	d9800c04 	addi	r6,sp,48
  802998:	d9c15115 	stw	r7,1348(sp)
  80299c:	08020fc0 	call	8020fc <__sprint_r>
  8029a0:	d9c15117 	ldw	r7,1348(sp)
  8029a4:	103fa31e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8029a8:	843ffc04 	addi	r16,r16,-16
  8029ac:	dc800e17 	ldw	r18,56(sp)
  8029b0:	dc400d17 	ldw	r17,52(sp)
  8029b4:	dd401904 	addi	r21,sp,100
  8029b8:	9c3fed16 	blt	r19,r16,802970 <___vfprintf_internal_r+0x81c>
  8029bc:	9425883a 	add	r18,r18,r16
  8029c0:	8c400044 	addi	r17,r17,1
  8029c4:	008001c4 	movi	r2,7
  8029c8:	af000015 	stw	fp,0(r21)
  8029cc:	ac000115 	stw	r16,4(r21)
  8029d0:	dc800e15 	stw	r18,56(sp)
  8029d4:	dc400d15 	stw	r17,52(sp)
  8029d8:	14416116 	blt	r2,r17,802f60 <___vfprintf_internal_r+0xe0c>
  8029dc:	ad400204 	addi	r21,r21,8
  8029e0:	003f2406 	br	802674 <___vfprintf_internal_r+0x520>
  8029e4:	d9014f17 	ldw	r4,1340(sp)
  8029e8:	0805d900 	call	805d90 <__sinit>
  8029ec:	d9c15117 	ldw	r7,1348(sp)
  8029f0:	003def06 	br	8021b0 <___vfprintf_internal_r+0x5c>
  8029f4:	d9014f17 	ldw	r4,1340(sp)
  8029f8:	b00b883a 	mov	r5,r22
  8029fc:	d9c15115 	stw	r7,1348(sp)
  802a00:	08040240 	call	804024 <__swsetup_r>
  802a04:	d9c15117 	ldw	r7,1348(sp)
  802a08:	103dee26 	beq	r2,zero,8021c4 <___vfprintf_internal_r+0x70>
  802a0c:	003f8c06 	br	802840 <___vfprintf_internal_r+0x6ec>
  802a10:	d9014217 	ldw	r4,1288(sp)
  802a14:	d9414317 	ldw	r5,1292(sp)
  802a18:	000d883a 	mov	r6,zero
  802a1c:	000f883a 	mov	r7,zero
  802a20:	080b7a80 	call	80b7a8 <__eqdf2>
  802a24:	1000f21e 	bne	r2,zero,802df0 <___vfprintf_internal_r+0xc9c>
  802a28:	00802074 	movhi	r2,129
  802a2c:	10822404 	addi	r2,r2,2192
  802a30:	94800044 	addi	r18,r18,1
  802a34:	8c400044 	addi	r17,r17,1
  802a38:	a8800015 	stw	r2,0(r21)
  802a3c:	00c00044 	movi	r3,1
  802a40:	008001c4 	movi	r2,7
  802a44:	a8c00115 	stw	r3,4(r21)
  802a48:	dc800e15 	stw	r18,56(sp)
  802a4c:	dc400d15 	stw	r17,52(sp)
  802a50:	1442fa16 	blt	r2,r17,80363c <___vfprintf_internal_r+0x14e8>
  802a54:	a8c00204 	addi	r3,r21,8
  802a58:	d8800517 	ldw	r2,20(sp)
  802a5c:	d9014717 	ldw	r4,1308(sp)
  802a60:	11015c0e 	bge	r2,r4,802fd4 <___vfprintf_internal_r+0xe80>
  802a64:	dc400d17 	ldw	r17,52(sp)
  802a68:	d9814917 	ldw	r6,1316(sp)
  802a6c:	00800044 	movi	r2,1
  802a70:	94800044 	addi	r18,r18,1
  802a74:	8c400044 	addi	r17,r17,1
  802a78:	18800115 	stw	r2,4(r3)
  802a7c:	008001c4 	movi	r2,7
  802a80:	19800015 	stw	r6,0(r3)
  802a84:	dc800e15 	stw	r18,56(sp)
  802a88:	dc400d15 	stw	r17,52(sp)
  802a8c:	14431016 	blt	r2,r17,8036d0 <___vfprintf_internal_r+0x157c>
  802a90:	18c00204 	addi	r3,r3,8
  802a94:	d8814717 	ldw	r2,1308(sp)
  802a98:	143fffc4 	addi	r16,r2,-1
  802a9c:	043f2b0e 	bge	zero,r16,80274c <___vfprintf_internal_r+0x5f8>
  802aa0:	00800404 	movi	r2,16
  802aa4:	1402a20e 	bge	r2,r16,803530 <___vfprintf_internal_r+0x13dc>
  802aa8:	dc400d17 	ldw	r17,52(sp)
  802aac:	1027883a 	mov	r19,r2
  802ab0:	07002074 	movhi	fp,129
  802ab4:	e7022484 	addi	fp,fp,2194
  802ab8:	050001c4 	movi	r20,7
  802abc:	00000306 	br	802acc <___vfprintf_internal_r+0x978>
  802ac0:	18c00204 	addi	r3,r3,8
  802ac4:	843ffc04 	addi	r16,r16,-16
  802ac8:	9c029c0e 	bge	r19,r16,80353c <___vfprintf_internal_r+0x13e8>
  802acc:	94800404 	addi	r18,r18,16
  802ad0:	8c400044 	addi	r17,r17,1
  802ad4:	1f000015 	stw	fp,0(r3)
  802ad8:	1cc00115 	stw	r19,4(r3)
  802adc:	dc800e15 	stw	r18,56(sp)
  802ae0:	dc400d15 	stw	r17,52(sp)
  802ae4:	a47ff60e 	bge	r20,r17,802ac0 <___vfprintf_internal_r+0x96c>
  802ae8:	d9014f17 	ldw	r4,1340(sp)
  802aec:	b00b883a 	mov	r5,r22
  802af0:	d9800c04 	addi	r6,sp,48
  802af4:	08020fc0 	call	8020fc <__sprint_r>
  802af8:	103f4e1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802afc:	dc800e17 	ldw	r18,56(sp)
  802b00:	dc400d17 	ldw	r17,52(sp)
  802b04:	d8c01904 	addi	r3,sp,100
  802b08:	003fee06 	br	802ac4 <___vfprintf_internal_r+0x970>
  802b0c:	d8802c0b 	ldhu	r2,176(sp)
  802b10:	00ffffc4 	movi	r3,-1
  802b14:	d8c14b15 	stw	r3,1324(sp)
  802b18:	1080100c 	andi	r2,r2,64
  802b1c:	103dcc1e 	bne	r2,zero,802250 <___vfprintf_internal_r+0xfc>
  802b20:	003dce06 	br	80225c <___vfprintf_internal_r+0x108>
  802b24:	d9014f17 	ldw	r4,1340(sp)
  802b28:	b00b883a 	mov	r5,r22
  802b2c:	d9800c04 	addi	r6,sp,48
  802b30:	08020fc0 	call	8020fc <__sprint_r>
  802b34:	103f3f1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802b38:	dc800e17 	ldw	r18,56(sp)
  802b3c:	003f2e06 	br	8027f8 <___vfprintf_internal_r+0x6a4>
  802b40:	d9414c17 	ldw	r5,1328(sp)
  802b44:	29400414 	ori	r5,r5,16
  802b48:	d9414c15 	stw	r5,1328(sp)
  802b4c:	d9814c17 	ldw	r6,1328(sp)
  802b50:	3080080c 	andi	r2,r6,32
  802b54:	10014f1e 	bne	r2,zero,803094 <___vfprintf_internal_r+0xf40>
  802b58:	d8c14c17 	ldw	r3,1328(sp)
  802b5c:	1880040c 	andi	r2,r3,16
  802b60:	1002ea1e 	bne	r2,zero,80370c <___vfprintf_internal_r+0x15b8>
  802b64:	d9014c17 	ldw	r4,1328(sp)
  802b68:	2080100c 	andi	r2,r4,64
  802b6c:	1002e726 	beq	r2,zero,80370c <___vfprintf_internal_r+0x15b8>
  802b70:	3880000f 	ldh	r2,0(r7)
  802b74:	39c00104 	addi	r7,r7,4
  802b78:	d9c14015 	stw	r7,1280(sp)
  802b7c:	1023d7fa 	srai	r17,r2,31
  802b80:	1021883a 	mov	r16,r2
  802b84:	88037216 	blt	r17,zero,803950 <___vfprintf_internal_r+0x17fc>
  802b88:	01000044 	movi	r4,1
  802b8c:	98000416 	blt	r19,zero,802ba0 <___vfprintf_internal_r+0xa4c>
  802b90:	d8c14c17 	ldw	r3,1328(sp)
  802b94:	00bfdfc4 	movi	r2,-129
  802b98:	1886703a 	and	r3,r3,r2
  802b9c:	d8c14c15 	stw	r3,1328(sp)
  802ba0:	8444b03a 	or	r2,r16,r17
  802ba4:	1002261e 	bne	r2,zero,803440 <___vfprintf_internal_r+0x12ec>
  802ba8:	9802251e 	bne	r19,zero,803440 <___vfprintf_internal_r+0x12ec>
  802bac:	20803fcc 	andi	r2,r4,255
  802bb0:	10029b26 	beq	r2,zero,803620 <___vfprintf_internal_r+0x14cc>
  802bb4:	d8c01904 	addi	r3,sp,100
  802bb8:	dd000f04 	addi	r20,sp,60
  802bbc:	d8c14115 	stw	r3,1284(sp)
  802bc0:	d8c14117 	ldw	r3,1284(sp)
  802bc4:	dcc14515 	stw	r19,1300(sp)
  802bc8:	a0c5c83a 	sub	r2,r20,r3
  802bcc:	11c00a04 	addi	r7,r2,40
  802bd0:	99c0010e 	bge	r19,r7,802bd8 <___vfprintf_internal_r+0xa84>
  802bd4:	d9c14515 	stw	r7,1300(sp)
  802bd8:	dcc14615 	stw	r19,1304(sp)
  802bdc:	d8800407 	ldb	r2,16(sp)
  802be0:	103e4c26 	beq	r2,zero,802514 <___vfprintf_internal_r+0x3c0>
  802be4:	d8814517 	ldw	r2,1300(sp)
  802be8:	10800044 	addi	r2,r2,1
  802bec:	d8814515 	stw	r2,1300(sp)
  802bf0:	003e4806 	br	802514 <___vfprintf_internal_r+0x3c0>
  802bf4:	d9814c17 	ldw	r6,1328(sp)
  802bf8:	31800414 	ori	r6,r6,16
  802bfc:	d9814c15 	stw	r6,1328(sp)
  802c00:	d8c14c17 	ldw	r3,1328(sp)
  802c04:	1880080c 	andi	r2,r3,32
  802c08:	1001271e 	bne	r2,zero,8030a8 <___vfprintf_internal_r+0xf54>
  802c0c:	d9414c17 	ldw	r5,1328(sp)
  802c10:	2880040c 	andi	r2,r5,16
  802c14:	1002b61e 	bne	r2,zero,8036f0 <___vfprintf_internal_r+0x159c>
  802c18:	d9814c17 	ldw	r6,1328(sp)
  802c1c:	3080100c 	andi	r2,r6,64
  802c20:	1002b326 	beq	r2,zero,8036f0 <___vfprintf_internal_r+0x159c>
  802c24:	3c00000b 	ldhu	r16,0(r7)
  802c28:	0009883a 	mov	r4,zero
  802c2c:	39c00104 	addi	r7,r7,4
  802c30:	0023883a 	mov	r17,zero
  802c34:	d9c14015 	stw	r7,1280(sp)
  802c38:	d8000405 	stb	zero,16(sp)
  802c3c:	003fd306 	br	802b8c <___vfprintf_internal_r+0xa38>
  802c40:	d9014c17 	ldw	r4,1328(sp)
  802c44:	21000414 	ori	r4,r4,16
  802c48:	d9014c15 	stw	r4,1328(sp)
  802c4c:	d9414c17 	ldw	r5,1328(sp)
  802c50:	2880080c 	andi	r2,r5,32
  802c54:	1001081e 	bne	r2,zero,803078 <___vfprintf_internal_r+0xf24>
  802c58:	d8c14c17 	ldw	r3,1328(sp)
  802c5c:	1880040c 	andi	r2,r3,16
  802c60:	1002b01e 	bne	r2,zero,803724 <___vfprintf_internal_r+0x15d0>
  802c64:	d9014c17 	ldw	r4,1328(sp)
  802c68:	2080100c 	andi	r2,r4,64
  802c6c:	1002ad26 	beq	r2,zero,803724 <___vfprintf_internal_r+0x15d0>
  802c70:	3c00000b 	ldhu	r16,0(r7)
  802c74:	01000044 	movi	r4,1
  802c78:	39c00104 	addi	r7,r7,4
  802c7c:	0023883a 	mov	r17,zero
  802c80:	d9c14015 	stw	r7,1280(sp)
  802c84:	d8000405 	stb	zero,16(sp)
  802c88:	003fc006 	br	802b8c <___vfprintf_internal_r+0xa38>
  802c8c:	d9014f17 	ldw	r4,1340(sp)
  802c90:	b00b883a 	mov	r5,r22
  802c94:	d9800c04 	addi	r6,sp,48
  802c98:	08020fc0 	call	8020fc <__sprint_r>
  802c9c:	103ee51e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802ca0:	dc800e17 	ldw	r18,56(sp)
  802ca4:	d8c01904 	addi	r3,sp,100
  802ca8:	d9814c17 	ldw	r6,1328(sp)
  802cac:	3080004c 	andi	r2,r6,1
  802cb0:	1005003a 	cmpeq	r2,r2,zero
  802cb4:	103ea51e 	bne	r2,zero,80274c <___vfprintf_internal_r+0x5f8>
  802cb8:	00800044 	movi	r2,1
  802cbc:	dc400d17 	ldw	r17,52(sp)
  802cc0:	18800115 	stw	r2,4(r3)
  802cc4:	d8814917 	ldw	r2,1316(sp)
  802cc8:	94800044 	addi	r18,r18,1
  802ccc:	8c400044 	addi	r17,r17,1
  802cd0:	18800015 	stw	r2,0(r3)
  802cd4:	008001c4 	movi	r2,7
  802cd8:	dc800e15 	stw	r18,56(sp)
  802cdc:	dc400d15 	stw	r17,52(sp)
  802ce0:	14421e0e 	bge	r2,r17,80355c <___vfprintf_internal_r+0x1408>
  802ce4:	d9014f17 	ldw	r4,1340(sp)
  802ce8:	b00b883a 	mov	r5,r22
  802cec:	d9800c04 	addi	r6,sp,48
  802cf0:	08020fc0 	call	8020fc <__sprint_r>
  802cf4:	103ecf1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802cf8:	dc800e17 	ldw	r18,56(sp)
  802cfc:	d8c01904 	addi	r3,sp,100
  802d00:	003e9206 	br	80274c <___vfprintf_internal_r+0x5f8>
  802d04:	d9014f17 	ldw	r4,1340(sp)
  802d08:	b00b883a 	mov	r5,r22
  802d0c:	d9800c04 	addi	r6,sp,48
  802d10:	08020fc0 	call	8020fc <__sprint_r>
  802d14:	103ec026 	beq	r2,zero,802818 <___vfprintf_internal_r+0x6c4>
  802d18:	003ec606 	br	802834 <___vfprintf_internal_r+0x6e0>
  802d1c:	d9014f17 	ldw	r4,1340(sp)
  802d20:	b00b883a 	mov	r5,r22
  802d24:	d9800c04 	addi	r6,sp,48
  802d28:	d9c15115 	stw	r7,1348(sp)
  802d2c:	08020fc0 	call	8020fc <__sprint_r>
  802d30:	d9c15117 	ldw	r7,1348(sp)
  802d34:	103ebf1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802d38:	dc800e17 	ldw	r18,56(sp)
  802d3c:	dc400d17 	ldw	r17,52(sp)
  802d40:	dd401904 	addi	r21,sp,100
  802d44:	003e7406 	br	802718 <___vfprintf_internal_r+0x5c4>
  802d48:	d9014f17 	ldw	r4,1340(sp)
  802d4c:	b00b883a 	mov	r5,r22
  802d50:	d9800c04 	addi	r6,sp,48
  802d54:	d9c15115 	stw	r7,1348(sp)
  802d58:	08020fc0 	call	8020fc <__sprint_r>
  802d5c:	d9c15117 	ldw	r7,1348(sp)
  802d60:	103eb41e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802d64:	dd401904 	addi	r21,sp,100
  802d68:	003d6d06 	br	802320 <___vfprintf_internal_r+0x1cc>
  802d6c:	d9014f17 	ldw	r4,1340(sp)
  802d70:	b00b883a 	mov	r5,r22
  802d74:	d9800c04 	addi	r6,sp,48
  802d78:	d9c15115 	stw	r7,1348(sp)
  802d7c:	08020fc0 	call	8020fc <__sprint_r>
  802d80:	d9c15117 	ldw	r7,1348(sp)
  802d84:	103eab1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802d88:	dc800e17 	ldw	r18,56(sp)
  802d8c:	dc400d17 	ldw	r17,52(sp)
  802d90:	dd401904 	addi	r21,sp,100
  802d94:	003e3406 	br	802668 <___vfprintf_internal_r+0x514>
  802d98:	d9014f17 	ldw	r4,1340(sp)
  802d9c:	b00b883a 	mov	r5,r22
  802da0:	d9800c04 	addi	r6,sp,48
  802da4:	d9c15115 	stw	r7,1348(sp)
  802da8:	08020fc0 	call	8020fc <__sprint_r>
  802dac:	d9c15117 	ldw	r7,1348(sp)
  802db0:	103ea01e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802db4:	dc800e17 	ldw	r18,56(sp)
  802db8:	dc400d17 	ldw	r17,52(sp)
  802dbc:	dd401904 	addi	r21,sp,100
  802dc0:	003e1c06 	br	802634 <___vfprintf_internal_r+0x4e0>
  802dc4:	d9014f17 	ldw	r4,1340(sp)
  802dc8:	b00b883a 	mov	r5,r22
  802dcc:	d9800c04 	addi	r6,sp,48
  802dd0:	d9c15115 	stw	r7,1348(sp)
  802dd4:	08020fc0 	call	8020fc <__sprint_r>
  802dd8:	d9c15117 	ldw	r7,1348(sp)
  802ddc:	103e951e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802de0:	dc800e17 	ldw	r18,56(sp)
  802de4:	dc400d17 	ldw	r17,52(sp)
  802de8:	dd401904 	addi	r21,sp,100
  802dec:	003e0406 	br	802600 <___vfprintf_internal_r+0x4ac>
  802df0:	d9000517 	ldw	r4,20(sp)
  802df4:	0102520e 	bge	zero,r4,803740 <___vfprintf_internal_r+0x15ec>
  802df8:	d9814717 	ldw	r6,1308(sp)
  802dfc:	21807a16 	blt	r4,r6,802fe8 <___vfprintf_internal_r+0xe94>
  802e00:	d8814117 	ldw	r2,1284(sp)
  802e04:	91a5883a 	add	r18,r18,r6
  802e08:	8c400044 	addi	r17,r17,1
  802e0c:	a8800015 	stw	r2,0(r21)
  802e10:	008001c4 	movi	r2,7
  802e14:	a9800115 	stw	r6,4(r21)
  802e18:	dc800e15 	stw	r18,56(sp)
  802e1c:	dc400d15 	stw	r17,52(sp)
  802e20:	1442f616 	blt	r2,r17,8039fc <___vfprintf_internal_r+0x18a8>
  802e24:	a8c00204 	addi	r3,r21,8
  802e28:	d9414717 	ldw	r5,1308(sp)
  802e2c:	2161c83a 	sub	r16,r4,r5
  802e30:	043f9d0e 	bge	zero,r16,802ca8 <___vfprintf_internal_r+0xb54>
  802e34:	00800404 	movi	r2,16
  802e38:	1402130e 	bge	r2,r16,803688 <___vfprintf_internal_r+0x1534>
  802e3c:	dc400d17 	ldw	r17,52(sp)
  802e40:	1027883a 	mov	r19,r2
  802e44:	07002074 	movhi	fp,129
  802e48:	e7022484 	addi	fp,fp,2194
  802e4c:	050001c4 	movi	r20,7
  802e50:	00000306 	br	802e60 <___vfprintf_internal_r+0xd0c>
  802e54:	18c00204 	addi	r3,r3,8
  802e58:	843ffc04 	addi	r16,r16,-16
  802e5c:	9c020d0e 	bge	r19,r16,803694 <___vfprintf_internal_r+0x1540>
  802e60:	94800404 	addi	r18,r18,16
  802e64:	8c400044 	addi	r17,r17,1
  802e68:	1f000015 	stw	fp,0(r3)
  802e6c:	1cc00115 	stw	r19,4(r3)
  802e70:	dc800e15 	stw	r18,56(sp)
  802e74:	dc400d15 	stw	r17,52(sp)
  802e78:	a47ff60e 	bge	r20,r17,802e54 <___vfprintf_internal_r+0xd00>
  802e7c:	d9014f17 	ldw	r4,1340(sp)
  802e80:	b00b883a 	mov	r5,r22
  802e84:	d9800c04 	addi	r6,sp,48
  802e88:	08020fc0 	call	8020fc <__sprint_r>
  802e8c:	103e691e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802e90:	dc800e17 	ldw	r18,56(sp)
  802e94:	dc400d17 	ldw	r17,52(sp)
  802e98:	d8c01904 	addi	r3,sp,100
  802e9c:	003fee06 	br	802e58 <___vfprintf_internal_r+0xd04>
  802ea0:	d8814717 	ldw	r2,1308(sp)
  802ea4:	143fffc4 	addi	r16,r2,-1
  802ea8:	043e970e 	bge	zero,r16,802908 <___vfprintf_internal_r+0x7b4>
  802eac:	00800404 	movi	r2,16
  802eb0:	1400180e 	bge	r2,r16,802f14 <___vfprintf_internal_r+0xdc0>
  802eb4:	1029883a 	mov	r20,r2
  802eb8:	07002074 	movhi	fp,129
  802ebc:	e7022484 	addi	fp,fp,2194
  802ec0:	054001c4 	movi	r21,7
  802ec4:	00000306 	br	802ed4 <___vfprintf_internal_r+0xd80>
  802ec8:	9cc00204 	addi	r19,r19,8
  802ecc:	843ffc04 	addi	r16,r16,-16
  802ed0:	a400120e 	bge	r20,r16,802f1c <___vfprintf_internal_r+0xdc8>
  802ed4:	94800404 	addi	r18,r18,16
  802ed8:	8c400044 	addi	r17,r17,1
  802edc:	9f000015 	stw	fp,0(r19)
  802ee0:	9d000115 	stw	r20,4(r19)
  802ee4:	dc800e15 	stw	r18,56(sp)
  802ee8:	dc400d15 	stw	r17,52(sp)
  802eec:	ac7ff60e 	bge	r21,r17,802ec8 <___vfprintf_internal_r+0xd74>
  802ef0:	d9014f17 	ldw	r4,1340(sp)
  802ef4:	b00b883a 	mov	r5,r22
  802ef8:	d9800c04 	addi	r6,sp,48
  802efc:	08020fc0 	call	8020fc <__sprint_r>
  802f00:	103e4c1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802f04:	dc800e17 	ldw	r18,56(sp)
  802f08:	dc400d17 	ldw	r17,52(sp)
  802f0c:	dcc01904 	addi	r19,sp,100
  802f10:	003fee06 	br	802ecc <___vfprintf_internal_r+0xd78>
  802f14:	07002074 	movhi	fp,129
  802f18:	e7022484 	addi	fp,fp,2194
  802f1c:	9425883a 	add	r18,r18,r16
  802f20:	8c400044 	addi	r17,r17,1
  802f24:	008001c4 	movi	r2,7
  802f28:	9f000015 	stw	fp,0(r19)
  802f2c:	9c000115 	stw	r16,4(r19)
  802f30:	dc800e15 	stw	r18,56(sp)
  802f34:	dc400d15 	stw	r17,52(sp)
  802f38:	147e720e 	bge	r2,r17,802904 <___vfprintf_internal_r+0x7b0>
  802f3c:	d9014f17 	ldw	r4,1340(sp)
  802f40:	b00b883a 	mov	r5,r22
  802f44:	d9800c04 	addi	r6,sp,48
  802f48:	08020fc0 	call	8020fc <__sprint_r>
  802f4c:	103e391e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802f50:	dc800e17 	ldw	r18,56(sp)
  802f54:	dc400d17 	ldw	r17,52(sp)
  802f58:	dcc01904 	addi	r19,sp,100
  802f5c:	003e6a06 	br	802908 <___vfprintf_internal_r+0x7b4>
  802f60:	d9014f17 	ldw	r4,1340(sp)
  802f64:	b00b883a 	mov	r5,r22
  802f68:	d9800c04 	addi	r6,sp,48
  802f6c:	d9c15115 	stw	r7,1348(sp)
  802f70:	08020fc0 	call	8020fc <__sprint_r>
  802f74:	d9c15117 	ldw	r7,1348(sp)
  802f78:	103e2e1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802f7c:	dc800e17 	ldw	r18,56(sp)
  802f80:	dc400d17 	ldw	r17,52(sp)
  802f84:	dd401904 	addi	r21,sp,100
  802f88:	003dba06 	br	802674 <___vfprintf_internal_r+0x520>
  802f8c:	d9014f17 	ldw	r4,1340(sp)
  802f90:	b00b883a 	mov	r5,r22
  802f94:	d9800c04 	addi	r6,sp,48
  802f98:	08020fc0 	call	8020fc <__sprint_r>
  802f9c:	103e251e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802fa0:	dc800e17 	ldw	r18,56(sp)
  802fa4:	dc400d17 	ldw	r17,52(sp)
  802fa8:	dcc01904 	addi	r19,sp,100
  802fac:	003e4206 	br	8028b8 <___vfprintf_internal_r+0x764>
  802fb0:	d9014f17 	ldw	r4,1340(sp)
  802fb4:	b00b883a 	mov	r5,r22
  802fb8:	d9800c04 	addi	r6,sp,48
  802fbc:	08020fc0 	call	8020fc <__sprint_r>
  802fc0:	103e1c1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  802fc4:	dc800e17 	ldw	r18,56(sp)
  802fc8:	dc400d17 	ldw	r17,52(sp)
  802fcc:	d8c01904 	addi	r3,sp,100
  802fd0:	003e2e06 	br	80288c <___vfprintf_internal_r+0x738>
  802fd4:	d9414c17 	ldw	r5,1328(sp)
  802fd8:	2880004c 	andi	r2,r5,1
  802fdc:	1005003a 	cmpeq	r2,r2,zero
  802fe0:	103dda1e 	bne	r2,zero,80274c <___vfprintf_internal_r+0x5f8>
  802fe4:	003e9f06 	br	802a64 <___vfprintf_internal_r+0x910>
  802fe8:	d8c14117 	ldw	r3,1284(sp)
  802fec:	9125883a 	add	r18,r18,r4
  802ff0:	8c400044 	addi	r17,r17,1
  802ff4:	008001c4 	movi	r2,7
  802ff8:	a8c00015 	stw	r3,0(r21)
  802ffc:	a9000115 	stw	r4,4(r21)
  803000:	dc800e15 	stw	r18,56(sp)
  803004:	dc400d15 	stw	r17,52(sp)
  803008:	14426616 	blt	r2,r17,8039a4 <___vfprintf_internal_r+0x1850>
  80300c:	a8c00204 	addi	r3,r21,8
  803010:	d9414917 	ldw	r5,1316(sp)
  803014:	00800044 	movi	r2,1
  803018:	94800044 	addi	r18,r18,1
  80301c:	8c400044 	addi	r17,r17,1
  803020:	18800115 	stw	r2,4(r3)
  803024:	008001c4 	movi	r2,7
  803028:	19400015 	stw	r5,0(r3)
  80302c:	dc800e15 	stw	r18,56(sp)
  803030:	dc400d15 	stw	r17,52(sp)
  803034:	2021883a 	mov	r16,r4
  803038:	14425016 	blt	r2,r17,80397c <___vfprintf_internal_r+0x1828>
  80303c:	19400204 	addi	r5,r3,8
  803040:	d9814717 	ldw	r6,1308(sp)
  803044:	8c400044 	addi	r17,r17,1
  803048:	dc400d15 	stw	r17,52(sp)
  80304c:	3107c83a 	sub	r3,r6,r4
  803050:	d9014117 	ldw	r4,1284(sp)
  803054:	90e5883a 	add	r18,r18,r3
  803058:	28c00115 	stw	r3,4(r5)
  80305c:	8105883a 	add	r2,r16,r4
  803060:	28800015 	stw	r2,0(r5)
  803064:	008001c4 	movi	r2,7
  803068:	dc800e15 	stw	r18,56(sp)
  80306c:	147f1d16 	blt	r2,r17,802ce4 <___vfprintf_internal_r+0xb90>
  803070:	28c00204 	addi	r3,r5,8
  803074:	003db506 	br	80274c <___vfprintf_internal_r+0x5f8>
  803078:	3c000017 	ldw	r16,0(r7)
  80307c:	3c400117 	ldw	r17,4(r7)
  803080:	39800204 	addi	r6,r7,8
  803084:	01000044 	movi	r4,1
  803088:	d9814015 	stw	r6,1280(sp)
  80308c:	d8000405 	stb	zero,16(sp)
  803090:	003ebe06 	br	802b8c <___vfprintf_internal_r+0xa38>
  803094:	3c000017 	ldw	r16,0(r7)
  803098:	3c400117 	ldw	r17,4(r7)
  80309c:	38800204 	addi	r2,r7,8
  8030a0:	d8814015 	stw	r2,1280(sp)
  8030a4:	003eb706 	br	802b84 <___vfprintf_internal_r+0xa30>
  8030a8:	3c000017 	ldw	r16,0(r7)
  8030ac:	3c400117 	ldw	r17,4(r7)
  8030b0:	39000204 	addi	r4,r7,8
  8030b4:	d9014015 	stw	r4,1280(sp)
  8030b8:	0009883a 	mov	r4,zero
  8030bc:	d8000405 	stb	zero,16(sp)
  8030c0:	003eb206 	br	802b8c <___vfprintf_internal_r+0xa38>
  8030c4:	38c00017 	ldw	r3,0(r7)
  8030c8:	39c00104 	addi	r7,r7,4
  8030cc:	d8c14a15 	stw	r3,1320(sp)
  8030d0:	1800d10e 	bge	r3,zero,803418 <___vfprintf_internal_r+0x12c4>
  8030d4:	00c7c83a 	sub	r3,zero,r3
  8030d8:	d8c14a15 	stw	r3,1320(sp)
  8030dc:	d9014c17 	ldw	r4,1328(sp)
  8030e0:	b8c00007 	ldb	r3,0(r23)
  8030e4:	21000114 	ori	r4,r4,4
  8030e8:	d9014c15 	stw	r4,1328(sp)
  8030ec:	003c9806 	br	802350 <___vfprintf_internal_r+0x1fc>
  8030f0:	d9814c17 	ldw	r6,1328(sp)
  8030f4:	3080080c 	andi	r2,r6,32
  8030f8:	1001f026 	beq	r2,zero,8038bc <___vfprintf_internal_r+0x1768>
  8030fc:	d9014b17 	ldw	r4,1324(sp)
  803100:	38800017 	ldw	r2,0(r7)
  803104:	39c00104 	addi	r7,r7,4
  803108:	d9c14015 	stw	r7,1280(sp)
  80310c:	2007d7fa 	srai	r3,r4,31
  803110:	d9c14017 	ldw	r7,1280(sp)
  803114:	11000015 	stw	r4,0(r2)
  803118:	10c00115 	stw	r3,4(r2)
  80311c:	003c6906 	br	8022c4 <___vfprintf_internal_r+0x170>
  803120:	b8c00007 	ldb	r3,0(r23)
  803124:	00801b04 	movi	r2,108
  803128:	18824f26 	beq	r3,r2,803a68 <___vfprintf_internal_r+0x1914>
  80312c:	d9414c17 	ldw	r5,1328(sp)
  803130:	29400414 	ori	r5,r5,16
  803134:	d9414c15 	stw	r5,1328(sp)
  803138:	003c8506 	br	802350 <___vfprintf_internal_r+0x1fc>
  80313c:	d9814c17 	ldw	r6,1328(sp)
  803140:	b8c00007 	ldb	r3,0(r23)
  803144:	31800814 	ori	r6,r6,32
  803148:	d9814c15 	stw	r6,1328(sp)
  80314c:	003c8006 	br	802350 <___vfprintf_internal_r+0x1fc>
  803150:	d8814c17 	ldw	r2,1328(sp)
  803154:	3c000017 	ldw	r16,0(r7)
  803158:	00c01e04 	movi	r3,120
  80315c:	10800094 	ori	r2,r2,2
  803160:	d8814c15 	stw	r2,1328(sp)
  803164:	39c00104 	addi	r7,r7,4
  803168:	01402074 	movhi	r5,129
  80316c:	29420d04 	addi	r5,r5,2100
  803170:	00800c04 	movi	r2,48
  803174:	0023883a 	mov	r17,zero
  803178:	01000084 	movi	r4,2
  80317c:	d9c14015 	stw	r7,1280(sp)
  803180:	d8c14d15 	stw	r3,1332(sp)
  803184:	d9414415 	stw	r5,1296(sp)
  803188:	d8800445 	stb	r2,17(sp)
  80318c:	d8c00485 	stb	r3,18(sp)
  803190:	d8000405 	stb	zero,16(sp)
  803194:	003e7d06 	br	802b8c <___vfprintf_internal_r+0xa38>
  803198:	d8814c17 	ldw	r2,1328(sp)
  80319c:	b8c00007 	ldb	r3,0(r23)
  8031a0:	10801014 	ori	r2,r2,64
  8031a4:	d8814c15 	stw	r2,1328(sp)
  8031a8:	003c6906 	br	802350 <___vfprintf_internal_r+0x1fc>
  8031ac:	d9414c17 	ldw	r5,1328(sp)
  8031b0:	2880020c 	andi	r2,r5,8
  8031b4:	1001df26 	beq	r2,zero,803934 <___vfprintf_internal_r+0x17e0>
  8031b8:	39800017 	ldw	r6,0(r7)
  8031bc:	38800204 	addi	r2,r7,8
  8031c0:	d8814015 	stw	r2,1280(sp)
  8031c4:	d9814215 	stw	r6,1288(sp)
  8031c8:	39c00117 	ldw	r7,4(r7)
  8031cc:	d9c14315 	stw	r7,1292(sp)
  8031d0:	d9014217 	ldw	r4,1288(sp)
  8031d4:	d9414317 	ldw	r5,1292(sp)
  8031d8:	08085800 	call	808580 <__isinfd>
  8031dc:	10021726 	beq	r2,zero,803a3c <___vfprintf_internal_r+0x18e8>
  8031e0:	d9014217 	ldw	r4,1288(sp)
  8031e4:	d9414317 	ldw	r5,1292(sp)
  8031e8:	000d883a 	mov	r6,zero
  8031ec:	000f883a 	mov	r7,zero
  8031f0:	080b9c80 	call	80b9c8 <__ltdf2>
  8031f4:	1002ca16 	blt	r2,zero,803d20 <___vfprintf_internal_r+0x1bcc>
  8031f8:	d9414d17 	ldw	r5,1332(sp)
  8031fc:	008011c4 	movi	r2,71
  803200:	11420a16 	blt	r2,r5,803a2c <___vfprintf_internal_r+0x18d8>
  803204:	01802074 	movhi	r6,129
  803208:	31821204 	addi	r6,r6,2120
  80320c:	d9814115 	stw	r6,1284(sp)
  803210:	d9014c17 	ldw	r4,1328(sp)
  803214:	00c000c4 	movi	r3,3
  803218:	00bfdfc4 	movi	r2,-129
  80321c:	2088703a 	and	r4,r4,r2
  803220:	180f883a 	mov	r7,r3
  803224:	d8c14515 	stw	r3,1300(sp)
  803228:	d9014c15 	stw	r4,1328(sp)
  80322c:	d8014615 	stw	zero,1304(sp)
  803230:	003e6a06 	br	802bdc <___vfprintf_internal_r+0xa88>
  803234:	38800017 	ldw	r2,0(r7)
  803238:	00c00044 	movi	r3,1
  80323c:	39c00104 	addi	r7,r7,4
  803240:	d9c14015 	stw	r7,1280(sp)
  803244:	d9000f04 	addi	r4,sp,60
  803248:	180f883a 	mov	r7,r3
  80324c:	d8c14515 	stw	r3,1300(sp)
  803250:	d9014115 	stw	r4,1284(sp)
  803254:	d8800f05 	stb	r2,60(sp)
  803258:	d8000405 	stb	zero,16(sp)
  80325c:	003cac06 	br	802510 <___vfprintf_internal_r+0x3bc>
  803260:	01402074 	movhi	r5,129
  803264:	29421804 	addi	r5,r5,2144
  803268:	d9414415 	stw	r5,1296(sp)
  80326c:	d9814c17 	ldw	r6,1328(sp)
  803270:	3080080c 	andi	r2,r6,32
  803274:	1000f926 	beq	r2,zero,80365c <___vfprintf_internal_r+0x1508>
  803278:	3c000017 	ldw	r16,0(r7)
  80327c:	3c400117 	ldw	r17,4(r7)
  803280:	38800204 	addi	r2,r7,8
  803284:	d8814015 	stw	r2,1280(sp)
  803288:	d9414c17 	ldw	r5,1328(sp)
  80328c:	2880004c 	andi	r2,r5,1
  803290:	1005003a 	cmpeq	r2,r2,zero
  803294:	1000b31e 	bne	r2,zero,803564 <___vfprintf_internal_r+0x1410>
  803298:	8444b03a 	or	r2,r16,r17
  80329c:	1000b126 	beq	r2,zero,803564 <___vfprintf_internal_r+0x1410>
  8032a0:	d9814d17 	ldw	r6,1332(sp)
  8032a4:	29400094 	ori	r5,r5,2
  8032a8:	00800c04 	movi	r2,48
  8032ac:	01000084 	movi	r4,2
  8032b0:	d9414c15 	stw	r5,1328(sp)
  8032b4:	d8800445 	stb	r2,17(sp)
  8032b8:	d9800485 	stb	r6,18(sp)
  8032bc:	d8000405 	stb	zero,16(sp)
  8032c0:	003e3206 	br	802b8c <___vfprintf_internal_r+0xa38>
  8032c4:	01802074 	movhi	r6,129
  8032c8:	31820d04 	addi	r6,r6,2100
  8032cc:	d9814415 	stw	r6,1296(sp)
  8032d0:	003fe606 	br	80326c <___vfprintf_internal_r+0x1118>
  8032d4:	00800ac4 	movi	r2,43
  8032d8:	d8800405 	stb	r2,16(sp)
  8032dc:	b8c00007 	ldb	r3,0(r23)
  8032e0:	003c1b06 	br	802350 <___vfprintf_internal_r+0x1fc>
  8032e4:	d8814c17 	ldw	r2,1328(sp)
  8032e8:	b8c00007 	ldb	r3,0(r23)
  8032ec:	10800054 	ori	r2,r2,1
  8032f0:	d8814c15 	stw	r2,1328(sp)
  8032f4:	003c1606 	br	802350 <___vfprintf_internal_r+0x1fc>
  8032f8:	d8800407 	ldb	r2,16(sp)
  8032fc:	1000461e 	bne	r2,zero,803418 <___vfprintf_internal_r+0x12c4>
  803300:	00800804 	movi	r2,32
  803304:	d8800405 	stb	r2,16(sp)
  803308:	b8c00007 	ldb	r3,0(r23)
  80330c:	003c1006 	br	802350 <___vfprintf_internal_r+0x1fc>
  803310:	d9814c17 	ldw	r6,1328(sp)
  803314:	b8c00007 	ldb	r3,0(r23)
  803318:	31800214 	ori	r6,r6,8
  80331c:	d9814c15 	stw	r6,1328(sp)
  803320:	003c0b06 	br	802350 <___vfprintf_internal_r+0x1fc>
  803324:	0007883a 	mov	r3,zero
  803328:	01000244 	movi	r4,9
  80332c:	188002a4 	muli	r2,r3,10
  803330:	b8c00007 	ldb	r3,0(r23)
  803334:	d9814d17 	ldw	r6,1332(sp)
  803338:	bdc00044 	addi	r23,r23,1
  80333c:	d8c14d15 	stw	r3,1332(sp)
  803340:	d9414d17 	ldw	r5,1332(sp)
  803344:	3085883a 	add	r2,r6,r2
  803348:	10fff404 	addi	r3,r2,-48
  80334c:	28bff404 	addi	r2,r5,-48
  803350:	20bff62e 	bgeu	r4,r2,80332c <___vfprintf_internal_r+0x11d8>
  803354:	d8c14a15 	stw	r3,1320(sp)
  803358:	003bff06 	br	802358 <___vfprintf_internal_r+0x204>
  80335c:	d9414c17 	ldw	r5,1328(sp)
  803360:	b8c00007 	ldb	r3,0(r23)
  803364:	29402014 	ori	r5,r5,128
  803368:	d9414c15 	stw	r5,1328(sp)
  80336c:	003bf806 	br	802350 <___vfprintf_internal_r+0x1fc>
  803370:	b8c00007 	ldb	r3,0(r23)
  803374:	00800a84 	movi	r2,42
  803378:	bdc00044 	addi	r23,r23,1
  80337c:	18831526 	beq	r3,r2,803fd4 <___vfprintf_internal_r+0x1e80>
  803380:	d8c14d15 	stw	r3,1332(sp)
  803384:	18bff404 	addi	r2,r3,-48
  803388:	00c00244 	movi	r3,9
  80338c:	18827836 	bltu	r3,r2,803d70 <___vfprintf_internal_r+0x1c1c>
  803390:	000d883a 	mov	r6,zero
  803394:	308002a4 	muli	r2,r6,10
  803398:	b9800007 	ldb	r6,0(r23)
  80339c:	d9414d17 	ldw	r5,1332(sp)
  8033a0:	bdc00044 	addi	r23,r23,1
  8033a4:	d9814d15 	stw	r6,1332(sp)
  8033a8:	d9014d17 	ldw	r4,1332(sp)
  8033ac:	1145883a 	add	r2,r2,r5
  8033b0:	11bff404 	addi	r6,r2,-48
  8033b4:	20bff404 	addi	r2,r4,-48
  8033b8:	18bff62e 	bgeu	r3,r2,803394 <___vfprintf_internal_r+0x1240>
  8033bc:	3027883a 	mov	r19,r6
  8033c0:	303be50e 	bge	r6,zero,802358 <___vfprintf_internal_r+0x204>
  8033c4:	04ffffc4 	movi	r19,-1
  8033c8:	003be306 	br	802358 <___vfprintf_internal_r+0x204>
  8033cc:	d8000405 	stb	zero,16(sp)
  8033d0:	39800017 	ldw	r6,0(r7)
  8033d4:	39c00104 	addi	r7,r7,4
  8033d8:	d9c14015 	stw	r7,1280(sp)
  8033dc:	d9814115 	stw	r6,1284(sp)
  8033e0:	3001c926 	beq	r6,zero,803b08 <___vfprintf_internal_r+0x19b4>
  8033e4:	98000e16 	blt	r19,zero,803420 <___vfprintf_internal_r+0x12cc>
  8033e8:	d9014117 	ldw	r4,1284(sp)
  8033ec:	000b883a 	mov	r5,zero
  8033f0:	980d883a 	mov	r6,r19
  8033f4:	0806c9c0 	call	806c9c <memchr>
  8033f8:	10025926 	beq	r2,zero,803d60 <___vfprintf_internal_r+0x1c0c>
  8033fc:	d8c14117 	ldw	r3,1284(sp)
  803400:	10cfc83a 	sub	r7,r2,r3
  803404:	99c19e16 	blt	r19,r7,803a80 <___vfprintf_internal_r+0x192c>
  803408:	d9c14515 	stw	r7,1300(sp)
  80340c:	38000916 	blt	r7,zero,803434 <___vfprintf_internal_r+0x12e0>
  803410:	d8014615 	stw	zero,1304(sp)
  803414:	003df106 	br	802bdc <___vfprintf_internal_r+0xa88>
  803418:	b8c00007 	ldb	r3,0(r23)
  80341c:	003bcc06 	br	802350 <___vfprintf_internal_r+0x1fc>
  803420:	d9014117 	ldw	r4,1284(sp)
  803424:	080206c0 	call	80206c <strlen>
  803428:	d8814515 	stw	r2,1300(sp)
  80342c:	100f883a 	mov	r7,r2
  803430:	103ff70e 	bge	r2,zero,803410 <___vfprintf_internal_r+0x12bc>
  803434:	d8014515 	stw	zero,1300(sp)
  803438:	d8014615 	stw	zero,1304(sp)
  80343c:	003de706 	br	802bdc <___vfprintf_internal_r+0xa88>
  803440:	20c03fcc 	andi	r3,r4,255
  803444:	00800044 	movi	r2,1
  803448:	18802d26 	beq	r3,r2,803500 <___vfprintf_internal_r+0x13ac>
  80344c:	18800e36 	bltu	r3,r2,803488 <___vfprintf_internal_r+0x1334>
  803450:	00800084 	movi	r2,2
  803454:	1880fa26 	beq	r3,r2,803840 <___vfprintf_internal_r+0x16ec>
  803458:	01002074 	movhi	r4,129
  80345c:	21021d04 	addi	r4,r4,2164
  803460:	080206c0 	call	80206c <strlen>
  803464:	100f883a 	mov	r7,r2
  803468:	dcc14515 	stw	r19,1300(sp)
  80346c:	9880010e 	bge	r19,r2,803474 <___vfprintf_internal_r+0x1320>
  803470:	d8814515 	stw	r2,1300(sp)
  803474:	00802074 	movhi	r2,129
  803478:	10821d04 	addi	r2,r2,2164
  80347c:	dcc14615 	stw	r19,1304(sp)
  803480:	d8814115 	stw	r2,1284(sp)
  803484:	003dd506 	br	802bdc <___vfprintf_internal_r+0xa88>
  803488:	d9401904 	addi	r5,sp,100
  80348c:	dd000f04 	addi	r20,sp,60
  803490:	d9414115 	stw	r5,1284(sp)
  803494:	880a977a 	slli	r5,r17,29
  803498:	d9814117 	ldw	r6,1284(sp)
  80349c:	8004d0fa 	srli	r2,r16,3
  8034a0:	8806d0fa 	srli	r3,r17,3
  8034a4:	810001cc 	andi	r4,r16,7
  8034a8:	2884b03a 	or	r2,r5,r2
  8034ac:	31bfffc4 	addi	r6,r6,-1
  8034b0:	21000c04 	addi	r4,r4,48
  8034b4:	d9814115 	stw	r6,1284(sp)
  8034b8:	10cab03a 	or	r5,r2,r3
  8034bc:	31000005 	stb	r4,0(r6)
  8034c0:	1021883a 	mov	r16,r2
  8034c4:	1823883a 	mov	r17,r3
  8034c8:	283ff21e 	bne	r5,zero,803494 <___vfprintf_internal_r+0x1340>
  8034cc:	d8c14c17 	ldw	r3,1328(sp)
  8034d0:	1880004c 	andi	r2,r3,1
  8034d4:	1005003a 	cmpeq	r2,r2,zero
  8034d8:	103db91e 	bne	r2,zero,802bc0 <___vfprintf_internal_r+0xa6c>
  8034dc:	20803fcc 	andi	r2,r4,255
  8034e0:	1080201c 	xori	r2,r2,128
  8034e4:	10bfe004 	addi	r2,r2,-128
  8034e8:	00c00c04 	movi	r3,48
  8034ec:	10fdb426 	beq	r2,r3,802bc0 <___vfprintf_internal_r+0xa6c>
  8034f0:	31bfffc4 	addi	r6,r6,-1
  8034f4:	d9814115 	stw	r6,1284(sp)
  8034f8:	30c00005 	stb	r3,0(r6)
  8034fc:	003db006 	br	802bc0 <___vfprintf_internal_r+0xa6c>
  803500:	88800068 	cmpgeui	r2,r17,1
  803504:	10002c1e 	bne	r2,zero,8035b8 <___vfprintf_internal_r+0x1464>
  803508:	8800021e 	bne	r17,zero,803514 <___vfprintf_internal_r+0x13c0>
  80350c:	00800244 	movi	r2,9
  803510:	14002936 	bltu	r2,r16,8035b8 <___vfprintf_internal_r+0x1464>
  803514:	d90018c4 	addi	r4,sp,99
  803518:	dd000f04 	addi	r20,sp,60
  80351c:	d9014115 	stw	r4,1284(sp)
  803520:	d9014117 	ldw	r4,1284(sp)
  803524:	80800c04 	addi	r2,r16,48
  803528:	20800005 	stb	r2,0(r4)
  80352c:	003da406 	br	802bc0 <___vfprintf_internal_r+0xa6c>
  803530:	dc400d17 	ldw	r17,52(sp)
  803534:	07002074 	movhi	fp,129
  803538:	e7022484 	addi	fp,fp,2194
  80353c:	9425883a 	add	r18,r18,r16
  803540:	8c400044 	addi	r17,r17,1
  803544:	008001c4 	movi	r2,7
  803548:	1f000015 	stw	fp,0(r3)
  80354c:	1c000115 	stw	r16,4(r3)
  803550:	dc800e15 	stw	r18,56(sp)
  803554:	dc400d15 	stw	r17,52(sp)
  803558:	147de216 	blt	r2,r17,802ce4 <___vfprintf_internal_r+0xb90>
  80355c:	18c00204 	addi	r3,r3,8
  803560:	003c7a06 	br	80274c <___vfprintf_internal_r+0x5f8>
  803564:	01000084 	movi	r4,2
  803568:	d8000405 	stb	zero,16(sp)
  80356c:	003d8706 	br	802b8c <___vfprintf_internal_r+0xa38>
  803570:	d9814c17 	ldw	r6,1328(sp)
  803574:	30c4703a 	and	r2,r6,r3
  803578:	1005003a 	cmpeq	r2,r2,zero
  80357c:	103cb926 	beq	r2,zero,802864 <___vfprintf_internal_r+0x710>
  803580:	d9014117 	ldw	r4,1284(sp)
  803584:	94800044 	addi	r18,r18,1
  803588:	8c400044 	addi	r17,r17,1
  80358c:	008001c4 	movi	r2,7
  803590:	a9000015 	stw	r4,0(r21)
  803594:	a8c00115 	stw	r3,4(r21)
  803598:	dc800e15 	stw	r18,56(sp)
  80359c:	dc400d15 	stw	r17,52(sp)
  8035a0:	147e6616 	blt	r2,r17,802f3c <___vfprintf_internal_r+0xde8>
  8035a4:	acc00204 	addi	r19,r21,8
  8035a8:	003cd706 	br	802908 <___vfprintf_internal_r+0x7b4>
  8035ac:	07002074 	movhi	fp,129
  8035b0:	e7022484 	addi	fp,fp,2194
  8035b4:	003c4f06 	br	8026f4 <___vfprintf_internal_r+0x5a0>
  8035b8:	dd000f04 	addi	r20,sp,60
  8035bc:	dc801904 	addi	r18,sp,100
  8035c0:	8009883a 	mov	r4,r16
  8035c4:	880b883a 	mov	r5,r17
  8035c8:	01800284 	movi	r6,10
  8035cc:	000f883a 	mov	r7,zero
  8035d0:	080a6d80 	call	80a6d8 <__umoddi3>
  8035d4:	12000c04 	addi	r8,r2,48
  8035d8:	94bfffc4 	addi	r18,r18,-1
  8035dc:	8009883a 	mov	r4,r16
  8035e0:	880b883a 	mov	r5,r17
  8035e4:	01800284 	movi	r6,10
  8035e8:	000f883a 	mov	r7,zero
  8035ec:	92000005 	stb	r8,0(r18)
  8035f0:	080a0fc0 	call	80a0fc <__udivdi3>
  8035f4:	1009883a 	mov	r4,r2
  8035f8:	1021883a 	mov	r16,r2
  8035fc:	18800068 	cmpgeui	r2,r3,1
  803600:	1823883a 	mov	r17,r3
  803604:	103fee1e 	bne	r2,zero,8035c0 <___vfprintf_internal_r+0x146c>
  803608:	1800021e 	bne	r3,zero,803614 <___vfprintf_internal_r+0x14c0>
  80360c:	00800244 	movi	r2,9
  803610:	113feb36 	bltu	r2,r4,8035c0 <___vfprintf_internal_r+0x146c>
  803614:	94bfffc4 	addi	r18,r18,-1
  803618:	dc814115 	stw	r18,1284(sp)
  80361c:	003fc006 	br	803520 <___vfprintf_internal_r+0x13cc>
  803620:	d9014c17 	ldw	r4,1328(sp)
  803624:	2080004c 	andi	r2,r4,1
  803628:	10009a1e 	bne	r2,zero,803894 <___vfprintf_internal_r+0x1740>
  80362c:	d9401904 	addi	r5,sp,100
  803630:	dd000f04 	addi	r20,sp,60
  803634:	d9414115 	stw	r5,1284(sp)
  803638:	003d6106 	br	802bc0 <___vfprintf_internal_r+0xa6c>
  80363c:	d9014f17 	ldw	r4,1340(sp)
  803640:	b00b883a 	mov	r5,r22
  803644:	d9800c04 	addi	r6,sp,48
  803648:	08020fc0 	call	8020fc <__sprint_r>
  80364c:	103c791e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  803650:	dc800e17 	ldw	r18,56(sp)
  803654:	d8c01904 	addi	r3,sp,100
  803658:	003cff06 	br	802a58 <___vfprintf_internal_r+0x904>
  80365c:	d8c14c17 	ldw	r3,1328(sp)
  803660:	1880040c 	andi	r2,r3,16
  803664:	1000711e 	bne	r2,zero,80382c <___vfprintf_internal_r+0x16d8>
  803668:	d9014c17 	ldw	r4,1328(sp)
  80366c:	2080100c 	andi	r2,r4,64
  803670:	10006e26 	beq	r2,zero,80382c <___vfprintf_internal_r+0x16d8>
  803674:	3c00000b 	ldhu	r16,0(r7)
  803678:	0023883a 	mov	r17,zero
  80367c:	39c00104 	addi	r7,r7,4
  803680:	d9c14015 	stw	r7,1280(sp)
  803684:	003f0006 	br	803288 <___vfprintf_internal_r+0x1134>
  803688:	dc400d17 	ldw	r17,52(sp)
  80368c:	07002074 	movhi	fp,129
  803690:	e7022484 	addi	fp,fp,2194
  803694:	9425883a 	add	r18,r18,r16
  803698:	8c400044 	addi	r17,r17,1
  80369c:	008001c4 	movi	r2,7
  8036a0:	1f000015 	stw	fp,0(r3)
  8036a4:	1c000115 	stw	r16,4(r3)
  8036a8:	dc800e15 	stw	r18,56(sp)
  8036ac:	dc400d15 	stw	r17,52(sp)
  8036b0:	147d7616 	blt	r2,r17,802c8c <___vfprintf_internal_r+0xb38>
  8036b4:	18c00204 	addi	r3,r3,8
  8036b8:	003d7b06 	br	802ca8 <___vfprintf_internal_r+0xb54>
  8036bc:	dc800e17 	ldw	r18,56(sp)
  8036c0:	dc400d17 	ldw	r17,52(sp)
  8036c4:	07002074 	movhi	fp,129
  8036c8:	e7022884 	addi	fp,fp,2210
  8036cc:	003bc006 	br	8025d0 <___vfprintf_internal_r+0x47c>
  8036d0:	d9014f17 	ldw	r4,1340(sp)
  8036d4:	b00b883a 	mov	r5,r22
  8036d8:	d9800c04 	addi	r6,sp,48
  8036dc:	08020fc0 	call	8020fc <__sprint_r>
  8036e0:	103c541e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8036e4:	dc800e17 	ldw	r18,56(sp)
  8036e8:	d8c01904 	addi	r3,sp,100
  8036ec:	003ce906 	br	802a94 <___vfprintf_internal_r+0x940>
  8036f0:	3c000017 	ldw	r16,0(r7)
  8036f4:	0009883a 	mov	r4,zero
  8036f8:	39c00104 	addi	r7,r7,4
  8036fc:	0023883a 	mov	r17,zero
  803700:	d9c14015 	stw	r7,1280(sp)
  803704:	d8000405 	stb	zero,16(sp)
  803708:	003d2006 	br	802b8c <___vfprintf_internal_r+0xa38>
  80370c:	38800017 	ldw	r2,0(r7)
  803710:	39c00104 	addi	r7,r7,4
  803714:	d9c14015 	stw	r7,1280(sp)
  803718:	1023d7fa 	srai	r17,r2,31
  80371c:	1021883a 	mov	r16,r2
  803720:	003d1806 	br	802b84 <___vfprintf_internal_r+0xa30>
  803724:	3c000017 	ldw	r16,0(r7)
  803728:	01000044 	movi	r4,1
  80372c:	39c00104 	addi	r7,r7,4
  803730:	0023883a 	mov	r17,zero
  803734:	d9c14015 	stw	r7,1280(sp)
  803738:	d8000405 	stb	zero,16(sp)
  80373c:	003d1306 	br	802b8c <___vfprintf_internal_r+0xa38>
  803740:	00802074 	movhi	r2,129
  803744:	10822404 	addi	r2,r2,2192
  803748:	94800044 	addi	r18,r18,1
  80374c:	8c400044 	addi	r17,r17,1
  803750:	a8800015 	stw	r2,0(r21)
  803754:	00c00044 	movi	r3,1
  803758:	008001c4 	movi	r2,7
  80375c:	a8c00115 	stw	r3,4(r21)
  803760:	dc800e15 	stw	r18,56(sp)
  803764:	dc400d15 	stw	r17,52(sp)
  803768:	1440ca16 	blt	r2,r17,803a94 <___vfprintf_internal_r+0x1940>
  80376c:	a8c00204 	addi	r3,r21,8
  803770:	2000061e 	bne	r4,zero,80378c <___vfprintf_internal_r+0x1638>
  803774:	d9414717 	ldw	r5,1308(sp)
  803778:	2800041e 	bne	r5,zero,80378c <___vfprintf_internal_r+0x1638>
  80377c:	d9814c17 	ldw	r6,1328(sp)
  803780:	3080004c 	andi	r2,r6,1
  803784:	1005003a 	cmpeq	r2,r2,zero
  803788:	103bf01e 	bne	r2,zero,80274c <___vfprintf_internal_r+0x5f8>
  80378c:	00800044 	movi	r2,1
  803790:	dc400d17 	ldw	r17,52(sp)
  803794:	18800115 	stw	r2,4(r3)
  803798:	d8814917 	ldw	r2,1316(sp)
  80379c:	94800044 	addi	r18,r18,1
  8037a0:	8c400044 	addi	r17,r17,1
  8037a4:	18800015 	stw	r2,0(r3)
  8037a8:	008001c4 	movi	r2,7
  8037ac:	dc800e15 	stw	r18,56(sp)
  8037b0:	dc400d15 	stw	r17,52(sp)
  8037b4:	1440ca16 	blt	r2,r17,803ae0 <___vfprintf_internal_r+0x198c>
  8037b8:	18c00204 	addi	r3,r3,8
  8037bc:	0121c83a 	sub	r16,zero,r4
  8037c0:	0400500e 	bge	zero,r16,803904 <___vfprintf_internal_r+0x17b0>
  8037c4:	00800404 	movi	r2,16
  8037c8:	1400800e 	bge	r2,r16,8039cc <___vfprintf_internal_r+0x1878>
  8037cc:	1027883a 	mov	r19,r2
  8037d0:	07002074 	movhi	fp,129
  8037d4:	e7022484 	addi	fp,fp,2194
  8037d8:	050001c4 	movi	r20,7
  8037dc:	00000306 	br	8037ec <___vfprintf_internal_r+0x1698>
  8037e0:	18c00204 	addi	r3,r3,8
  8037e4:	843ffc04 	addi	r16,r16,-16
  8037e8:	9c007a0e 	bge	r19,r16,8039d4 <___vfprintf_internal_r+0x1880>
  8037ec:	94800404 	addi	r18,r18,16
  8037f0:	8c400044 	addi	r17,r17,1
  8037f4:	1f000015 	stw	fp,0(r3)
  8037f8:	1cc00115 	stw	r19,4(r3)
  8037fc:	dc800e15 	stw	r18,56(sp)
  803800:	dc400d15 	stw	r17,52(sp)
  803804:	a47ff60e 	bge	r20,r17,8037e0 <___vfprintf_internal_r+0x168c>
  803808:	d9014f17 	ldw	r4,1340(sp)
  80380c:	b00b883a 	mov	r5,r22
  803810:	d9800c04 	addi	r6,sp,48
  803814:	08020fc0 	call	8020fc <__sprint_r>
  803818:	103c061e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  80381c:	dc800e17 	ldw	r18,56(sp)
  803820:	dc400d17 	ldw	r17,52(sp)
  803824:	d8c01904 	addi	r3,sp,100
  803828:	003fee06 	br	8037e4 <___vfprintf_internal_r+0x1690>
  80382c:	3c000017 	ldw	r16,0(r7)
  803830:	0023883a 	mov	r17,zero
  803834:	39c00104 	addi	r7,r7,4
  803838:	d9c14015 	stw	r7,1280(sp)
  80383c:	003e9206 	br	803288 <___vfprintf_internal_r+0x1134>
  803840:	d9401904 	addi	r5,sp,100
  803844:	dd000f04 	addi	r20,sp,60
  803848:	d9414115 	stw	r5,1284(sp)
  80384c:	d9814417 	ldw	r6,1296(sp)
  803850:	880a973a 	slli	r5,r17,28
  803854:	8004d13a 	srli	r2,r16,4
  803858:	810003cc 	andi	r4,r16,15
  80385c:	3109883a 	add	r4,r6,r4
  803860:	2884b03a 	or	r2,r5,r2
  803864:	21400003 	ldbu	r5,0(r4)
  803868:	d9014117 	ldw	r4,1284(sp)
  80386c:	8806d13a 	srli	r3,r17,4
  803870:	1021883a 	mov	r16,r2
  803874:	213fffc4 	addi	r4,r4,-1
  803878:	d9014115 	stw	r4,1284(sp)
  80387c:	d9814117 	ldw	r6,1284(sp)
  803880:	10c8b03a 	or	r4,r2,r3
  803884:	1823883a 	mov	r17,r3
  803888:	31400005 	stb	r5,0(r6)
  80388c:	203fef1e 	bne	r4,zero,80384c <___vfprintf_internal_r+0x16f8>
  803890:	003ccb06 	br	802bc0 <___vfprintf_internal_r+0xa6c>
  803894:	00800c04 	movi	r2,48
  803898:	d98018c4 	addi	r6,sp,99
  80389c:	dd000f04 	addi	r20,sp,60
  8038a0:	d88018c5 	stb	r2,99(sp)
  8038a4:	d9814115 	stw	r6,1284(sp)
  8038a8:	003cc506 	br	802bc0 <___vfprintf_internal_r+0xa6c>
  8038ac:	dc400d17 	ldw	r17,52(sp)
  8038b0:	07002074 	movhi	fp,129
  8038b4:	e7022884 	addi	fp,fp,2210
  8038b8:	003bc706 	br	8027d8 <___vfprintf_internal_r+0x684>
  8038bc:	d9414c17 	ldw	r5,1328(sp)
  8038c0:	2880040c 	andi	r2,r5,16
  8038c4:	10007c26 	beq	r2,zero,803ab8 <___vfprintf_internal_r+0x1964>
  8038c8:	38800017 	ldw	r2,0(r7)
  8038cc:	39c00104 	addi	r7,r7,4
  8038d0:	d9c14015 	stw	r7,1280(sp)
  8038d4:	d9814b17 	ldw	r6,1324(sp)
  8038d8:	d9c14017 	ldw	r7,1280(sp)
  8038dc:	11800015 	stw	r6,0(r2)
  8038e0:	003a7806 	br	8022c4 <___vfprintf_internal_r+0x170>
  8038e4:	d9014f17 	ldw	r4,1340(sp)
  8038e8:	b00b883a 	mov	r5,r22
  8038ec:	d9800c04 	addi	r6,sp,48
  8038f0:	08020fc0 	call	8020fc <__sprint_r>
  8038f4:	103bcf1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8038f8:	dc800e17 	ldw	r18,56(sp)
  8038fc:	dc400d17 	ldw	r17,52(sp)
  803900:	d8c01904 	addi	r3,sp,100
  803904:	d9014717 	ldw	r4,1308(sp)
  803908:	d9414117 	ldw	r5,1284(sp)
  80390c:	8c400044 	addi	r17,r17,1
  803910:	9125883a 	add	r18,r18,r4
  803914:	008001c4 	movi	r2,7
  803918:	19400015 	stw	r5,0(r3)
  80391c:	19000115 	stw	r4,4(r3)
  803920:	dc800e15 	stw	r18,56(sp)
  803924:	dc400d15 	stw	r17,52(sp)
  803928:	147cee16 	blt	r2,r17,802ce4 <___vfprintf_internal_r+0xb90>
  80392c:	18c00204 	addi	r3,r3,8
  803930:	003b8606 	br	80274c <___vfprintf_internal_r+0x5f8>
  803934:	38c00017 	ldw	r3,0(r7)
  803938:	39000204 	addi	r4,r7,8
  80393c:	d9014015 	stw	r4,1280(sp)
  803940:	d8c14215 	stw	r3,1288(sp)
  803944:	39c00117 	ldw	r7,4(r7)
  803948:	d9c14315 	stw	r7,1292(sp)
  80394c:	003e2006 	br	8031d0 <___vfprintf_internal_r+0x107c>
  803950:	0005883a 	mov	r2,zero
  803954:	1409c83a 	sub	r4,r2,r16
  803958:	1105803a 	cmpltu	r2,r2,r4
  80395c:	044bc83a 	sub	r5,zero,r17
  803960:	2885c83a 	sub	r2,r5,r2
  803964:	2021883a 	mov	r16,r4
  803968:	1023883a 	mov	r17,r2
  80396c:	01000044 	movi	r4,1
  803970:	00800b44 	movi	r2,45
  803974:	d8800405 	stb	r2,16(sp)
  803978:	003c8406 	br	802b8c <___vfprintf_internal_r+0xa38>
  80397c:	d9014f17 	ldw	r4,1340(sp)
  803980:	b00b883a 	mov	r5,r22
  803984:	d9800c04 	addi	r6,sp,48
  803988:	08020fc0 	call	8020fc <__sprint_r>
  80398c:	103ba91e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  803990:	dc800e17 	ldw	r18,56(sp)
  803994:	dc400d17 	ldw	r17,52(sp)
  803998:	d9000517 	ldw	r4,20(sp)
  80399c:	d9401904 	addi	r5,sp,100
  8039a0:	003da706 	br	803040 <___vfprintf_internal_r+0xeec>
  8039a4:	d9014f17 	ldw	r4,1340(sp)
  8039a8:	b00b883a 	mov	r5,r22
  8039ac:	d9800c04 	addi	r6,sp,48
  8039b0:	08020fc0 	call	8020fc <__sprint_r>
  8039b4:	103b9f1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  8039b8:	dc800e17 	ldw	r18,56(sp)
  8039bc:	dc400d17 	ldw	r17,52(sp)
  8039c0:	d9000517 	ldw	r4,20(sp)
  8039c4:	d8c01904 	addi	r3,sp,100
  8039c8:	003d9106 	br	803010 <___vfprintf_internal_r+0xebc>
  8039cc:	07002074 	movhi	fp,129
  8039d0:	e7022484 	addi	fp,fp,2194
  8039d4:	9425883a 	add	r18,r18,r16
  8039d8:	8c400044 	addi	r17,r17,1
  8039dc:	008001c4 	movi	r2,7
  8039e0:	1f000015 	stw	fp,0(r3)
  8039e4:	1c000115 	stw	r16,4(r3)
  8039e8:	dc800e15 	stw	r18,56(sp)
  8039ec:	dc400d15 	stw	r17,52(sp)
  8039f0:	147fbc16 	blt	r2,r17,8038e4 <___vfprintf_internal_r+0x1790>
  8039f4:	18c00204 	addi	r3,r3,8
  8039f8:	003fc206 	br	803904 <___vfprintf_internal_r+0x17b0>
  8039fc:	d9014f17 	ldw	r4,1340(sp)
  803a00:	b00b883a 	mov	r5,r22
  803a04:	d9800c04 	addi	r6,sp,48
  803a08:	08020fc0 	call	8020fc <__sprint_r>
  803a0c:	103b891e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  803a10:	dc800e17 	ldw	r18,56(sp)
  803a14:	d9000517 	ldw	r4,20(sp)
  803a18:	d8c01904 	addi	r3,sp,100
  803a1c:	003d0206 	br	802e28 <___vfprintf_internal_r+0xcd4>
  803a20:	07002074 	movhi	fp,129
  803a24:	e7022484 	addi	fp,fp,2194
  803a28:	003be406 	br	8029bc <___vfprintf_internal_r+0x868>
  803a2c:	00802074 	movhi	r2,129
  803a30:	10821304 	addi	r2,r2,2124
  803a34:	d8814115 	stw	r2,1284(sp)
  803a38:	003df506 	br	803210 <___vfprintf_internal_r+0x10bc>
  803a3c:	d9014217 	ldw	r4,1288(sp)
  803a40:	d9414317 	ldw	r5,1292(sp)
  803a44:	08085c00 	call	8085c0 <__isnand>
  803a48:	10003926 	beq	r2,zero,803b30 <___vfprintf_internal_r+0x19dc>
  803a4c:	d9414d17 	ldw	r5,1332(sp)
  803a50:	008011c4 	movi	r2,71
  803a54:	1140ce16 	blt	r2,r5,803d90 <___vfprintf_internal_r+0x1c3c>
  803a58:	01802074 	movhi	r6,129
  803a5c:	31821404 	addi	r6,r6,2128
  803a60:	d9814115 	stw	r6,1284(sp)
  803a64:	003dea06 	br	803210 <___vfprintf_internal_r+0x10bc>
  803a68:	d9014c17 	ldw	r4,1328(sp)
  803a6c:	bdc00044 	addi	r23,r23,1
  803a70:	b8c00007 	ldb	r3,0(r23)
  803a74:	21000814 	ori	r4,r4,32
  803a78:	d9014c15 	stw	r4,1328(sp)
  803a7c:	003a3406 	br	802350 <___vfprintf_internal_r+0x1fc>
  803a80:	dcc14515 	stw	r19,1300(sp)
  803a84:	98011016 	blt	r19,zero,803ec8 <___vfprintf_internal_r+0x1d74>
  803a88:	980f883a 	mov	r7,r19
  803a8c:	d8014615 	stw	zero,1304(sp)
  803a90:	003c5206 	br	802bdc <___vfprintf_internal_r+0xa88>
  803a94:	d9014f17 	ldw	r4,1340(sp)
  803a98:	b00b883a 	mov	r5,r22
  803a9c:	d9800c04 	addi	r6,sp,48
  803aa0:	08020fc0 	call	8020fc <__sprint_r>
  803aa4:	103b631e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  803aa8:	dc800e17 	ldw	r18,56(sp)
  803aac:	d9000517 	ldw	r4,20(sp)
  803ab0:	d8c01904 	addi	r3,sp,100
  803ab4:	003f2e06 	br	803770 <___vfprintf_internal_r+0x161c>
  803ab8:	d8c14c17 	ldw	r3,1328(sp)
  803abc:	1880100c 	andi	r2,r3,64
  803ac0:	1000a026 	beq	r2,zero,803d44 <___vfprintf_internal_r+0x1bf0>
  803ac4:	38800017 	ldw	r2,0(r7)
  803ac8:	39c00104 	addi	r7,r7,4
  803acc:	d9c14015 	stw	r7,1280(sp)
  803ad0:	d9014b17 	ldw	r4,1324(sp)
  803ad4:	d9c14017 	ldw	r7,1280(sp)
  803ad8:	1100000d 	sth	r4,0(r2)
  803adc:	0039f906 	br	8022c4 <___vfprintf_internal_r+0x170>
  803ae0:	d9014f17 	ldw	r4,1340(sp)
  803ae4:	b00b883a 	mov	r5,r22
  803ae8:	d9800c04 	addi	r6,sp,48
  803aec:	08020fc0 	call	8020fc <__sprint_r>
  803af0:	103b501e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  803af4:	dc800e17 	ldw	r18,56(sp)
  803af8:	dc400d17 	ldw	r17,52(sp)
  803afc:	d9000517 	ldw	r4,20(sp)
  803b00:	d8c01904 	addi	r3,sp,100
  803b04:	003f2d06 	br	8037bc <___vfprintf_internal_r+0x1668>
  803b08:	00800184 	movi	r2,6
  803b0c:	14c09a36 	bltu	r2,r19,803d78 <___vfprintf_internal_r+0x1c24>
  803b10:	dcc14515 	stw	r19,1300(sp)
  803b14:	9800010e 	bge	r19,zero,803b1c <___vfprintf_internal_r+0x19c8>
  803b18:	d8014515 	stw	zero,1300(sp)
  803b1c:	00802074 	movhi	r2,129
  803b20:	10821604 	addi	r2,r2,2136
  803b24:	980f883a 	mov	r7,r19
  803b28:	d8814115 	stw	r2,1284(sp)
  803b2c:	003a7806 	br	802510 <___vfprintf_internal_r+0x3bc>
  803b30:	00bfffc4 	movi	r2,-1
  803b34:	9880e226 	beq	r19,r2,803ec0 <___vfprintf_internal_r+0x1d6c>
  803b38:	d9414d17 	ldw	r5,1332(sp)
  803b3c:	008019c4 	movi	r2,103
  803b40:	2880dc26 	beq	r5,r2,803eb4 <___vfprintf_internal_r+0x1d60>
  803b44:	008011c4 	movi	r2,71
  803b48:	2880da26 	beq	r5,r2,803eb4 <___vfprintf_internal_r+0x1d60>
  803b4c:	d9414c17 	ldw	r5,1328(sp)
  803b50:	d9014317 	ldw	r4,1292(sp)
  803b54:	d9814217 	ldw	r6,1288(sp)
  803b58:	29404014 	ori	r5,r5,256
  803b5c:	d9414c15 	stw	r5,1328(sp)
  803b60:	2000cc16 	blt	r4,zero,803e94 <___vfprintf_internal_r+0x1d40>
  803b64:	3021883a 	mov	r16,r6
  803b68:	2023883a 	mov	r17,r4
  803b6c:	0039883a 	mov	fp,zero
  803b70:	d9414d17 	ldw	r5,1332(sp)
  803b74:	00801984 	movi	r2,102
  803b78:	2880b726 	beq	r5,r2,803e58 <___vfprintf_internal_r+0x1d04>
  803b7c:	00801184 	movi	r2,70
  803b80:	2880b526 	beq	r5,r2,803e58 <___vfprintf_internal_r+0x1d04>
  803b84:	00801944 	movi	r2,101
  803b88:	2880c826 	beq	r5,r2,803eac <___vfprintf_internal_r+0x1d58>
  803b8c:	00801144 	movi	r2,69
  803b90:	2880c626 	beq	r5,r2,803eac <___vfprintf_internal_r+0x1d58>
  803b94:	9829883a 	mov	r20,r19
  803b98:	d9014f17 	ldw	r4,1340(sp)
  803b9c:	d8800504 	addi	r2,sp,20
  803ba0:	880d883a 	mov	r6,r17
  803ba4:	d8800115 	stw	r2,4(sp)
  803ba8:	d8c00604 	addi	r3,sp,24
  803bac:	d8800704 	addi	r2,sp,28
  803bb0:	800b883a 	mov	r5,r16
  803bb4:	01c00084 	movi	r7,2
  803bb8:	d8c00215 	stw	r3,8(sp)
  803bbc:	d8800315 	stw	r2,12(sp)
  803bc0:	dd000015 	stw	r20,0(sp)
  803bc4:	08045440 	call	804544 <_dtoa_r>
  803bc8:	d9814d17 	ldw	r6,1332(sp)
  803bcc:	d8814115 	stw	r2,1284(sp)
  803bd0:	008019c4 	movi	r2,103
  803bd4:	30809526 	beq	r6,r2,803e2c <___vfprintf_internal_r+0x1cd8>
  803bd8:	d8c14d17 	ldw	r3,1332(sp)
  803bdc:	008011c4 	movi	r2,71
  803be0:	18809226 	beq	r3,r2,803e2c <___vfprintf_internal_r+0x1cd8>
  803be4:	d9414117 	ldw	r5,1284(sp)
  803be8:	d9814d17 	ldw	r6,1332(sp)
  803bec:	00801984 	movi	r2,102
  803bf0:	2d25883a 	add	r18,r5,r20
  803bf4:	30808626 	beq	r6,r2,803e10 <___vfprintf_internal_r+0x1cbc>
  803bf8:	00801184 	movi	r2,70
  803bfc:	30808426 	beq	r6,r2,803e10 <___vfprintf_internal_r+0x1cbc>
  803c00:	000d883a 	mov	r6,zero
  803c04:	000f883a 	mov	r7,zero
  803c08:	880b883a 	mov	r5,r17
  803c0c:	8009883a 	mov	r4,r16
  803c10:	080b7a80 	call	80b7a8 <__eqdf2>
  803c14:	1000751e 	bne	r2,zero,803dec <___vfprintf_internal_r+0x1c98>
  803c18:	9005883a 	mov	r2,r18
  803c1c:	dc800715 	stw	r18,28(sp)
  803c20:	d9014117 	ldw	r4,1284(sp)
  803c24:	d9414d17 	ldw	r5,1332(sp)
  803c28:	00c019c4 	movi	r3,103
  803c2c:	1125c83a 	sub	r18,r2,r4
  803c30:	28c06826 	beq	r5,r3,803dd4 <___vfprintf_internal_r+0x1c80>
  803c34:	008011c4 	movi	r2,71
  803c38:	28806626 	beq	r5,r2,803dd4 <___vfprintf_internal_r+0x1c80>
  803c3c:	d9000517 	ldw	r4,20(sp)
  803c40:	d8c14d17 	ldw	r3,1332(sp)
  803c44:	00801944 	movi	r2,101
  803c48:	10c05516 	blt	r2,r3,803da0 <___vfprintf_internal_r+0x1c4c>
  803c4c:	213fffc4 	addi	r4,r4,-1
  803c50:	d9000515 	stw	r4,20(sp)
  803c54:	d8c00805 	stb	r3,32(sp)
  803c58:	2021883a 	mov	r16,r4
  803c5c:	2000c116 	blt	r4,zero,803f64 <___vfprintf_internal_r+0x1e10>
  803c60:	00800ac4 	movi	r2,43
  803c64:	d8800845 	stb	r2,33(sp)
  803c68:	00800244 	movi	r2,9
  803c6c:	1400af0e 	bge	r2,r16,803f2c <___vfprintf_internal_r+0x1dd8>
  803c70:	1027883a 	mov	r19,r2
  803c74:	dc400b84 	addi	r17,sp,46
  803c78:	8009883a 	mov	r4,r16
  803c7c:	01400284 	movi	r5,10
  803c80:	080be900 	call	80be90 <__modsi3>
  803c84:	10800c04 	addi	r2,r2,48
  803c88:	8c7fffc4 	addi	r17,r17,-1
  803c8c:	8009883a 	mov	r4,r16
  803c90:	01400284 	movi	r5,10
  803c94:	88800005 	stb	r2,0(r17)
  803c98:	080be300 	call	80be30 <__divsi3>
  803c9c:	1021883a 	mov	r16,r2
  803ca0:	98bff516 	blt	r19,r2,803c78 <___vfprintf_internal_r+0x1b24>
  803ca4:	10c00c04 	addi	r3,r2,48
  803ca8:	d88009c4 	addi	r2,sp,39
  803cac:	108001c4 	addi	r2,r2,7
  803cb0:	897fffc4 	addi	r5,r17,-1
  803cb4:	88ffffc5 	stb	r3,-1(r17)
  803cb8:	2880a72e 	bgeu	r5,r2,803f58 <___vfprintf_internal_r+0x1e04>
  803cbc:	1009883a 	mov	r4,r2
  803cc0:	d9800804 	addi	r6,sp,32
  803cc4:	d8c00884 	addi	r3,sp,34
  803cc8:	28800003 	ldbu	r2,0(r5)
  803ccc:	29400044 	addi	r5,r5,1
  803cd0:	18800005 	stb	r2,0(r3)
  803cd4:	18c00044 	addi	r3,r3,1
  803cd8:	293ffb36 	bltu	r5,r4,803cc8 <___vfprintf_internal_r+0x1b74>
  803cdc:	1987c83a 	sub	r3,r3,r6
  803ce0:	00800044 	movi	r2,1
  803ce4:	d8c14815 	stw	r3,1312(sp)
  803ce8:	90cf883a 	add	r7,r18,r3
  803cec:	1480960e 	bge	r2,r18,803f48 <___vfprintf_internal_r+0x1df4>
  803cf0:	39c00044 	addi	r7,r7,1
  803cf4:	d9c14515 	stw	r7,1300(sp)
  803cf8:	38003416 	blt	r7,zero,803dcc <___vfprintf_internal_r+0x1c78>
  803cfc:	e0803fcc 	andi	r2,fp,255
  803d00:	1080201c 	xori	r2,r2,128
  803d04:	10bfe004 	addi	r2,r2,-128
  803d08:	10004e26 	beq	r2,zero,803e44 <___vfprintf_internal_r+0x1cf0>
  803d0c:	00800b44 	movi	r2,45
  803d10:	dc814715 	stw	r18,1308(sp)
  803d14:	d8014615 	stw	zero,1304(sp)
  803d18:	d8800405 	stb	r2,16(sp)
  803d1c:	003bb106 	br	802be4 <___vfprintf_internal_r+0xa90>
  803d20:	00800b44 	movi	r2,45
  803d24:	d8800405 	stb	r2,16(sp)
  803d28:	003d3306 	br	8031f8 <___vfprintf_internal_r+0x10a4>
  803d2c:	d9014f17 	ldw	r4,1340(sp)
  803d30:	b00b883a 	mov	r5,r22
  803d34:	d9800c04 	addi	r6,sp,48
  803d38:	08020fc0 	call	8020fc <__sprint_r>
  803d3c:	103abd1e 	bne	r2,zero,802834 <___vfprintf_internal_r+0x6e0>
  803d40:	003abb06 	br	802830 <___vfprintf_internal_r+0x6dc>
  803d44:	38800017 	ldw	r2,0(r7)
  803d48:	39c00104 	addi	r7,r7,4
  803d4c:	d9c14015 	stw	r7,1280(sp)
  803d50:	d9414b17 	ldw	r5,1324(sp)
  803d54:	d9c14017 	ldw	r7,1280(sp)
  803d58:	11400015 	stw	r5,0(r2)
  803d5c:	00395906 	br	8022c4 <___vfprintf_internal_r+0x170>
  803d60:	980f883a 	mov	r7,r19
  803d64:	dcc14515 	stw	r19,1300(sp)
  803d68:	d8014615 	stw	zero,1304(sp)
  803d6c:	003b9b06 	br	802bdc <___vfprintf_internal_r+0xa88>
  803d70:	0027883a 	mov	r19,zero
  803d74:	00397806 	br	802358 <___vfprintf_internal_r+0x204>
  803d78:	00c02074 	movhi	r3,129
  803d7c:	18c21604 	addi	r3,r3,2136
  803d80:	100f883a 	mov	r7,r2
  803d84:	d8814515 	stw	r2,1300(sp)
  803d88:	d8c14115 	stw	r3,1284(sp)
  803d8c:	0039e006 	br	802510 <___vfprintf_internal_r+0x3bc>
  803d90:	00802074 	movhi	r2,129
  803d94:	10821504 	addi	r2,r2,2132
  803d98:	d8814115 	stw	r2,1284(sp)
  803d9c:	003d1c06 	br	803210 <___vfprintf_internal_r+0x10bc>
  803da0:	d9414d17 	ldw	r5,1332(sp)
  803da4:	00801984 	movi	r2,102
  803da8:	28804926 	beq	r5,r2,803ed0 <___vfprintf_internal_r+0x1d7c>
  803dac:	200f883a 	mov	r7,r4
  803db0:	24805716 	blt	r4,r18,803f10 <___vfprintf_internal_r+0x1dbc>
  803db4:	d9414c17 	ldw	r5,1328(sp)
  803db8:	2880004c 	andi	r2,r5,1
  803dbc:	10000126 	beq	r2,zero,803dc4 <___vfprintf_internal_r+0x1c70>
  803dc0:	21c00044 	addi	r7,r4,1
  803dc4:	d9c14515 	stw	r7,1300(sp)
  803dc8:	383fcc0e 	bge	r7,zero,803cfc <___vfprintf_internal_r+0x1ba8>
  803dcc:	d8014515 	stw	zero,1300(sp)
  803dd0:	003fca06 	br	803cfc <___vfprintf_internal_r+0x1ba8>
  803dd4:	d9000517 	ldw	r4,20(sp)
  803dd8:	00bfff04 	movi	r2,-4
  803ddc:	1100480e 	bge	r2,r4,803f00 <___vfprintf_internal_r+0x1dac>
  803de0:	99004716 	blt	r19,r4,803f00 <___vfprintf_internal_r+0x1dac>
  803de4:	d8c14d15 	stw	r3,1332(sp)
  803de8:	003ff006 	br	803dac <___vfprintf_internal_r+0x1c58>
  803dec:	d8800717 	ldw	r2,28(sp)
  803df0:	14bf8b2e 	bgeu	r2,r18,803c20 <___vfprintf_internal_r+0x1acc>
  803df4:	9007883a 	mov	r3,r18
  803df8:	01000c04 	movi	r4,48
  803dfc:	11000005 	stb	r4,0(r2)
  803e00:	10800044 	addi	r2,r2,1
  803e04:	d8800715 	stw	r2,28(sp)
  803e08:	18bffc1e 	bne	r3,r2,803dfc <___vfprintf_internal_r+0x1ca8>
  803e0c:	003f8406 	br	803c20 <___vfprintf_internal_r+0x1acc>
  803e10:	d8814117 	ldw	r2,1284(sp)
  803e14:	10c00007 	ldb	r3,0(r2)
  803e18:	00800c04 	movi	r2,48
  803e1c:	18805b26 	beq	r3,r2,803f8c <___vfprintf_internal_r+0x1e38>
  803e20:	d9000517 	ldw	r4,20(sp)
  803e24:	9125883a 	add	r18,r18,r4
  803e28:	003f7506 	br	803c00 <___vfprintf_internal_r+0x1aac>
  803e2c:	d9014c17 	ldw	r4,1328(sp)
  803e30:	2080004c 	andi	r2,r4,1
  803e34:	1005003a 	cmpeq	r2,r2,zero
  803e38:	103f6a26 	beq	r2,zero,803be4 <___vfprintf_internal_r+0x1a90>
  803e3c:	d8800717 	ldw	r2,28(sp)
  803e40:	003f7706 	br	803c20 <___vfprintf_internal_r+0x1acc>
  803e44:	d9c14515 	stw	r7,1300(sp)
  803e48:	38004d16 	blt	r7,zero,803f80 <___vfprintf_internal_r+0x1e2c>
  803e4c:	dc814715 	stw	r18,1308(sp)
  803e50:	d8014615 	stw	zero,1304(sp)
  803e54:	003b6106 	br	802bdc <___vfprintf_internal_r+0xa88>
  803e58:	d9014f17 	ldw	r4,1340(sp)
  803e5c:	d8800504 	addi	r2,sp,20
  803e60:	d8800115 	stw	r2,4(sp)
  803e64:	d8c00604 	addi	r3,sp,24
  803e68:	d8800704 	addi	r2,sp,28
  803e6c:	800b883a 	mov	r5,r16
  803e70:	880d883a 	mov	r6,r17
  803e74:	01c000c4 	movi	r7,3
  803e78:	d8c00215 	stw	r3,8(sp)
  803e7c:	d8800315 	stw	r2,12(sp)
  803e80:	dcc00015 	stw	r19,0(sp)
  803e84:	9829883a 	mov	r20,r19
  803e88:	08045440 	call	804544 <_dtoa_r>
  803e8c:	d8814115 	stw	r2,1284(sp)
  803e90:	003f5106 	br	803bd8 <___vfprintf_internal_r+0x1a84>
  803e94:	d8c14217 	ldw	r3,1288(sp)
  803e98:	d9014317 	ldw	r4,1292(sp)
  803e9c:	07000b44 	movi	fp,45
  803ea0:	1821883a 	mov	r16,r3
  803ea4:	2460003c 	xorhi	r17,r4,32768
  803ea8:	003f3106 	br	803b70 <___vfprintf_internal_r+0x1a1c>
  803eac:	9d000044 	addi	r20,r19,1
  803eb0:	003f3906 	br	803b98 <___vfprintf_internal_r+0x1a44>
  803eb4:	983f251e 	bne	r19,zero,803b4c <___vfprintf_internal_r+0x19f8>
  803eb8:	04c00044 	movi	r19,1
  803ebc:	003f2306 	br	803b4c <___vfprintf_internal_r+0x19f8>
  803ec0:	04c00184 	movi	r19,6
  803ec4:	003f2106 	br	803b4c <___vfprintf_internal_r+0x19f8>
  803ec8:	d8014515 	stw	zero,1300(sp)
  803ecc:	003eee06 	br	803a88 <___vfprintf_internal_r+0x1934>
  803ed0:	200f883a 	mov	r7,r4
  803ed4:	0100370e 	bge	zero,r4,803fb4 <___vfprintf_internal_r+0x1e60>
  803ed8:	9800031e 	bne	r19,zero,803ee8 <___vfprintf_internal_r+0x1d94>
  803edc:	d9814c17 	ldw	r6,1328(sp)
  803ee0:	3080004c 	andi	r2,r6,1
  803ee4:	103fb726 	beq	r2,zero,803dc4 <___vfprintf_internal_r+0x1c70>
  803ee8:	20800044 	addi	r2,r4,1
  803eec:	98a7883a 	add	r19,r19,r2
  803ef0:	dcc14515 	stw	r19,1300(sp)
  803ef4:	980f883a 	mov	r7,r19
  803ef8:	983f800e 	bge	r19,zero,803cfc <___vfprintf_internal_r+0x1ba8>
  803efc:	003fb306 	br	803dcc <___vfprintf_internal_r+0x1c78>
  803f00:	d9814d17 	ldw	r6,1332(sp)
  803f04:	31bfff84 	addi	r6,r6,-2
  803f08:	d9814d15 	stw	r6,1332(sp)
  803f0c:	003f4c06 	br	803c40 <___vfprintf_internal_r+0x1aec>
  803f10:	0100180e 	bge	zero,r4,803f74 <___vfprintf_internal_r+0x1e20>
  803f14:	00800044 	movi	r2,1
  803f18:	1485883a 	add	r2,r2,r18
  803f1c:	d8814515 	stw	r2,1300(sp)
  803f20:	100f883a 	mov	r7,r2
  803f24:	103f750e 	bge	r2,zero,803cfc <___vfprintf_internal_r+0x1ba8>
  803f28:	003fa806 	br	803dcc <___vfprintf_internal_r+0x1c78>
  803f2c:	80c00c04 	addi	r3,r16,48
  803f30:	00800c04 	movi	r2,48
  803f34:	d8c008c5 	stb	r3,35(sp)
  803f38:	d9800804 	addi	r6,sp,32
  803f3c:	d8c00904 	addi	r3,sp,36
  803f40:	d8800885 	stb	r2,34(sp)
  803f44:	003f6506 	br	803cdc <___vfprintf_internal_r+0x1b88>
  803f48:	d9014c17 	ldw	r4,1328(sp)
  803f4c:	2084703a 	and	r2,r4,r2
  803f50:	103f9c26 	beq	r2,zero,803dc4 <___vfprintf_internal_r+0x1c70>
  803f54:	003f6606 	br	803cf0 <___vfprintf_internal_r+0x1b9c>
  803f58:	d9800804 	addi	r6,sp,32
  803f5c:	d8c00884 	addi	r3,sp,34
  803f60:	003f5e06 	br	803cdc <___vfprintf_internal_r+0x1b88>
  803f64:	00800b44 	movi	r2,45
  803f68:	0121c83a 	sub	r16,zero,r4
  803f6c:	d8800845 	stb	r2,33(sp)
  803f70:	003f3d06 	br	803c68 <___vfprintf_internal_r+0x1b14>
  803f74:	00800084 	movi	r2,2
  803f78:	1105c83a 	sub	r2,r2,r4
  803f7c:	003fe606 	br	803f18 <___vfprintf_internal_r+0x1dc4>
  803f80:	d8014515 	stw	zero,1300(sp)
  803f84:	dc814715 	stw	r18,1308(sp)
  803f88:	003fb106 	br	803e50 <___vfprintf_internal_r+0x1cfc>
  803f8c:	000d883a 	mov	r6,zero
  803f90:	000f883a 	mov	r7,zero
  803f94:	8009883a 	mov	r4,r16
  803f98:	880b883a 	mov	r5,r17
  803f9c:	080b8300 	call	80b830 <__nedf2>
  803fa0:	103f9f26 	beq	r2,zero,803e20 <___vfprintf_internal_r+0x1ccc>
  803fa4:	00800044 	movi	r2,1
  803fa8:	1509c83a 	sub	r4,r2,r20
  803fac:	d9000515 	stw	r4,20(sp)
  803fb0:	003f9b06 	br	803e20 <___vfprintf_internal_r+0x1ccc>
  803fb4:	98000d1e 	bne	r19,zero,803fec <___vfprintf_internal_r+0x1e98>
  803fb8:	d8c14c17 	ldw	r3,1328(sp)
  803fbc:	1880004c 	andi	r2,r3,1
  803fc0:	10000a1e 	bne	r2,zero,803fec <___vfprintf_internal_r+0x1e98>
  803fc4:	01000044 	movi	r4,1
  803fc8:	200f883a 	mov	r7,r4
  803fcc:	d9014515 	stw	r4,1300(sp)
  803fd0:	003f4a06 	br	803cfc <___vfprintf_internal_r+0x1ba8>
  803fd4:	3cc00017 	ldw	r19,0(r7)
  803fd8:	39c00104 	addi	r7,r7,4
  803fdc:	983d0e0e 	bge	r19,zero,803418 <___vfprintf_internal_r+0x12c4>
  803fe0:	b8c00007 	ldb	r3,0(r23)
  803fe4:	04ffffc4 	movi	r19,-1
  803fe8:	0038d906 	br	802350 <___vfprintf_internal_r+0x1fc>
  803fec:	9cc00084 	addi	r19,r19,2
  803ff0:	dcc14515 	stw	r19,1300(sp)
  803ff4:	980f883a 	mov	r7,r19
  803ff8:	983f400e 	bge	r19,zero,803cfc <___vfprintf_internal_r+0x1ba8>
  803ffc:	003f7306 	br	803dcc <___vfprintf_internal_r+0x1c78>

00804000 <__vfprintf_internal>:
  804000:	00802074 	movhi	r2,129
  804004:	1089eb04 	addi	r2,r2,10156
  804008:	2013883a 	mov	r9,r4
  80400c:	11000017 	ldw	r4,0(r2)
  804010:	2805883a 	mov	r2,r5
  804014:	300f883a 	mov	r7,r6
  804018:	480b883a 	mov	r5,r9
  80401c:	100d883a 	mov	r6,r2
  804020:	08021541 	jmpi	802154 <___vfprintf_internal_r>

00804024 <__swsetup_r>:
  804024:	00802074 	movhi	r2,129
  804028:	1089eb04 	addi	r2,r2,10156
  80402c:	10c00017 	ldw	r3,0(r2)
  804030:	defffd04 	addi	sp,sp,-12
  804034:	dc400115 	stw	r17,4(sp)
  804038:	dc000015 	stw	r16,0(sp)
  80403c:	dfc00215 	stw	ra,8(sp)
  804040:	2023883a 	mov	r17,r4
  804044:	2821883a 	mov	r16,r5
  804048:	18000226 	beq	r3,zero,804054 <__swsetup_r+0x30>
  80404c:	18800e17 	ldw	r2,56(r3)
  804050:	10001f26 	beq	r2,zero,8040d0 <__swsetup_r+0xac>
  804054:	8100030b 	ldhu	r4,12(r16)
  804058:	2080020c 	andi	r2,r4,8
  80405c:	10002826 	beq	r2,zero,804100 <__swsetup_r+0xdc>
  804060:	81400417 	ldw	r5,16(r16)
  804064:	28001d26 	beq	r5,zero,8040dc <__swsetup_r+0xb8>
  804068:	2080004c 	andi	r2,r4,1
  80406c:	1005003a 	cmpeq	r2,r2,zero
  804070:	10000b26 	beq	r2,zero,8040a0 <__swsetup_r+0x7c>
  804074:	2080008c 	andi	r2,r4,2
  804078:	10001226 	beq	r2,zero,8040c4 <__swsetup_r+0xa0>
  80407c:	0005883a 	mov	r2,zero
  804080:	80800215 	stw	r2,8(r16)
  804084:	28000b26 	beq	r5,zero,8040b4 <__swsetup_r+0x90>
  804088:	0005883a 	mov	r2,zero
  80408c:	dfc00217 	ldw	ra,8(sp)
  804090:	dc400117 	ldw	r17,4(sp)
  804094:	dc000017 	ldw	r16,0(sp)
  804098:	dec00304 	addi	sp,sp,12
  80409c:	f800283a 	ret
  8040a0:	80800517 	ldw	r2,20(r16)
  8040a4:	80000215 	stw	zero,8(r16)
  8040a8:	0085c83a 	sub	r2,zero,r2
  8040ac:	80800615 	stw	r2,24(r16)
  8040b0:	283ff51e 	bne	r5,zero,804088 <__swsetup_r+0x64>
  8040b4:	2080200c 	andi	r2,r4,128
  8040b8:	103ff326 	beq	r2,zero,804088 <__swsetup_r+0x64>
  8040bc:	00bfffc4 	movi	r2,-1
  8040c0:	003ff206 	br	80408c <__swsetup_r+0x68>
  8040c4:	80800517 	ldw	r2,20(r16)
  8040c8:	80800215 	stw	r2,8(r16)
  8040cc:	003fed06 	br	804084 <__swsetup_r+0x60>
  8040d0:	1809883a 	mov	r4,r3
  8040d4:	0805d900 	call	805d90 <__sinit>
  8040d8:	003fde06 	br	804054 <__swsetup_r+0x30>
  8040dc:	20c0a00c 	andi	r3,r4,640
  8040e0:	00808004 	movi	r2,512
  8040e4:	18bfe026 	beq	r3,r2,804068 <__swsetup_r+0x44>
  8040e8:	8809883a 	mov	r4,r17
  8040ec:	800b883a 	mov	r5,r16
  8040f0:	0806b080 	call	806b08 <__smakebuf_r>
  8040f4:	8100030b 	ldhu	r4,12(r16)
  8040f8:	81400417 	ldw	r5,16(r16)
  8040fc:	003fda06 	br	804068 <__swsetup_r+0x44>
  804100:	2080040c 	andi	r2,r4,16
  804104:	103fed26 	beq	r2,zero,8040bc <__swsetup_r+0x98>
  804108:	2080010c 	andi	r2,r4,4
  80410c:	10001226 	beq	r2,zero,804158 <__swsetup_r+0x134>
  804110:	81400c17 	ldw	r5,48(r16)
  804114:	28000526 	beq	r5,zero,80412c <__swsetup_r+0x108>
  804118:	80801004 	addi	r2,r16,64
  80411c:	28800226 	beq	r5,r2,804128 <__swsetup_r+0x104>
  804120:	8809883a 	mov	r4,r17
  804124:	08061140 	call	806114 <_free_r>
  804128:	80000c15 	stw	zero,48(r16)
  80412c:	8080030b 	ldhu	r2,12(r16)
  804130:	81400417 	ldw	r5,16(r16)
  804134:	80000115 	stw	zero,4(r16)
  804138:	10bff6cc 	andi	r2,r2,65499
  80413c:	8080030d 	sth	r2,12(r16)
  804140:	81400015 	stw	r5,0(r16)
  804144:	8080030b 	ldhu	r2,12(r16)
  804148:	10800214 	ori	r2,r2,8
  80414c:	113fffcc 	andi	r4,r2,65535
  804150:	8080030d 	sth	r2,12(r16)
  804154:	003fc306 	br	804064 <__swsetup_r+0x40>
  804158:	81400417 	ldw	r5,16(r16)
  80415c:	003ff906 	br	804144 <__swsetup_r+0x120>

00804160 <register_fini>:
  804160:	f800283a 	ret

00804164 <__call_exitprocs>:
  804164:	00802074 	movhi	r2,129
  804168:	1089ec04 	addi	r2,r2,10160
  80416c:	10800017 	ldw	r2,0(r2)
  804170:	defff304 	addi	sp,sp,-52
  804174:	df000b15 	stw	fp,44(sp)
  804178:	d8800115 	stw	r2,4(sp)
  80417c:	00802034 	movhi	r2,128
  804180:	1085a504 	addi	r2,r2,5780
  804184:	1005003a 	cmpeq	r2,r2,zero
  804188:	d8800215 	stw	r2,8(sp)
  80418c:	d8800117 	ldw	r2,4(sp)
  804190:	dd400815 	stw	r21,32(sp)
  804194:	dd000715 	stw	r20,28(sp)
  804198:	10805204 	addi	r2,r2,328
  80419c:	dfc00c15 	stw	ra,48(sp)
  8041a0:	ddc00a15 	stw	r23,40(sp)
  8041a4:	dd800915 	stw	r22,36(sp)
  8041a8:	dcc00615 	stw	r19,24(sp)
  8041ac:	dc800515 	stw	r18,20(sp)
  8041b0:	dc400415 	stw	r17,16(sp)
  8041b4:	dc000315 	stw	r16,12(sp)
  8041b8:	282b883a 	mov	r21,r5
  8041bc:	2039883a 	mov	fp,r4
  8041c0:	d8800015 	stw	r2,0(sp)
  8041c4:	2829003a 	cmpeq	r20,r5,zero
  8041c8:	d8800117 	ldw	r2,4(sp)
  8041cc:	14405217 	ldw	r17,328(r2)
  8041d0:	88001026 	beq	r17,zero,804214 <__call_exitprocs+0xb0>
  8041d4:	ddc00017 	ldw	r23,0(sp)
  8041d8:	88800117 	ldw	r2,4(r17)
  8041dc:	8c802204 	addi	r18,r17,136
  8041e0:	143fffc4 	addi	r16,r2,-1
  8041e4:	80000916 	blt	r16,zero,80420c <__call_exitprocs+0xa8>
  8041e8:	05bfffc4 	movi	r22,-1
  8041ec:	a000151e 	bne	r20,zero,804244 <__call_exitprocs+0xe0>
  8041f0:	8409883a 	add	r4,r16,r16
  8041f4:	2105883a 	add	r2,r4,r4
  8041f8:	1485883a 	add	r2,r2,r18
  8041fc:	10c02017 	ldw	r3,128(r2)
  804200:	a8c01126 	beq	r21,r3,804248 <__call_exitprocs+0xe4>
  804204:	843fffc4 	addi	r16,r16,-1
  804208:	85bff81e 	bne	r16,r22,8041ec <__call_exitprocs+0x88>
  80420c:	d8800217 	ldw	r2,8(sp)
  804210:	10003126 	beq	r2,zero,8042d8 <__call_exitprocs+0x174>
  804214:	dfc00c17 	ldw	ra,48(sp)
  804218:	df000b17 	ldw	fp,44(sp)
  80421c:	ddc00a17 	ldw	r23,40(sp)
  804220:	dd800917 	ldw	r22,36(sp)
  804224:	dd400817 	ldw	r21,32(sp)
  804228:	dd000717 	ldw	r20,28(sp)
  80422c:	dcc00617 	ldw	r19,24(sp)
  804230:	dc800517 	ldw	r18,20(sp)
  804234:	dc400417 	ldw	r17,16(sp)
  804238:	dc000317 	ldw	r16,12(sp)
  80423c:	dec00d04 	addi	sp,sp,52
  804240:	f800283a 	ret
  804244:	8409883a 	add	r4,r16,r16
  804248:	88c00117 	ldw	r3,4(r17)
  80424c:	2105883a 	add	r2,r4,r4
  804250:	1445883a 	add	r2,r2,r17
  804254:	18ffffc4 	addi	r3,r3,-1
  804258:	11800217 	ldw	r6,8(r2)
  80425c:	1c001526 	beq	r3,r16,8042b4 <__call_exitprocs+0x150>
  804260:	10000215 	stw	zero,8(r2)
  804264:	303fe726 	beq	r6,zero,804204 <__call_exitprocs+0xa0>
  804268:	00c00044 	movi	r3,1
  80426c:	1c06983a 	sll	r3,r3,r16
  804270:	90804017 	ldw	r2,256(r18)
  804274:	8cc00117 	ldw	r19,4(r17)
  804278:	1884703a 	and	r2,r3,r2
  80427c:	10001426 	beq	r2,zero,8042d0 <__call_exitprocs+0x16c>
  804280:	90804117 	ldw	r2,260(r18)
  804284:	1884703a 	and	r2,r3,r2
  804288:	10000c1e 	bne	r2,zero,8042bc <__call_exitprocs+0x158>
  80428c:	2105883a 	add	r2,r4,r4
  804290:	1485883a 	add	r2,r2,r18
  804294:	11400017 	ldw	r5,0(r2)
  804298:	e009883a 	mov	r4,fp
  80429c:	303ee83a 	callr	r6
  8042a0:	88800117 	ldw	r2,4(r17)
  8042a4:	98bfc81e 	bne	r19,r2,8041c8 <__call_exitprocs+0x64>
  8042a8:	b8800017 	ldw	r2,0(r23)
  8042ac:	147fd526 	beq	r2,r17,804204 <__call_exitprocs+0xa0>
  8042b0:	003fc506 	br	8041c8 <__call_exitprocs+0x64>
  8042b4:	8c000115 	stw	r16,4(r17)
  8042b8:	003fea06 	br	804264 <__call_exitprocs+0x100>
  8042bc:	2105883a 	add	r2,r4,r4
  8042c0:	1485883a 	add	r2,r2,r18
  8042c4:	11000017 	ldw	r4,0(r2)
  8042c8:	303ee83a 	callr	r6
  8042cc:	003ff406 	br	8042a0 <__call_exitprocs+0x13c>
  8042d0:	303ee83a 	callr	r6
  8042d4:	003ff206 	br	8042a0 <__call_exitprocs+0x13c>
  8042d8:	88800117 	ldw	r2,4(r17)
  8042dc:	1000081e 	bne	r2,zero,804300 <__call_exitprocs+0x19c>
  8042e0:	89000017 	ldw	r4,0(r17)
  8042e4:	20000726 	beq	r4,zero,804304 <__call_exitprocs+0x1a0>
  8042e8:	b9000015 	stw	r4,0(r23)
  8042ec:	8809883a 	mov	r4,r17
  8042f0:	08016940 	call	801694 <free>
  8042f4:	bc400017 	ldw	r17,0(r23)
  8042f8:	883fb71e 	bne	r17,zero,8041d8 <__call_exitprocs+0x74>
  8042fc:	003fc506 	br	804214 <__call_exitprocs+0xb0>
  804300:	89000017 	ldw	r4,0(r17)
  804304:	882f883a 	mov	r23,r17
  804308:	2023883a 	mov	r17,r4
  80430c:	883fb21e 	bne	r17,zero,8041d8 <__call_exitprocs+0x74>
  804310:	003fc006 	br	804214 <__call_exitprocs+0xb0>

00804314 <abort>:
  804314:	deffff04 	addi	sp,sp,-4
  804318:	01000184 	movi	r4,6
  80431c:	dfc00015 	stw	ra,0(sp)
  804320:	08086bc0 	call	8086bc <raise>
  804324:	01000044 	movi	r4,1
  804328:	080c8640 	call	80c864 <_exit>

0080432c <quorem>:
  80432c:	28c00417 	ldw	r3,16(r5)
  804330:	20800417 	ldw	r2,16(r4)
  804334:	defff604 	addi	sp,sp,-40
  804338:	ddc00715 	stw	r23,28(sp)
  80433c:	dd400515 	stw	r21,20(sp)
  804340:	dfc00915 	stw	ra,36(sp)
  804344:	df000815 	stw	fp,32(sp)
  804348:	dd800615 	stw	r22,24(sp)
  80434c:	dd000415 	stw	r20,16(sp)
  804350:	dcc00315 	stw	r19,12(sp)
  804354:	dc800215 	stw	r18,8(sp)
  804358:	dc400115 	stw	r17,4(sp)
  80435c:	dc000015 	stw	r16,0(sp)
  804360:	202f883a 	mov	r23,r4
  804364:	282b883a 	mov	r21,r5
  804368:	10c07416 	blt	r2,r3,80453c <quorem+0x210>
  80436c:	1c7fffc4 	addi	r17,r3,-1
  804370:	8c45883a 	add	r2,r17,r17
  804374:	1085883a 	add	r2,r2,r2
  804378:	2c000504 	addi	r16,r5,20
  80437c:	24c00504 	addi	r19,r4,20
  804380:	14ed883a 	add	r22,r2,r19
  804384:	80a5883a 	add	r18,r16,r2
  804388:	b7000017 	ldw	fp,0(r22)
  80438c:	91400017 	ldw	r5,0(r18)
  804390:	e009883a 	mov	r4,fp
  804394:	29400044 	addi	r5,r5,1
  804398:	080bef00 	call	80bef0 <__udivsi3>
  80439c:	1029883a 	mov	r20,r2
  8043a0:	10003c1e 	bne	r2,zero,804494 <quorem+0x168>
  8043a4:	a80b883a 	mov	r5,r21
  8043a8:	b809883a 	mov	r4,r23
  8043ac:	08070f40 	call	8070f4 <__mcmp>
  8043b0:	10002b16 	blt	r2,zero,804460 <quorem+0x134>
  8043b4:	a5000044 	addi	r20,r20,1
  8043b8:	980f883a 	mov	r7,r19
  8043bc:	0011883a 	mov	r8,zero
  8043c0:	0009883a 	mov	r4,zero
  8043c4:	81400017 	ldw	r5,0(r16)
  8043c8:	38c00017 	ldw	r3,0(r7)
  8043cc:	84000104 	addi	r16,r16,4
  8043d0:	28bfffcc 	andi	r2,r5,65535
  8043d4:	2085883a 	add	r2,r4,r2
  8043d8:	11bfffcc 	andi	r6,r2,65535
  8043dc:	193fffcc 	andi	r4,r3,65535
  8043e0:	1004d43a 	srli	r2,r2,16
  8043e4:	280ad43a 	srli	r5,r5,16
  8043e8:	2189c83a 	sub	r4,r4,r6
  8043ec:	2209883a 	add	r4,r4,r8
  8043f0:	1806d43a 	srli	r3,r3,16
  8043f4:	288b883a 	add	r5,r5,r2
  8043f8:	200dd43a 	srai	r6,r4,16
  8043fc:	28bfffcc 	andi	r2,r5,65535
  804400:	1887c83a 	sub	r3,r3,r2
  804404:	1987883a 	add	r3,r3,r6
  804408:	3900000d 	sth	r4,0(r7)
  80440c:	38c0008d 	sth	r3,2(r7)
  804410:	2808d43a 	srli	r4,r5,16
  804414:	39c00104 	addi	r7,r7,4
  804418:	1811d43a 	srai	r8,r3,16
  80441c:	943fe92e 	bgeu	r18,r16,8043c4 <quorem+0x98>
  804420:	8c45883a 	add	r2,r17,r17
  804424:	1085883a 	add	r2,r2,r2
  804428:	9885883a 	add	r2,r19,r2
  80442c:	10c00017 	ldw	r3,0(r2)
  804430:	18000b1e 	bne	r3,zero,804460 <quorem+0x134>
  804434:	113fff04 	addi	r4,r2,-4
  804438:	9900082e 	bgeu	r19,r4,80445c <quorem+0x130>
  80443c:	10bfff17 	ldw	r2,-4(r2)
  804440:	10000326 	beq	r2,zero,804450 <quorem+0x124>
  804444:	00000506 	br	80445c <quorem+0x130>
  804448:	20800017 	ldw	r2,0(r4)
  80444c:	1000031e 	bne	r2,zero,80445c <quorem+0x130>
  804450:	213fff04 	addi	r4,r4,-4
  804454:	8c7fffc4 	addi	r17,r17,-1
  804458:	993ffb36 	bltu	r19,r4,804448 <quorem+0x11c>
  80445c:	bc400415 	stw	r17,16(r23)
  804460:	a005883a 	mov	r2,r20
  804464:	dfc00917 	ldw	ra,36(sp)
  804468:	df000817 	ldw	fp,32(sp)
  80446c:	ddc00717 	ldw	r23,28(sp)
  804470:	dd800617 	ldw	r22,24(sp)
  804474:	dd400517 	ldw	r21,20(sp)
  804478:	dd000417 	ldw	r20,16(sp)
  80447c:	dcc00317 	ldw	r19,12(sp)
  804480:	dc800217 	ldw	r18,8(sp)
  804484:	dc400117 	ldw	r17,4(sp)
  804488:	dc000017 	ldw	r16,0(sp)
  80448c:	dec00a04 	addi	sp,sp,40
  804490:	f800283a 	ret
  804494:	980f883a 	mov	r7,r19
  804498:	8011883a 	mov	r8,r16
  80449c:	0013883a 	mov	r9,zero
  8044a0:	000d883a 	mov	r6,zero
  8044a4:	40c00017 	ldw	r3,0(r8)
  8044a8:	39000017 	ldw	r4,0(r7)
  8044ac:	42000104 	addi	r8,r8,4
  8044b0:	18bfffcc 	andi	r2,r3,65535
  8044b4:	a085383a 	mul	r2,r20,r2
  8044b8:	1806d43a 	srli	r3,r3,16
  8044bc:	217fffcc 	andi	r5,r4,65535
  8044c0:	3085883a 	add	r2,r6,r2
  8044c4:	11bfffcc 	andi	r6,r2,65535
  8044c8:	a0c7383a 	mul	r3,r20,r3
  8044cc:	1004d43a 	srli	r2,r2,16
  8044d0:	298bc83a 	sub	r5,r5,r6
  8044d4:	2a4b883a 	add	r5,r5,r9
  8044d8:	2008d43a 	srli	r4,r4,16
  8044dc:	1887883a 	add	r3,r3,r2
  8044e0:	280dd43a 	srai	r6,r5,16
  8044e4:	18bfffcc 	andi	r2,r3,65535
  8044e8:	2089c83a 	sub	r4,r4,r2
  8044ec:	2189883a 	add	r4,r4,r6
  8044f0:	3900008d 	sth	r4,2(r7)
  8044f4:	3940000d 	sth	r5,0(r7)
  8044f8:	180cd43a 	srli	r6,r3,16
  8044fc:	39c00104 	addi	r7,r7,4
  804500:	2013d43a 	srai	r9,r4,16
  804504:	923fe72e 	bgeu	r18,r8,8044a4 <quorem+0x178>
  804508:	e03fa61e 	bne	fp,zero,8043a4 <quorem+0x78>
  80450c:	b0ffff04 	addi	r3,r22,-4
  804510:	98c0082e 	bgeu	r19,r3,804534 <quorem+0x208>
  804514:	b0bfff17 	ldw	r2,-4(r22)
  804518:	10000326 	beq	r2,zero,804528 <quorem+0x1fc>
  80451c:	00000506 	br	804534 <quorem+0x208>
  804520:	18800017 	ldw	r2,0(r3)
  804524:	1000031e 	bne	r2,zero,804534 <quorem+0x208>
  804528:	18ffff04 	addi	r3,r3,-4
  80452c:	8c7fffc4 	addi	r17,r17,-1
  804530:	98fffb36 	bltu	r19,r3,804520 <quorem+0x1f4>
  804534:	bc400415 	stw	r17,16(r23)
  804538:	003f9a06 	br	8043a4 <quorem+0x78>
  80453c:	0005883a 	mov	r2,zero
  804540:	003fc806 	br	804464 <quorem+0x138>

00804544 <_dtoa_r>:
  804544:	22001017 	ldw	r8,64(r4)
  804548:	deffda04 	addi	sp,sp,-152
  80454c:	dd402115 	stw	r21,132(sp)
  804550:	dd002015 	stw	r20,128(sp)
  804554:	dc801e15 	stw	r18,120(sp)
  804558:	dc401d15 	stw	r17,116(sp)
  80455c:	dfc02515 	stw	ra,148(sp)
  804560:	df002415 	stw	fp,144(sp)
  804564:	ddc02315 	stw	r23,140(sp)
  804568:	dd802215 	stw	r22,136(sp)
  80456c:	dcc01f15 	stw	r19,124(sp)
  804570:	dc001c15 	stw	r16,112(sp)
  804574:	d9001615 	stw	r4,88(sp)
  804578:	3023883a 	mov	r17,r6
  80457c:	2829883a 	mov	r20,r5
  804580:	d9c01715 	stw	r7,92(sp)
  804584:	dc802817 	ldw	r18,160(sp)
  804588:	302b883a 	mov	r21,r6
  80458c:	40000a26 	beq	r8,zero,8045b8 <_dtoa_r+0x74>
  804590:	20801117 	ldw	r2,68(r4)
  804594:	400b883a 	mov	r5,r8
  804598:	40800115 	stw	r2,4(r8)
  80459c:	20c01117 	ldw	r3,68(r4)
  8045a0:	00800044 	movi	r2,1
  8045a4:	10c4983a 	sll	r2,r2,r3
  8045a8:	40800215 	stw	r2,8(r8)
  8045ac:	0806f980 	call	806f98 <_Bfree>
  8045b0:	d8c01617 	ldw	r3,88(sp)
  8045b4:	18001015 	stw	zero,64(r3)
  8045b8:	8800a316 	blt	r17,zero,804848 <_dtoa_r+0x304>
  8045bc:	90000015 	stw	zero,0(r18)
  8045c0:	a8dffc2c 	andhi	r3,r21,32752
  8045c4:	009ffc34 	movhi	r2,32752
  8045c8:	18809126 	beq	r3,r2,804810 <_dtoa_r+0x2cc>
  8045cc:	000d883a 	mov	r6,zero
  8045d0:	000f883a 	mov	r7,zero
  8045d4:	a009883a 	mov	r4,r20
  8045d8:	a80b883a 	mov	r5,r21
  8045dc:	dd001215 	stw	r20,72(sp)
  8045e0:	dd401315 	stw	r21,76(sp)
  8045e4:	080b8300 	call	80b830 <__nedf2>
  8045e8:	1000171e 	bne	r2,zero,804648 <_dtoa_r+0x104>
  8045ec:	d9802717 	ldw	r6,156(sp)
  8045f0:	00800044 	movi	r2,1
  8045f4:	30800015 	stw	r2,0(r6)
  8045f8:	d8802917 	ldw	r2,164(sp)
  8045fc:	10029b26 	beq	r2,zero,80506c <_dtoa_r+0xb28>
  804600:	d9002917 	ldw	r4,164(sp)
  804604:	00802074 	movhi	r2,129
  804608:	10822444 	addi	r2,r2,2193
  80460c:	10ffffc4 	addi	r3,r2,-1
  804610:	20800015 	stw	r2,0(r4)
  804614:	1805883a 	mov	r2,r3
  804618:	dfc02517 	ldw	ra,148(sp)
  80461c:	df002417 	ldw	fp,144(sp)
  804620:	ddc02317 	ldw	r23,140(sp)
  804624:	dd802217 	ldw	r22,136(sp)
  804628:	dd402117 	ldw	r21,132(sp)
  80462c:	dd002017 	ldw	r20,128(sp)
  804630:	dcc01f17 	ldw	r19,124(sp)
  804634:	dc801e17 	ldw	r18,120(sp)
  804638:	dc401d17 	ldw	r17,116(sp)
  80463c:	dc001c17 	ldw	r16,112(sp)
  804640:	dec02604 	addi	sp,sp,152
  804644:	f800283a 	ret
  804648:	d9001617 	ldw	r4,88(sp)
  80464c:	d9401217 	ldw	r5,72(sp)
  804650:	d8800104 	addi	r2,sp,4
  804654:	a80d883a 	mov	r6,r21
  804658:	d9c00204 	addi	r7,sp,8
  80465c:	d8800015 	stw	r2,0(sp)
  804660:	08075d40 	call	8075d4 <__d2b>
  804664:	d8800715 	stw	r2,28(sp)
  804668:	a804d53a 	srli	r2,r21,20
  80466c:	1101ffcc 	andi	r4,r2,2047
  804670:	20008626 	beq	r4,zero,80488c <_dtoa_r+0x348>
  804674:	d8c01217 	ldw	r3,72(sp)
  804678:	00800434 	movhi	r2,16
  80467c:	10bfffc4 	addi	r2,r2,-1
  804680:	ddc00117 	ldw	r23,4(sp)
  804684:	a884703a 	and	r2,r21,r2
  804688:	1811883a 	mov	r8,r3
  80468c:	124ffc34 	orhi	r9,r2,16368
  804690:	25bf0044 	addi	r22,r4,-1023
  804694:	d8000815 	stw	zero,32(sp)
  804698:	0005883a 	mov	r2,zero
  80469c:	00cffe34 	movhi	r3,16376
  8046a0:	480b883a 	mov	r5,r9
  8046a4:	4009883a 	mov	r4,r8
  8046a8:	180f883a 	mov	r7,r3
  8046ac:	100d883a 	mov	r6,r2
  8046b0:	080b0980 	call	80b098 <__subdf3>
  8046b4:	0218dbf4 	movhi	r8,25455
  8046b8:	4210d844 	addi	r8,r8,17249
  8046bc:	024ff4f4 	movhi	r9,16339
  8046c0:	4a61e9c4 	addi	r9,r9,-30809
  8046c4:	480f883a 	mov	r7,r9
  8046c8:	400d883a 	mov	r6,r8
  8046cc:	180b883a 	mov	r5,r3
  8046d0:	1009883a 	mov	r4,r2
  8046d4:	080b18c0 	call	80b18c <__muldf3>
  8046d8:	0222d874 	movhi	r8,35681
  8046dc:	42322cc4 	addi	r8,r8,-14157
  8046e0:	024ff1f4 	movhi	r9,16327
  8046e4:	4a628a04 	addi	r9,r9,-30168
  8046e8:	480f883a 	mov	r7,r9
  8046ec:	400d883a 	mov	r6,r8
  8046f0:	180b883a 	mov	r5,r3
  8046f4:	1009883a 	mov	r4,r2
  8046f8:	080b1180 	call	80b118 <__adddf3>
  8046fc:	b009883a 	mov	r4,r22
  804700:	1021883a 	mov	r16,r2
  804704:	1823883a 	mov	r17,r3
  804708:	080ba500 	call	80ba50 <__floatsidf>
  80470c:	021427f4 	movhi	r8,20639
  804710:	421e7ec4 	addi	r8,r8,31227
  804714:	024ff4f4 	movhi	r9,16339
  804718:	4a5104c4 	addi	r9,r9,17427
  80471c:	480f883a 	mov	r7,r9
  804720:	400d883a 	mov	r6,r8
  804724:	180b883a 	mov	r5,r3
  804728:	1009883a 	mov	r4,r2
  80472c:	080b18c0 	call	80b18c <__muldf3>
  804730:	180f883a 	mov	r7,r3
  804734:	880b883a 	mov	r5,r17
  804738:	100d883a 	mov	r6,r2
  80473c:	8009883a 	mov	r4,r16
  804740:	080b1180 	call	80b118 <__adddf3>
  804744:	1009883a 	mov	r4,r2
  804748:	180b883a 	mov	r5,r3
  80474c:	1021883a 	mov	r16,r2
  804750:	1823883a 	mov	r17,r3
  804754:	080bb480 	call	80bb48 <__fixdfsi>
  804758:	000d883a 	mov	r6,zero
  80475c:	000f883a 	mov	r7,zero
  804760:	8009883a 	mov	r4,r16
  804764:	880b883a 	mov	r5,r17
  804768:	d8800d15 	stw	r2,52(sp)
  80476c:	080b9c80 	call	80b9c8 <__ltdf2>
  804770:	10031716 	blt	r2,zero,8053d0 <_dtoa_r+0xe8c>
  804774:	d8c00d17 	ldw	r3,52(sp)
  804778:	00800584 	movi	r2,22
  80477c:	10c1482e 	bgeu	r2,r3,804ca0 <_dtoa_r+0x75c>
  804780:	01000044 	movi	r4,1
  804784:	d9000c15 	stw	r4,48(sp)
  804788:	bd85c83a 	sub	r2,r23,r22
  80478c:	11bfffc4 	addi	r6,r2,-1
  804790:	30030b16 	blt	r6,zero,8053c0 <_dtoa_r+0xe7c>
  804794:	d9800a15 	stw	r6,40(sp)
  804798:	d8001115 	stw	zero,68(sp)
  80479c:	d8c00d17 	ldw	r3,52(sp)
  8047a0:	1802ff16 	blt	r3,zero,8053a0 <_dtoa_r+0xe5c>
  8047a4:	d9000a17 	ldw	r4,40(sp)
  8047a8:	d8c00915 	stw	r3,36(sp)
  8047ac:	d8001015 	stw	zero,64(sp)
  8047b0:	20c9883a 	add	r4,r4,r3
  8047b4:	d9000a15 	stw	r4,40(sp)
  8047b8:	d9001717 	ldw	r4,92(sp)
  8047bc:	00800244 	movi	r2,9
  8047c0:	11004636 	bltu	r2,r4,8048dc <_dtoa_r+0x398>
  8047c4:	00800144 	movi	r2,5
  8047c8:	11020416 	blt	r2,r4,804fdc <_dtoa_r+0xa98>
  8047cc:	04400044 	movi	r17,1
  8047d0:	d8c01717 	ldw	r3,92(sp)
  8047d4:	00800144 	movi	r2,5
  8047d8:	10c1ed36 	bltu	r2,r3,804f90 <_dtoa_r+0xa4c>
  8047dc:	18c5883a 	add	r2,r3,r3
  8047e0:	1085883a 	add	r2,r2,r2
  8047e4:	00c02034 	movhi	r3,128
  8047e8:	18d1fe04 	addi	r3,r3,18424
  8047ec:	10c5883a 	add	r2,r2,r3
  8047f0:	11000017 	ldw	r4,0(r2)
  8047f4:	2000683a 	jmp	r4
  8047f8:	008048e4 	muli	r2,zero,291
  8047fc:	008048e4 	muli	r2,zero,291
  804800:	008052e4 	muli	r2,zero,331
  804804:	008052bc 	xorhi	r2,zero,330
  804808:	00805300 	call	80530 <__reset-0x77fad0>
  80480c:	0080530c 	andi	r2,zero,332
  804810:	d9002717 	ldw	r4,156(sp)
  804814:	0089c3c4 	movi	r2,9999
  804818:	20800015 	stw	r2,0(r4)
  80481c:	a0001026 	beq	r20,zero,804860 <_dtoa_r+0x31c>
  804820:	00c02074 	movhi	r3,129
  804824:	18c23004 	addi	r3,r3,2240
  804828:	d9802917 	ldw	r6,164(sp)
  80482c:	303f7926 	beq	r6,zero,804614 <_dtoa_r+0xd0>
  804830:	188000c7 	ldb	r2,3(r3)
  804834:	190000c4 	addi	r4,r3,3
  804838:	1000101e 	bne	r2,zero,80487c <_dtoa_r+0x338>
  80483c:	d8802917 	ldw	r2,164(sp)
  804840:	11000015 	stw	r4,0(r2)
  804844:	003f7306 	br	804614 <_dtoa_r+0xd0>
  804848:	00a00034 	movhi	r2,32768
  80484c:	10bfffc4 	addi	r2,r2,-1
  804850:	00c00044 	movi	r3,1
  804854:	88aa703a 	and	r21,r17,r2
  804858:	90c00015 	stw	r3,0(r18)
  80485c:	003f5806 	br	8045c0 <_dtoa_r+0x7c>
  804860:	00800434 	movhi	r2,16
  804864:	10bfffc4 	addi	r2,r2,-1
  804868:	a884703a 	and	r2,r21,r2
  80486c:	103fec1e 	bne	r2,zero,804820 <_dtoa_r+0x2dc>
  804870:	00c02074 	movhi	r3,129
  804874:	18c22d04 	addi	r3,r3,2228
  804878:	003feb06 	br	804828 <_dtoa_r+0x2e4>
  80487c:	d8802917 	ldw	r2,164(sp)
  804880:	19000204 	addi	r4,r3,8
  804884:	11000015 	stw	r4,0(r2)
  804888:	003f6206 	br	804614 <_dtoa_r+0xd0>
  80488c:	ddc00117 	ldw	r23,4(sp)
  804890:	d8800217 	ldw	r2,8(sp)
  804894:	01000804 	movi	r4,32
  804898:	b8c10c84 	addi	r3,r23,1074
  80489c:	18a3883a 	add	r17,r3,r2
  8048a0:	2441b80e 	bge	r4,r17,804f84 <_dtoa_r+0xa40>
  8048a4:	00c01004 	movi	r3,64
  8048a8:	1c47c83a 	sub	r3,r3,r17
  8048ac:	88bff804 	addi	r2,r17,-32
  8048b0:	a8c6983a 	sll	r3,r21,r3
  8048b4:	a084d83a 	srl	r2,r20,r2
  8048b8:	1888b03a 	or	r4,r3,r2
  8048bc:	080bc200 	call	80bc20 <__floatunsidf>
  8048c0:	1011883a 	mov	r8,r2
  8048c4:	00bf8434 	movhi	r2,65040
  8048c8:	01000044 	movi	r4,1
  8048cc:	10d3883a 	add	r9,r2,r3
  8048d0:	8dbef344 	addi	r22,r17,-1075
  8048d4:	d9000815 	stw	r4,32(sp)
  8048d8:	003f6f06 	br	804698 <_dtoa_r+0x154>
  8048dc:	d8001715 	stw	zero,92(sp)
  8048e0:	04400044 	movi	r17,1
  8048e4:	00bfffc4 	movi	r2,-1
  8048e8:	00c00044 	movi	r3,1
  8048ec:	d8800e15 	stw	r2,56(sp)
  8048f0:	d8002615 	stw	zero,152(sp)
  8048f4:	d8800f15 	stw	r2,60(sp)
  8048f8:	d8c00b15 	stw	r3,44(sp)
  8048fc:	1021883a 	mov	r16,r2
  804900:	d8801617 	ldw	r2,88(sp)
  804904:	10001115 	stw	zero,68(r2)
  804908:	d8801617 	ldw	r2,88(sp)
  80490c:	11401117 	ldw	r5,68(r2)
  804910:	1009883a 	mov	r4,r2
  804914:	08075180 	call	807518 <_Balloc>
  804918:	d8c01617 	ldw	r3,88(sp)
  80491c:	d8800515 	stw	r2,20(sp)
  804920:	18801015 	stw	r2,64(r3)
  804924:	00800384 	movi	r2,14
  804928:	14006836 	bltu	r2,r16,804acc <_dtoa_r+0x588>
  80492c:	8805003a 	cmpeq	r2,r17,zero
  804930:	1000661e 	bne	r2,zero,804acc <_dtoa_r+0x588>
  804934:	d9000d17 	ldw	r4,52(sp)
  804938:	0102300e 	bge	zero,r4,8051fc <_dtoa_r+0xcb8>
  80493c:	208003cc 	andi	r2,r4,15
  804940:	100490fa 	slli	r2,r2,3
  804944:	2025d13a 	srai	r18,r4,4
  804948:	00c02074 	movhi	r3,129
  80494c:	18c24104 	addi	r3,r3,2308
  804950:	10c5883a 	add	r2,r2,r3
  804954:	90c0040c 	andi	r3,r18,16
  804958:	14000017 	ldw	r16,0(r2)
  80495c:	14400117 	ldw	r17,4(r2)
  804960:	18036a1e 	bne	r3,zero,80570c <_dtoa_r+0x11c8>
  804964:	05800084 	movi	r22,2
  804968:	90001026 	beq	r18,zero,8049ac <_dtoa_r+0x468>
  80496c:	04c02074 	movhi	r19,129
  804970:	9cc27304 	addi	r19,r19,2508
  804974:	9080004c 	andi	r2,r18,1
  804978:	1005003a 	cmpeq	r2,r2,zero
  80497c:	1000081e 	bne	r2,zero,8049a0 <_dtoa_r+0x45c>
  804980:	99800017 	ldw	r6,0(r19)
  804984:	99c00117 	ldw	r7,4(r19)
  804988:	880b883a 	mov	r5,r17
  80498c:	8009883a 	mov	r4,r16
  804990:	080b18c0 	call	80b18c <__muldf3>
  804994:	1021883a 	mov	r16,r2
  804998:	b5800044 	addi	r22,r22,1
  80499c:	1823883a 	mov	r17,r3
  8049a0:	9025d07a 	srai	r18,r18,1
  8049a4:	9cc00204 	addi	r19,r19,8
  8049a8:	903ff21e 	bne	r18,zero,804974 <_dtoa_r+0x430>
  8049ac:	a80b883a 	mov	r5,r21
  8049b0:	a009883a 	mov	r4,r20
  8049b4:	880f883a 	mov	r7,r17
  8049b8:	800d883a 	mov	r6,r16
  8049bc:	080b5500 	call	80b550 <__divdf3>
  8049c0:	1029883a 	mov	r20,r2
  8049c4:	182b883a 	mov	r21,r3
  8049c8:	d8c00c17 	ldw	r3,48(sp)
  8049cc:	1805003a 	cmpeq	r2,r3,zero
  8049d0:	1000081e 	bne	r2,zero,8049f4 <_dtoa_r+0x4b0>
  8049d4:	0005883a 	mov	r2,zero
  8049d8:	00cffc34 	movhi	r3,16368
  8049dc:	180f883a 	mov	r7,r3
  8049e0:	a009883a 	mov	r4,r20
  8049e4:	a80b883a 	mov	r5,r21
  8049e8:	100d883a 	mov	r6,r2
  8049ec:	080b9c80 	call	80b9c8 <__ltdf2>
  8049f0:	1003fe16 	blt	r2,zero,8059ec <_dtoa_r+0x14a8>
  8049f4:	b009883a 	mov	r4,r22
  8049f8:	080ba500 	call	80ba50 <__floatsidf>
  8049fc:	180b883a 	mov	r5,r3
  804a00:	1009883a 	mov	r4,r2
  804a04:	a00d883a 	mov	r6,r20
  804a08:	a80f883a 	mov	r7,r21
  804a0c:	080b18c0 	call	80b18c <__muldf3>
  804a10:	0011883a 	mov	r8,zero
  804a14:	02500734 	movhi	r9,16412
  804a18:	1009883a 	mov	r4,r2
  804a1c:	180b883a 	mov	r5,r3
  804a20:	480f883a 	mov	r7,r9
  804a24:	400d883a 	mov	r6,r8
  804a28:	080b1180 	call	80b118 <__adddf3>
  804a2c:	d9000f17 	ldw	r4,60(sp)
  804a30:	102d883a 	mov	r22,r2
  804a34:	00bf3034 	movhi	r2,64704
  804a38:	18b9883a 	add	fp,r3,r2
  804a3c:	e02f883a 	mov	r23,fp
  804a40:	20028f1e 	bne	r4,zero,805480 <_dtoa_r+0xf3c>
  804a44:	0005883a 	mov	r2,zero
  804a48:	00d00534 	movhi	r3,16404
  804a4c:	a009883a 	mov	r4,r20
  804a50:	a80b883a 	mov	r5,r21
  804a54:	180f883a 	mov	r7,r3
  804a58:	100d883a 	mov	r6,r2
  804a5c:	080b0980 	call	80b098 <__subdf3>
  804a60:	1009883a 	mov	r4,r2
  804a64:	e00f883a 	mov	r7,fp
  804a68:	180b883a 	mov	r5,r3
  804a6c:	b00d883a 	mov	r6,r22
  804a70:	1025883a 	mov	r18,r2
  804a74:	1827883a 	mov	r19,r3
  804a78:	080b8b80 	call	80b8b8 <__gtdf2>
  804a7c:	00834f16 	blt	zero,r2,8057bc <_dtoa_r+0x1278>
  804a80:	e0e0003c 	xorhi	r3,fp,32768
  804a84:	9009883a 	mov	r4,r18
  804a88:	980b883a 	mov	r5,r19
  804a8c:	180f883a 	mov	r7,r3
  804a90:	b00d883a 	mov	r6,r22
  804a94:	080b9c80 	call	80b9c8 <__ltdf2>
  804a98:	1000080e 	bge	r2,zero,804abc <_dtoa_r+0x578>
  804a9c:	0027883a 	mov	r19,zero
  804aa0:	0025883a 	mov	r18,zero
  804aa4:	d8802617 	ldw	r2,152(sp)
  804aa8:	df000517 	ldw	fp,20(sp)
  804aac:	d8000615 	stw	zero,24(sp)
  804ab0:	0084303a 	nor	r2,zero,r2
  804ab4:	d8800d15 	stw	r2,52(sp)
  804ab8:	00019b06 	br	805128 <_dtoa_r+0xbe4>
  804abc:	d9801217 	ldw	r6,72(sp)
  804ac0:	d8801317 	ldw	r2,76(sp)
  804ac4:	3029883a 	mov	r20,r6
  804ac8:	102b883a 	mov	r21,r2
  804acc:	d8c00217 	ldw	r3,8(sp)
  804ad0:	18008516 	blt	r3,zero,804ce8 <_dtoa_r+0x7a4>
  804ad4:	d9000d17 	ldw	r4,52(sp)
  804ad8:	00800384 	movi	r2,14
  804adc:	11008216 	blt	r2,r4,804ce8 <_dtoa_r+0x7a4>
  804ae0:	200490fa 	slli	r2,r4,3
  804ae4:	d9802617 	ldw	r6,152(sp)
  804ae8:	00c02074 	movhi	r3,129
  804aec:	18c24104 	addi	r3,r3,2308
  804af0:	10c5883a 	add	r2,r2,r3
  804af4:	14800017 	ldw	r18,0(r2)
  804af8:	14c00117 	ldw	r19,4(r2)
  804afc:	30031e16 	blt	r6,zero,805778 <_dtoa_r+0x1234>
  804b00:	d9000517 	ldw	r4,20(sp)
  804b04:	d8c00f17 	ldw	r3,60(sp)
  804b08:	a823883a 	mov	r17,r21
  804b0c:	a021883a 	mov	r16,r20
  804b10:	192b883a 	add	r21,r3,r4
  804b14:	2039883a 	mov	fp,r4
  804b18:	00000f06 	br	804b58 <_dtoa_r+0x614>
  804b1c:	0005883a 	mov	r2,zero
  804b20:	00d00934 	movhi	r3,16420
  804b24:	5009883a 	mov	r4,r10
  804b28:	580b883a 	mov	r5,r11
  804b2c:	180f883a 	mov	r7,r3
  804b30:	100d883a 	mov	r6,r2
  804b34:	080b18c0 	call	80b18c <__muldf3>
  804b38:	180b883a 	mov	r5,r3
  804b3c:	000d883a 	mov	r6,zero
  804b40:	000f883a 	mov	r7,zero
  804b44:	1009883a 	mov	r4,r2
  804b48:	1021883a 	mov	r16,r2
  804b4c:	1823883a 	mov	r17,r3
  804b50:	080b8300 	call	80b830 <__nedf2>
  804b54:	10004526 	beq	r2,zero,804c6c <_dtoa_r+0x728>
  804b58:	900d883a 	mov	r6,r18
  804b5c:	980f883a 	mov	r7,r19
  804b60:	8009883a 	mov	r4,r16
  804b64:	880b883a 	mov	r5,r17
  804b68:	080b5500 	call	80b550 <__divdf3>
  804b6c:	180b883a 	mov	r5,r3
  804b70:	1009883a 	mov	r4,r2
  804b74:	080bb480 	call	80bb48 <__fixdfsi>
  804b78:	1009883a 	mov	r4,r2
  804b7c:	1029883a 	mov	r20,r2
  804b80:	080ba500 	call	80ba50 <__floatsidf>
  804b84:	180f883a 	mov	r7,r3
  804b88:	9009883a 	mov	r4,r18
  804b8c:	980b883a 	mov	r5,r19
  804b90:	100d883a 	mov	r6,r2
  804b94:	080b18c0 	call	80b18c <__muldf3>
  804b98:	180f883a 	mov	r7,r3
  804b9c:	880b883a 	mov	r5,r17
  804ba0:	8009883a 	mov	r4,r16
  804ba4:	100d883a 	mov	r6,r2
  804ba8:	080b0980 	call	80b098 <__subdf3>
  804bac:	1015883a 	mov	r10,r2
  804bb0:	a0800c04 	addi	r2,r20,48
  804bb4:	e0800005 	stb	r2,0(fp)
  804bb8:	e7000044 	addi	fp,fp,1
  804bbc:	1817883a 	mov	r11,r3
  804bc0:	e57fd61e 	bne	fp,r21,804b1c <_dtoa_r+0x5d8>
  804bc4:	500d883a 	mov	r6,r10
  804bc8:	180f883a 	mov	r7,r3
  804bcc:	5009883a 	mov	r4,r10
  804bd0:	180b883a 	mov	r5,r3
  804bd4:	080b1180 	call	80b118 <__adddf3>
  804bd8:	100d883a 	mov	r6,r2
  804bdc:	9009883a 	mov	r4,r18
  804be0:	980b883a 	mov	r5,r19
  804be4:	180f883a 	mov	r7,r3
  804be8:	1021883a 	mov	r16,r2
  804bec:	1823883a 	mov	r17,r3
  804bf0:	080b9c80 	call	80b9c8 <__ltdf2>
  804bf4:	10000816 	blt	r2,zero,804c18 <_dtoa_r+0x6d4>
  804bf8:	980b883a 	mov	r5,r19
  804bfc:	800d883a 	mov	r6,r16
  804c00:	880f883a 	mov	r7,r17
  804c04:	9009883a 	mov	r4,r18
  804c08:	080b7a80 	call	80b7a8 <__eqdf2>
  804c0c:	1000171e 	bne	r2,zero,804c6c <_dtoa_r+0x728>
  804c10:	a080004c 	andi	r2,r20,1
  804c14:	10001526 	beq	r2,zero,804c6c <_dtoa_r+0x728>
  804c18:	d8800d17 	ldw	r2,52(sp)
  804c1c:	d8800415 	stw	r2,16(sp)
  804c20:	e009883a 	mov	r4,fp
  804c24:	213fffc4 	addi	r4,r4,-1
  804c28:	20c00007 	ldb	r3,0(r4)
  804c2c:	00800e44 	movi	r2,57
  804c30:	1880081e 	bne	r3,r2,804c54 <_dtoa_r+0x710>
  804c34:	d8800517 	ldw	r2,20(sp)
  804c38:	113ffa1e 	bne	r2,r4,804c24 <_dtoa_r+0x6e0>
  804c3c:	d8c00417 	ldw	r3,16(sp)
  804c40:	d9800517 	ldw	r6,20(sp)
  804c44:	00800c04 	movi	r2,48
  804c48:	18c00044 	addi	r3,r3,1
  804c4c:	d8c00415 	stw	r3,16(sp)
  804c50:	30800005 	stb	r2,0(r6)
  804c54:	20800003 	ldbu	r2,0(r4)
  804c58:	d8c00417 	ldw	r3,16(sp)
  804c5c:	27000044 	addi	fp,r4,1
  804c60:	10800044 	addi	r2,r2,1
  804c64:	d8c00d15 	stw	r3,52(sp)
  804c68:	20800005 	stb	r2,0(r4)
  804c6c:	d9001617 	ldw	r4,88(sp)
  804c70:	d9400717 	ldw	r5,28(sp)
  804c74:	0806f980 	call	806f98 <_Bfree>
  804c78:	e0000005 	stb	zero,0(fp)
  804c7c:	d9800d17 	ldw	r6,52(sp)
  804c80:	d8c02717 	ldw	r3,156(sp)
  804c84:	d9002917 	ldw	r4,164(sp)
  804c88:	30800044 	addi	r2,r6,1
  804c8c:	18800015 	stw	r2,0(r3)
  804c90:	20029c26 	beq	r4,zero,805704 <_dtoa_r+0x11c0>
  804c94:	d8c00517 	ldw	r3,20(sp)
  804c98:	27000015 	stw	fp,0(r4)
  804c9c:	003e5d06 	br	804614 <_dtoa_r+0xd0>
  804ca0:	d9800d17 	ldw	r6,52(sp)
  804ca4:	00c02074 	movhi	r3,129
  804ca8:	18c24104 	addi	r3,r3,2308
  804cac:	d9001217 	ldw	r4,72(sp)
  804cb0:	300490fa 	slli	r2,r6,3
  804cb4:	d9401317 	ldw	r5,76(sp)
  804cb8:	10c5883a 	add	r2,r2,r3
  804cbc:	12000017 	ldw	r8,0(r2)
  804cc0:	12400117 	ldw	r9,4(r2)
  804cc4:	400d883a 	mov	r6,r8
  804cc8:	480f883a 	mov	r7,r9
  804ccc:	080b9c80 	call	80b9c8 <__ltdf2>
  804cd0:	1000030e 	bge	r2,zero,804ce0 <_dtoa_r+0x79c>
  804cd4:	d8800d17 	ldw	r2,52(sp)
  804cd8:	10bfffc4 	addi	r2,r2,-1
  804cdc:	d8800d15 	stw	r2,52(sp)
  804ce0:	d8000c15 	stw	zero,48(sp)
  804ce4:	003ea806 	br	804788 <_dtoa_r+0x244>
  804ce8:	d9000b17 	ldw	r4,44(sp)
  804cec:	202cc03a 	cmpne	r22,r4,zero
  804cf0:	b000c71e 	bne	r22,zero,805010 <_dtoa_r+0xacc>
  804cf4:	dc001117 	ldw	r16,68(sp)
  804cf8:	dc801017 	ldw	r18,64(sp)
  804cfc:	0027883a 	mov	r19,zero
  804d00:	04000b0e 	bge	zero,r16,804d30 <_dtoa_r+0x7ec>
  804d04:	d8c00a17 	ldw	r3,40(sp)
  804d08:	00c0090e 	bge	zero,r3,804d30 <_dtoa_r+0x7ec>
  804d0c:	8005883a 	mov	r2,r16
  804d10:	1c011316 	blt	r3,r16,805160 <_dtoa_r+0xc1c>
  804d14:	d9000a17 	ldw	r4,40(sp)
  804d18:	d9801117 	ldw	r6,68(sp)
  804d1c:	80a1c83a 	sub	r16,r16,r2
  804d20:	2089c83a 	sub	r4,r4,r2
  804d24:	308dc83a 	sub	r6,r6,r2
  804d28:	d9000a15 	stw	r4,40(sp)
  804d2c:	d9801115 	stw	r6,68(sp)
  804d30:	d8801017 	ldw	r2,64(sp)
  804d34:	0080150e 	bge	zero,r2,804d8c <_dtoa_r+0x848>
  804d38:	d8c00b17 	ldw	r3,44(sp)
  804d3c:	1805003a 	cmpeq	r2,r3,zero
  804d40:	1001c91e 	bne	r2,zero,805468 <_dtoa_r+0xf24>
  804d44:	04800e0e 	bge	zero,r18,804d80 <_dtoa_r+0x83c>
  804d48:	d9001617 	ldw	r4,88(sp)
  804d4c:	980b883a 	mov	r5,r19
  804d50:	900d883a 	mov	r6,r18
  804d54:	0807d4c0 	call	807d4c <__pow5mult>
  804d58:	d9001617 	ldw	r4,88(sp)
  804d5c:	d9800717 	ldw	r6,28(sp)
  804d60:	100b883a 	mov	r5,r2
  804d64:	1027883a 	mov	r19,r2
  804d68:	0807a280 	call	807a28 <__multiply>
  804d6c:	d9001617 	ldw	r4,88(sp)
  804d70:	d9400717 	ldw	r5,28(sp)
  804d74:	1023883a 	mov	r17,r2
  804d78:	0806f980 	call	806f98 <_Bfree>
  804d7c:	dc400715 	stw	r17,28(sp)
  804d80:	d9001017 	ldw	r4,64(sp)
  804d84:	248dc83a 	sub	r6,r4,r18
  804d88:	30010e1e 	bne	r6,zero,8051c4 <_dtoa_r+0xc80>
  804d8c:	d9001617 	ldw	r4,88(sp)
  804d90:	04400044 	movi	r17,1
  804d94:	880b883a 	mov	r5,r17
  804d98:	0807c100 	call	807c10 <__i2b>
  804d9c:	d9800917 	ldw	r6,36(sp)
  804da0:	1025883a 	mov	r18,r2
  804da4:	0180040e 	bge	zero,r6,804db8 <_dtoa_r+0x874>
  804da8:	d9001617 	ldw	r4,88(sp)
  804dac:	100b883a 	mov	r5,r2
  804db0:	0807d4c0 	call	807d4c <__pow5mult>
  804db4:	1025883a 	mov	r18,r2
  804db8:	d8801717 	ldw	r2,92(sp)
  804dbc:	8880f30e 	bge	r17,r2,80518c <_dtoa_r+0xc48>
  804dc0:	0023883a 	mov	r17,zero
  804dc4:	d9800917 	ldw	r6,36(sp)
  804dc8:	30019e1e 	bne	r6,zero,805444 <_dtoa_r+0xf00>
  804dcc:	00c00044 	movi	r3,1
  804dd0:	d9000a17 	ldw	r4,40(sp)
  804dd4:	20c5883a 	add	r2,r4,r3
  804dd8:	10c007cc 	andi	r3,r2,31
  804ddc:	1800841e 	bne	r3,zero,804ff0 <_dtoa_r+0xaac>
  804de0:	00800704 	movi	r2,28
  804de4:	d9000a17 	ldw	r4,40(sp)
  804de8:	d9801117 	ldw	r6,68(sp)
  804dec:	80a1883a 	add	r16,r16,r2
  804df0:	2089883a 	add	r4,r4,r2
  804df4:	308d883a 	add	r6,r6,r2
  804df8:	d9000a15 	stw	r4,40(sp)
  804dfc:	d9801115 	stw	r6,68(sp)
  804e00:	d8801117 	ldw	r2,68(sp)
  804e04:	0080050e 	bge	zero,r2,804e1c <_dtoa_r+0x8d8>
  804e08:	d9400717 	ldw	r5,28(sp)
  804e0c:	d9001617 	ldw	r4,88(sp)
  804e10:	100d883a 	mov	r6,r2
  804e14:	08078dc0 	call	8078dc <__lshift>
  804e18:	d8800715 	stw	r2,28(sp)
  804e1c:	d8c00a17 	ldw	r3,40(sp)
  804e20:	00c0050e 	bge	zero,r3,804e38 <_dtoa_r+0x8f4>
  804e24:	d9001617 	ldw	r4,88(sp)
  804e28:	900b883a 	mov	r5,r18
  804e2c:	180d883a 	mov	r6,r3
  804e30:	08078dc0 	call	8078dc <__lshift>
  804e34:	1025883a 	mov	r18,r2
  804e38:	d9000c17 	ldw	r4,48(sp)
  804e3c:	2005003a 	cmpeq	r2,r4,zero
  804e40:	10016f26 	beq	r2,zero,805400 <_dtoa_r+0xebc>
  804e44:	d9000f17 	ldw	r4,60(sp)
  804e48:	0102170e 	bge	zero,r4,8056a8 <_dtoa_r+0x1164>
  804e4c:	d9800b17 	ldw	r6,44(sp)
  804e50:	3005003a 	cmpeq	r2,r6,zero
  804e54:	1000881e 	bne	r2,zero,805078 <_dtoa_r+0xb34>
  804e58:	0400050e 	bge	zero,r16,804e70 <_dtoa_r+0x92c>
  804e5c:	d9001617 	ldw	r4,88(sp)
  804e60:	980b883a 	mov	r5,r19
  804e64:	800d883a 	mov	r6,r16
  804e68:	08078dc0 	call	8078dc <__lshift>
  804e6c:	1027883a 	mov	r19,r2
  804e70:	8804c03a 	cmpne	r2,r17,zero
  804e74:	1002541e 	bne	r2,zero,8057c8 <_dtoa_r+0x1284>
  804e78:	980b883a 	mov	r5,r19
  804e7c:	dd800517 	ldw	r22,20(sp)
  804e80:	dcc00615 	stw	r19,24(sp)
  804e84:	a700004c 	andi	fp,r20,1
  804e88:	2827883a 	mov	r19,r5
  804e8c:	d9000717 	ldw	r4,28(sp)
  804e90:	900b883a 	mov	r5,r18
  804e94:	080432c0 	call	80432c <quorem>
  804e98:	d9000717 	ldw	r4,28(sp)
  804e9c:	d9400617 	ldw	r5,24(sp)
  804ea0:	1023883a 	mov	r17,r2
  804ea4:	8dc00c04 	addi	r23,r17,48
  804ea8:	08070f40 	call	8070f4 <__mcmp>
  804eac:	d9001617 	ldw	r4,88(sp)
  804eb0:	900b883a 	mov	r5,r18
  804eb4:	980d883a 	mov	r6,r19
  804eb8:	1029883a 	mov	r20,r2
  804ebc:	08077500 	call	807750 <__mdiff>
  804ec0:	102b883a 	mov	r21,r2
  804ec4:	10800317 	ldw	r2,12(r2)
  804ec8:	1001281e 	bne	r2,zero,80536c <_dtoa_r+0xe28>
  804ecc:	d9000717 	ldw	r4,28(sp)
  804ed0:	a80b883a 	mov	r5,r21
  804ed4:	08070f40 	call	8070f4 <__mcmp>
  804ed8:	d9001617 	ldw	r4,88(sp)
  804edc:	1021883a 	mov	r16,r2
  804ee0:	a80b883a 	mov	r5,r21
  804ee4:	0806f980 	call	806f98 <_Bfree>
  804ee8:	8000041e 	bne	r16,zero,804efc <_dtoa_r+0x9b8>
  804eec:	d8801717 	ldw	r2,92(sp)
  804ef0:	1000021e 	bne	r2,zero,804efc <_dtoa_r+0x9b8>
  804ef4:	e004c03a 	cmpne	r2,fp,zero
  804ef8:	10011726 	beq	r2,zero,805358 <_dtoa_r+0xe14>
  804efc:	a0010616 	blt	r20,zero,805318 <_dtoa_r+0xdd4>
  804f00:	a000041e 	bne	r20,zero,804f14 <_dtoa_r+0x9d0>
  804f04:	d8c01717 	ldw	r3,92(sp)
  804f08:	1800021e 	bne	r3,zero,804f14 <_dtoa_r+0x9d0>
  804f0c:	e004c03a 	cmpne	r2,fp,zero
  804f10:	10010126 	beq	r2,zero,805318 <_dtoa_r+0xdd4>
  804f14:	04023d16 	blt	zero,r16,80580c <_dtoa_r+0x12c8>
  804f18:	b5c00005 	stb	r23,0(r22)
  804f1c:	d9800517 	ldw	r6,20(sp)
  804f20:	d9000f17 	ldw	r4,60(sp)
  804f24:	b5800044 	addi	r22,r22,1
  804f28:	3105883a 	add	r2,r6,r4
  804f2c:	b0806526 	beq	r22,r2,8050c4 <_dtoa_r+0xb80>
  804f30:	d9400717 	ldw	r5,28(sp)
  804f34:	d9001617 	ldw	r4,88(sp)
  804f38:	01800284 	movi	r6,10
  804f3c:	000f883a 	mov	r7,zero
  804f40:	0807c4c0 	call	807c4c <__multadd>
  804f44:	d8800715 	stw	r2,28(sp)
  804f48:	d8800617 	ldw	r2,24(sp)
  804f4c:	14c10c26 	beq	r2,r19,805380 <_dtoa_r+0xe3c>
  804f50:	d9400617 	ldw	r5,24(sp)
  804f54:	d9001617 	ldw	r4,88(sp)
  804f58:	01800284 	movi	r6,10
  804f5c:	000f883a 	mov	r7,zero
  804f60:	0807c4c0 	call	807c4c <__multadd>
  804f64:	d9001617 	ldw	r4,88(sp)
  804f68:	980b883a 	mov	r5,r19
  804f6c:	01800284 	movi	r6,10
  804f70:	000f883a 	mov	r7,zero
  804f74:	d8800615 	stw	r2,24(sp)
  804f78:	0807c4c0 	call	807c4c <__multadd>
  804f7c:	1027883a 	mov	r19,r2
  804f80:	003fc206 	br	804e8c <_dtoa_r+0x948>
  804f84:	2445c83a 	sub	r2,r4,r17
  804f88:	a088983a 	sll	r4,r20,r2
  804f8c:	003e4b06 	br	8048bc <_dtoa_r+0x378>
  804f90:	01bfffc4 	movi	r6,-1
  804f94:	00800044 	movi	r2,1
  804f98:	d9800e15 	stw	r6,56(sp)
  804f9c:	d9800f15 	stw	r6,60(sp)
  804fa0:	d8800b15 	stw	r2,44(sp)
  804fa4:	d8c01617 	ldw	r3,88(sp)
  804fa8:	008005c4 	movi	r2,23
  804fac:	18001115 	stw	zero,68(r3)
  804fb0:	1580082e 	bgeu	r2,r22,804fd4 <_dtoa_r+0xa90>
  804fb4:	00c00104 	movi	r3,4
  804fb8:	0009883a 	mov	r4,zero
  804fbc:	18c7883a 	add	r3,r3,r3
  804fc0:	18800504 	addi	r2,r3,20
  804fc4:	21000044 	addi	r4,r4,1
  804fc8:	b0bffc2e 	bgeu	r22,r2,804fbc <_dtoa_r+0xa78>
  804fcc:	d9801617 	ldw	r6,88(sp)
  804fd0:	31001115 	stw	r4,68(r6)
  804fd4:	dc000f17 	ldw	r16,60(sp)
  804fd8:	003e4b06 	br	804908 <_dtoa_r+0x3c4>
  804fdc:	d9801717 	ldw	r6,92(sp)
  804fe0:	0023883a 	mov	r17,zero
  804fe4:	31bfff04 	addi	r6,r6,-4
  804fe8:	d9801715 	stw	r6,92(sp)
  804fec:	003df806 	br	8047d0 <_dtoa_r+0x28c>
  804ff0:	00800804 	movi	r2,32
  804ff4:	10c9c83a 	sub	r4,r2,r3
  804ff8:	00c00104 	movi	r3,4
  804ffc:	19005a16 	blt	r3,r4,805168 <_dtoa_r+0xc24>
  805000:	008000c4 	movi	r2,3
  805004:	113f7e16 	blt	r2,r4,804e00 <_dtoa_r+0x8bc>
  805008:	20800704 	addi	r2,r4,28
  80500c:	003f7506 	br	804de4 <_dtoa_r+0x8a0>
  805010:	d9801717 	ldw	r6,92(sp)
  805014:	00800044 	movi	r2,1
  805018:	1180a10e 	bge	r2,r6,8052a0 <_dtoa_r+0xd5c>
  80501c:	d9800f17 	ldw	r6,60(sp)
  805020:	d8c01017 	ldw	r3,64(sp)
  805024:	30bfffc4 	addi	r2,r6,-1
  805028:	1881c616 	blt	r3,r2,805744 <_dtoa_r+0x1200>
  80502c:	18a5c83a 	sub	r18,r3,r2
  805030:	d8800f17 	ldw	r2,60(sp)
  805034:	10026216 	blt	r2,zero,8059c0 <_dtoa_r+0x147c>
  805038:	dc001117 	ldw	r16,68(sp)
  80503c:	1007883a 	mov	r3,r2
  805040:	d9800a17 	ldw	r6,40(sp)
  805044:	d8801117 	ldw	r2,68(sp)
  805048:	d9001617 	ldw	r4,88(sp)
  80504c:	30cd883a 	add	r6,r6,r3
  805050:	10c5883a 	add	r2,r2,r3
  805054:	01400044 	movi	r5,1
  805058:	d9800a15 	stw	r6,40(sp)
  80505c:	d8801115 	stw	r2,68(sp)
  805060:	0807c100 	call	807c10 <__i2b>
  805064:	1027883a 	mov	r19,r2
  805068:	003f2506 	br	804d00 <_dtoa_r+0x7bc>
  80506c:	00c02074 	movhi	r3,129
  805070:	18c22404 	addi	r3,r3,2192
  805074:	003d6706 	br	804614 <_dtoa_r+0xd0>
  805078:	dd800517 	ldw	r22,20(sp)
  80507c:	04000044 	movi	r16,1
  805080:	00000706 	br	8050a0 <_dtoa_r+0xb5c>
  805084:	d9400717 	ldw	r5,28(sp)
  805088:	d9001617 	ldw	r4,88(sp)
  80508c:	01800284 	movi	r6,10
  805090:	000f883a 	mov	r7,zero
  805094:	0807c4c0 	call	807c4c <__multadd>
  805098:	d8800715 	stw	r2,28(sp)
  80509c:	84000044 	addi	r16,r16,1
  8050a0:	d9000717 	ldw	r4,28(sp)
  8050a4:	900b883a 	mov	r5,r18
  8050a8:	080432c0 	call	80432c <quorem>
  8050ac:	15c00c04 	addi	r23,r2,48
  8050b0:	b5c00005 	stb	r23,0(r22)
  8050b4:	d8c00f17 	ldw	r3,60(sp)
  8050b8:	b5800044 	addi	r22,r22,1
  8050bc:	80fff116 	blt	r16,r3,805084 <_dtoa_r+0xb40>
  8050c0:	d8000615 	stw	zero,24(sp)
  8050c4:	d9400717 	ldw	r5,28(sp)
  8050c8:	d9001617 	ldw	r4,88(sp)
  8050cc:	01800044 	movi	r6,1
  8050d0:	08078dc0 	call	8078dc <__lshift>
  8050d4:	1009883a 	mov	r4,r2
  8050d8:	900b883a 	mov	r5,r18
  8050dc:	d8800715 	stw	r2,28(sp)
  8050e0:	08070f40 	call	8070f4 <__mcmp>
  8050e4:	00803c0e 	bge	zero,r2,8051d8 <_dtoa_r+0xc94>
  8050e8:	b009883a 	mov	r4,r22
  8050ec:	213fffc4 	addi	r4,r4,-1
  8050f0:	21400003 	ldbu	r5,0(r4)
  8050f4:	00800e44 	movi	r2,57
  8050f8:	28c03fcc 	andi	r3,r5,255
  8050fc:	18c0201c 	xori	r3,r3,128
  805100:	18ffe004 	addi	r3,r3,-128
  805104:	1881981e 	bne	r3,r2,805768 <_dtoa_r+0x1224>
  805108:	d9800517 	ldw	r6,20(sp)
  80510c:	21bff71e 	bne	r4,r6,8050ec <_dtoa_r+0xba8>
  805110:	d8800d17 	ldw	r2,52(sp)
  805114:	37000044 	addi	fp,r6,1
  805118:	10800044 	addi	r2,r2,1
  80511c:	d8800d15 	stw	r2,52(sp)
  805120:	00800c44 	movi	r2,49
  805124:	30800005 	stb	r2,0(r6)
  805128:	d9001617 	ldw	r4,88(sp)
  80512c:	900b883a 	mov	r5,r18
  805130:	0806f980 	call	806f98 <_Bfree>
  805134:	983ecd26 	beq	r19,zero,804c6c <_dtoa_r+0x728>
  805138:	d8c00617 	ldw	r3,24(sp)
  80513c:	18000426 	beq	r3,zero,805150 <_dtoa_r+0xc0c>
  805140:	1cc00326 	beq	r3,r19,805150 <_dtoa_r+0xc0c>
  805144:	d9001617 	ldw	r4,88(sp)
  805148:	180b883a 	mov	r5,r3
  80514c:	0806f980 	call	806f98 <_Bfree>
  805150:	d9001617 	ldw	r4,88(sp)
  805154:	980b883a 	mov	r5,r19
  805158:	0806f980 	call	806f98 <_Bfree>
  80515c:	003ec306 	br	804c6c <_dtoa_r+0x728>
  805160:	1805883a 	mov	r2,r3
  805164:	003eeb06 	br	804d14 <_dtoa_r+0x7d0>
  805168:	d9800a17 	ldw	r6,40(sp)
  80516c:	d8c01117 	ldw	r3,68(sp)
  805170:	20bfff04 	addi	r2,r4,-4
  805174:	308d883a 	add	r6,r6,r2
  805178:	1887883a 	add	r3,r3,r2
  80517c:	80a1883a 	add	r16,r16,r2
  805180:	d9800a15 	stw	r6,40(sp)
  805184:	d8c01115 	stw	r3,68(sp)
  805188:	003f1d06 	br	804e00 <_dtoa_r+0x8bc>
  80518c:	a03f0c1e 	bne	r20,zero,804dc0 <_dtoa_r+0x87c>
  805190:	00800434 	movhi	r2,16
  805194:	10bfffc4 	addi	r2,r2,-1
  805198:	a884703a 	and	r2,r21,r2
  80519c:	103f081e 	bne	r2,zero,804dc0 <_dtoa_r+0x87c>
  8051a0:	a89ffc2c 	andhi	r2,r21,32752
  8051a4:	103f0626 	beq	r2,zero,804dc0 <_dtoa_r+0x87c>
  8051a8:	d8c01117 	ldw	r3,68(sp)
  8051ac:	d9000a17 	ldw	r4,40(sp)
  8051b0:	18c00044 	addi	r3,r3,1
  8051b4:	21000044 	addi	r4,r4,1
  8051b8:	d8c01115 	stw	r3,68(sp)
  8051bc:	d9000a15 	stw	r4,40(sp)
  8051c0:	003f0006 	br	804dc4 <_dtoa_r+0x880>
  8051c4:	d9400717 	ldw	r5,28(sp)
  8051c8:	d9001617 	ldw	r4,88(sp)
  8051cc:	0807d4c0 	call	807d4c <__pow5mult>
  8051d0:	d8800715 	stw	r2,28(sp)
  8051d4:	003eed06 	br	804d8c <_dtoa_r+0x848>
  8051d8:	1000021e 	bne	r2,zero,8051e4 <_dtoa_r+0xca0>
  8051dc:	b880004c 	andi	r2,r23,1
  8051e0:	103fc11e 	bne	r2,zero,8050e8 <_dtoa_r+0xba4>
  8051e4:	b5bfffc4 	addi	r22,r22,-1
  8051e8:	b0c00007 	ldb	r3,0(r22)
  8051ec:	00800c04 	movi	r2,48
  8051f0:	18bffc26 	beq	r3,r2,8051e4 <_dtoa_r+0xca0>
  8051f4:	b7000044 	addi	fp,r22,1
  8051f8:	003fcb06 	br	805128 <_dtoa_r+0xbe4>
  8051fc:	d9800d17 	ldw	r6,52(sp)
  805200:	018fc83a 	sub	r7,zero,r6
  805204:	3801f726 	beq	r7,zero,8059e4 <_dtoa_r+0x14a0>
  805208:	398003cc 	andi	r6,r7,15
  80520c:	300c90fa 	slli	r6,r6,3
  805210:	01402074 	movhi	r5,129
  805214:	29424104 	addi	r5,r5,2308
  805218:	d9001217 	ldw	r4,72(sp)
  80521c:	314d883a 	add	r6,r6,r5
  805220:	30c00117 	ldw	r3,4(r6)
  805224:	30800017 	ldw	r2,0(r6)
  805228:	d9401317 	ldw	r5,76(sp)
  80522c:	3821d13a 	srai	r16,r7,4
  805230:	100d883a 	mov	r6,r2
  805234:	180f883a 	mov	r7,r3
  805238:	080b18c0 	call	80b18c <__muldf3>
  80523c:	1011883a 	mov	r8,r2
  805240:	1813883a 	mov	r9,r3
  805244:	1029883a 	mov	r20,r2
  805248:	182b883a 	mov	r21,r3
  80524c:	8001e526 	beq	r16,zero,8059e4 <_dtoa_r+0x14a0>
  805250:	05800084 	movi	r22,2
  805254:	04402074 	movhi	r17,129
  805258:	8c427304 	addi	r17,r17,2508
  80525c:	8080004c 	andi	r2,r16,1
  805260:	1005003a 	cmpeq	r2,r2,zero
  805264:	1000081e 	bne	r2,zero,805288 <_dtoa_r+0xd44>
  805268:	89800017 	ldw	r6,0(r17)
  80526c:	89c00117 	ldw	r7,4(r17)
  805270:	480b883a 	mov	r5,r9
  805274:	4009883a 	mov	r4,r8
  805278:	080b18c0 	call	80b18c <__muldf3>
  80527c:	1011883a 	mov	r8,r2
  805280:	b5800044 	addi	r22,r22,1
  805284:	1813883a 	mov	r9,r3
  805288:	8021d07a 	srai	r16,r16,1
  80528c:	8c400204 	addi	r17,r17,8
  805290:	803ff21e 	bne	r16,zero,80525c <_dtoa_r+0xd18>
  805294:	4029883a 	mov	r20,r8
  805298:	482b883a 	mov	r21,r9
  80529c:	003dca06 	br	8049c8 <_dtoa_r+0x484>
  8052a0:	d9000817 	ldw	r4,32(sp)
  8052a4:	2005003a 	cmpeq	r2,r4,zero
  8052a8:	1001f61e 	bne	r2,zero,805a84 <_dtoa_r+0x1540>
  8052ac:	dc001117 	ldw	r16,68(sp)
  8052b0:	dc801017 	ldw	r18,64(sp)
  8052b4:	18c10cc4 	addi	r3,r3,1075
  8052b8:	003f6106 	br	805040 <_dtoa_r+0xafc>
  8052bc:	d8000b15 	stw	zero,44(sp)
  8052c0:	d9802617 	ldw	r6,152(sp)
  8052c4:	d8c00d17 	ldw	r3,52(sp)
  8052c8:	30800044 	addi	r2,r6,1
  8052cc:	18ad883a 	add	r22,r3,r2
  8052d0:	b13fffc4 	addi	r4,r22,-1
  8052d4:	d9000e15 	stw	r4,56(sp)
  8052d8:	0581f60e 	bge	zero,r22,805ab4 <_dtoa_r+0x1570>
  8052dc:	dd800f15 	stw	r22,60(sp)
  8052e0:	003f3006 	br	804fa4 <_dtoa_r+0xa60>
  8052e4:	d8000b15 	stw	zero,44(sp)
  8052e8:	d9002617 	ldw	r4,152(sp)
  8052ec:	0101eb0e 	bge	zero,r4,805a9c <_dtoa_r+0x1558>
  8052f0:	202d883a 	mov	r22,r4
  8052f4:	d9000e15 	stw	r4,56(sp)
  8052f8:	d9000f15 	stw	r4,60(sp)
  8052fc:	003f2906 	br	804fa4 <_dtoa_r+0xa60>
  805300:	01800044 	movi	r6,1
  805304:	d9800b15 	stw	r6,44(sp)
  805308:	003ff706 	br	8052e8 <_dtoa_r+0xda4>
  80530c:	01000044 	movi	r4,1
  805310:	d9000b15 	stw	r4,44(sp)
  805314:	003fea06 	br	8052c0 <_dtoa_r+0xd7c>
  805318:	04000c0e 	bge	zero,r16,80534c <_dtoa_r+0xe08>
  80531c:	d9400717 	ldw	r5,28(sp)
  805320:	d9001617 	ldw	r4,88(sp)
  805324:	01800044 	movi	r6,1
  805328:	08078dc0 	call	8078dc <__lshift>
  80532c:	1009883a 	mov	r4,r2
  805330:	900b883a 	mov	r5,r18
  805334:	d8800715 	stw	r2,28(sp)
  805338:	08070f40 	call	8070f4 <__mcmp>
  80533c:	0081e00e 	bge	zero,r2,805ac0 <_dtoa_r+0x157c>
  805340:	bdc00044 	addi	r23,r23,1
  805344:	00800e84 	movi	r2,58
  805348:	b881a226 	beq	r23,r2,8059d4 <_dtoa_r+0x1490>
  80534c:	b7000044 	addi	fp,r22,1
  805350:	b5c00005 	stb	r23,0(r22)
  805354:	003f7406 	br	805128 <_dtoa_r+0xbe4>
  805358:	00800e44 	movi	r2,57
  80535c:	b8819d26 	beq	r23,r2,8059d4 <_dtoa_r+0x1490>
  805360:	053ffa0e 	bge	zero,r20,80534c <_dtoa_r+0xe08>
  805364:	8dc00c44 	addi	r23,r17,49
  805368:	003ff806 	br	80534c <_dtoa_r+0xe08>
  80536c:	d9001617 	ldw	r4,88(sp)
  805370:	a80b883a 	mov	r5,r21
  805374:	04000044 	movi	r16,1
  805378:	0806f980 	call	806f98 <_Bfree>
  80537c:	003edf06 	br	804efc <_dtoa_r+0x9b8>
  805380:	d9001617 	ldw	r4,88(sp)
  805384:	980b883a 	mov	r5,r19
  805388:	01800284 	movi	r6,10
  80538c:	000f883a 	mov	r7,zero
  805390:	0807c4c0 	call	807c4c <__multadd>
  805394:	1027883a 	mov	r19,r2
  805398:	d8800615 	stw	r2,24(sp)
  80539c:	003ebb06 	br	804e8c <_dtoa_r+0x948>
  8053a0:	d9801117 	ldw	r6,68(sp)
  8053a4:	d8800d17 	ldw	r2,52(sp)
  8053a8:	d8000915 	stw	zero,36(sp)
  8053ac:	308dc83a 	sub	r6,r6,r2
  8053b0:	0087c83a 	sub	r3,zero,r2
  8053b4:	d9801115 	stw	r6,68(sp)
  8053b8:	d8c01015 	stw	r3,64(sp)
  8053bc:	003cfe06 	br	8047b8 <_dtoa_r+0x274>
  8053c0:	018dc83a 	sub	r6,zero,r6
  8053c4:	d9801115 	stw	r6,68(sp)
  8053c8:	d8000a15 	stw	zero,40(sp)
  8053cc:	003cf306 	br	80479c <_dtoa_r+0x258>
  8053d0:	d9000d17 	ldw	r4,52(sp)
  8053d4:	080ba500 	call	80ba50 <__floatsidf>
  8053d8:	880b883a 	mov	r5,r17
  8053dc:	8009883a 	mov	r4,r16
  8053e0:	180f883a 	mov	r7,r3
  8053e4:	100d883a 	mov	r6,r2
  8053e8:	080b8300 	call	80b830 <__nedf2>
  8053ec:	103ce126 	beq	r2,zero,804774 <_dtoa_r+0x230>
  8053f0:	d9800d17 	ldw	r6,52(sp)
  8053f4:	31bfffc4 	addi	r6,r6,-1
  8053f8:	d9800d15 	stw	r6,52(sp)
  8053fc:	003cdd06 	br	804774 <_dtoa_r+0x230>
  805400:	d9000717 	ldw	r4,28(sp)
  805404:	900b883a 	mov	r5,r18
  805408:	08070f40 	call	8070f4 <__mcmp>
  80540c:	103e8d0e 	bge	r2,zero,804e44 <_dtoa_r+0x900>
  805410:	d9400717 	ldw	r5,28(sp)
  805414:	d9001617 	ldw	r4,88(sp)
  805418:	01800284 	movi	r6,10
  80541c:	000f883a 	mov	r7,zero
  805420:	0807c4c0 	call	807c4c <__multadd>
  805424:	d9800d17 	ldw	r6,52(sp)
  805428:	d8800715 	stw	r2,28(sp)
  80542c:	31bfffc4 	addi	r6,r6,-1
  805430:	d9800d15 	stw	r6,52(sp)
  805434:	b001a71e 	bne	r22,zero,805ad4 <_dtoa_r+0x1590>
  805438:	d8800e17 	ldw	r2,56(sp)
  80543c:	d8800f15 	stw	r2,60(sp)
  805440:	003e8006 	br	804e44 <_dtoa_r+0x900>
  805444:	90800417 	ldw	r2,16(r18)
  805448:	1085883a 	add	r2,r2,r2
  80544c:	1085883a 	add	r2,r2,r2
  805450:	1485883a 	add	r2,r2,r18
  805454:	11000417 	ldw	r4,16(r2)
  805458:	0806fc00 	call	806fc0 <__hi0bits>
  80545c:	00c00804 	movi	r3,32
  805460:	1887c83a 	sub	r3,r3,r2
  805464:	003e5a06 	br	804dd0 <_dtoa_r+0x88c>
  805468:	d9400717 	ldw	r5,28(sp)
  80546c:	d9801017 	ldw	r6,64(sp)
  805470:	d9001617 	ldw	r4,88(sp)
  805474:	0807d4c0 	call	807d4c <__pow5mult>
  805478:	d8800715 	stw	r2,28(sp)
  80547c:	003e4306 	br	804d8c <_dtoa_r+0x848>
  805480:	d9800f17 	ldw	r6,60(sp)
  805484:	d8800d17 	ldw	r2,52(sp)
  805488:	d9800315 	stw	r6,12(sp)
  80548c:	d8800415 	stw	r2,16(sp)
  805490:	d8c00b17 	ldw	r3,44(sp)
  805494:	1805003a 	cmpeq	r2,r3,zero
  805498:	1000e21e 	bne	r2,zero,805824 <_dtoa_r+0x12e0>
  80549c:	d9000317 	ldw	r4,12(sp)
  8054a0:	0005883a 	mov	r2,zero
  8054a4:	00cff834 	movhi	r3,16352
  8054a8:	200c90fa 	slli	r6,r4,3
  8054ac:	01002074 	movhi	r4,129
  8054b0:	21024104 	addi	r4,r4,2308
  8054b4:	180b883a 	mov	r5,r3
  8054b8:	310d883a 	add	r6,r6,r4
  8054bc:	327fff17 	ldw	r9,-4(r6)
  8054c0:	323ffe17 	ldw	r8,-8(r6)
  8054c4:	1009883a 	mov	r4,r2
  8054c8:	480f883a 	mov	r7,r9
  8054cc:	400d883a 	mov	r6,r8
  8054d0:	080b5500 	call	80b550 <__divdf3>
  8054d4:	180b883a 	mov	r5,r3
  8054d8:	b00d883a 	mov	r6,r22
  8054dc:	b80f883a 	mov	r7,r23
  8054e0:	1009883a 	mov	r4,r2
  8054e4:	080b0980 	call	80b098 <__subdf3>
  8054e8:	a80b883a 	mov	r5,r21
  8054ec:	a009883a 	mov	r4,r20
  8054f0:	d8c01915 	stw	r3,100(sp)
  8054f4:	d8801815 	stw	r2,96(sp)
  8054f8:	080bb480 	call	80bb48 <__fixdfsi>
  8054fc:	1009883a 	mov	r4,r2
  805500:	1027883a 	mov	r19,r2
  805504:	080ba500 	call	80ba50 <__floatsidf>
  805508:	a80b883a 	mov	r5,r21
  80550c:	a009883a 	mov	r4,r20
  805510:	180f883a 	mov	r7,r3
  805514:	100d883a 	mov	r6,r2
  805518:	080b0980 	call	80b098 <__subdf3>
  80551c:	d9801817 	ldw	r6,96(sp)
  805520:	1823883a 	mov	r17,r3
  805524:	d8801415 	stw	r2,80(sp)
  805528:	302d883a 	mov	r22,r6
  80552c:	d9800517 	ldw	r6,20(sp)
  805530:	9cc00c04 	addi	r19,r19,48
  805534:	dc401515 	stw	r17,84(sp)
  805538:	d8c01917 	ldw	r3,100(sp)
  80553c:	34c00005 	stb	r19,0(r6)
  805540:	d8800517 	ldw	r2,20(sp)
  805544:	d9401917 	ldw	r5,100(sp)
  805548:	d9801417 	ldw	r6,80(sp)
  80554c:	b009883a 	mov	r4,r22
  805550:	880f883a 	mov	r7,r17
  805554:	182f883a 	mov	r23,r3
  805558:	17000044 	addi	fp,r2,1
  80555c:	080b8b80 	call	80b8b8 <__gtdf2>
  805560:	00804e16 	blt	zero,r2,80569c <_dtoa_r+0x1158>
  805564:	d9801417 	ldw	r6,80(sp)
  805568:	0005883a 	mov	r2,zero
  80556c:	00cffc34 	movhi	r3,16368
  805570:	180b883a 	mov	r5,r3
  805574:	880f883a 	mov	r7,r17
  805578:	1009883a 	mov	r4,r2
  80557c:	080b0980 	call	80b098 <__subdf3>
  805580:	d9401917 	ldw	r5,100(sp)
  805584:	180f883a 	mov	r7,r3
  805588:	b009883a 	mov	r4,r22
  80558c:	100d883a 	mov	r6,r2
  805590:	080b8b80 	call	80b8b8 <__gtdf2>
  805594:	00bda216 	blt	zero,r2,804c20 <_dtoa_r+0x6dc>
  805598:	d8c00317 	ldw	r3,12(sp)
  80559c:	00800044 	movi	r2,1
  8055a0:	10c01216 	blt	r2,r3,8055ec <_dtoa_r+0x10a8>
  8055a4:	003d4506 	br	804abc <_dtoa_r+0x578>
  8055a8:	d9801417 	ldw	r6,80(sp)
  8055ac:	0005883a 	mov	r2,zero
  8055b0:	00cffc34 	movhi	r3,16368
  8055b4:	180b883a 	mov	r5,r3
  8055b8:	880f883a 	mov	r7,r17
  8055bc:	1009883a 	mov	r4,r2
  8055c0:	080b0980 	call	80b098 <__subdf3>
  8055c4:	d9c01b17 	ldw	r7,108(sp)
  8055c8:	180b883a 	mov	r5,r3
  8055cc:	1009883a 	mov	r4,r2
  8055d0:	b00d883a 	mov	r6,r22
  8055d4:	080b9c80 	call	80b9c8 <__ltdf2>
  8055d8:	103d9116 	blt	r2,zero,804c20 <_dtoa_r+0x6dc>
  8055dc:	d9800517 	ldw	r6,20(sp)
  8055e0:	d9000317 	ldw	r4,12(sp)
  8055e4:	3105883a 	add	r2,r6,r4
  8055e8:	e0bd3426 	beq	fp,r2,804abc <_dtoa_r+0x578>
  8055ec:	04500934 	movhi	r17,16420
  8055f0:	0021883a 	mov	r16,zero
  8055f4:	b80b883a 	mov	r5,r23
  8055f8:	b009883a 	mov	r4,r22
  8055fc:	800d883a 	mov	r6,r16
  805600:	880f883a 	mov	r7,r17
  805604:	080b18c0 	call	80b18c <__muldf3>
  805608:	d9401517 	ldw	r5,84(sp)
  80560c:	d9001417 	ldw	r4,80(sp)
  805610:	880f883a 	mov	r7,r17
  805614:	000d883a 	mov	r6,zero
  805618:	d8801a15 	stw	r2,104(sp)
  80561c:	d8c01b15 	stw	r3,108(sp)
  805620:	080b18c0 	call	80b18c <__muldf3>
  805624:	180b883a 	mov	r5,r3
  805628:	1009883a 	mov	r4,r2
  80562c:	1823883a 	mov	r17,r3
  805630:	1021883a 	mov	r16,r2
  805634:	080bb480 	call	80bb48 <__fixdfsi>
  805638:	1009883a 	mov	r4,r2
  80563c:	102b883a 	mov	r21,r2
  805640:	080ba500 	call	80ba50 <__floatsidf>
  805644:	880b883a 	mov	r5,r17
  805648:	8009883a 	mov	r4,r16
  80564c:	180f883a 	mov	r7,r3
  805650:	100d883a 	mov	r6,r2
  805654:	080b0980 	call	80b098 <__subdf3>
  805658:	1021883a 	mov	r16,r2
  80565c:	d9001b17 	ldw	r4,108(sp)
  805660:	1823883a 	mov	r17,r3
  805664:	dc001415 	stw	r16,80(sp)
  805668:	ad400c04 	addi	r21,r21,48
  80566c:	dc401515 	stw	r17,84(sp)
  805670:	d8801a17 	ldw	r2,104(sp)
  805674:	e5400005 	stb	r21,0(fp)
  805678:	202f883a 	mov	r23,r4
  80567c:	d9c01b17 	ldw	r7,108(sp)
  805680:	d9001417 	ldw	r4,80(sp)
  805684:	880b883a 	mov	r5,r17
  805688:	100d883a 	mov	r6,r2
  80568c:	102d883a 	mov	r22,r2
  805690:	e7000044 	addi	fp,fp,1
  805694:	080b9c80 	call	80b9c8 <__ltdf2>
  805698:	103fc30e 	bge	r2,zero,8055a8 <_dtoa_r+0x1064>
  80569c:	d9000417 	ldw	r4,16(sp)
  8056a0:	d9000d15 	stw	r4,52(sp)
  8056a4:	003d7106 	br	804c6c <_dtoa_r+0x728>
  8056a8:	d9801717 	ldw	r6,92(sp)
  8056ac:	00800084 	movi	r2,2
  8056b0:	11bde60e 	bge	r2,r6,804e4c <_dtoa_r+0x908>
  8056b4:	203cfb1e 	bne	r4,zero,804aa4 <_dtoa_r+0x560>
  8056b8:	d9001617 	ldw	r4,88(sp)
  8056bc:	900b883a 	mov	r5,r18
  8056c0:	01800144 	movi	r6,5
  8056c4:	000f883a 	mov	r7,zero
  8056c8:	0807c4c0 	call	807c4c <__multadd>
  8056cc:	d9000717 	ldw	r4,28(sp)
  8056d0:	100b883a 	mov	r5,r2
  8056d4:	1025883a 	mov	r18,r2
  8056d8:	08070f40 	call	8070f4 <__mcmp>
  8056dc:	00bcf10e 	bge	zero,r2,804aa4 <_dtoa_r+0x560>
  8056e0:	d8c00d17 	ldw	r3,52(sp)
  8056e4:	d9000517 	ldw	r4,20(sp)
  8056e8:	d8000615 	stw	zero,24(sp)
  8056ec:	18c00044 	addi	r3,r3,1
  8056f0:	d8c00d15 	stw	r3,52(sp)
  8056f4:	00800c44 	movi	r2,49
  8056f8:	27000044 	addi	fp,r4,1
  8056fc:	20800005 	stb	r2,0(r4)
  805700:	003e8906 	br	805128 <_dtoa_r+0xbe4>
  805704:	d8c00517 	ldw	r3,20(sp)
  805708:	003bc206 	br	804614 <_dtoa_r+0xd0>
  80570c:	01802074 	movhi	r6,129
  805710:	31827304 	addi	r6,r6,2508
  805714:	30c00917 	ldw	r3,36(r6)
  805718:	30800817 	ldw	r2,32(r6)
  80571c:	d9001217 	ldw	r4,72(sp)
  805720:	d9401317 	ldw	r5,76(sp)
  805724:	180f883a 	mov	r7,r3
  805728:	100d883a 	mov	r6,r2
  80572c:	080b5500 	call	80b550 <__divdf3>
  805730:	948003cc 	andi	r18,r18,15
  805734:	058000c4 	movi	r22,3
  805738:	1029883a 	mov	r20,r2
  80573c:	182b883a 	mov	r21,r3
  805740:	003c8906 	br	804968 <_dtoa_r+0x424>
  805744:	d9001017 	ldw	r4,64(sp)
  805748:	d9800917 	ldw	r6,36(sp)
  80574c:	0025883a 	mov	r18,zero
  805750:	1105c83a 	sub	r2,r2,r4
  805754:	2089883a 	add	r4,r4,r2
  805758:	308d883a 	add	r6,r6,r2
  80575c:	d9001015 	stw	r4,64(sp)
  805760:	d9800915 	stw	r6,36(sp)
  805764:	003e3206 	br	805030 <_dtoa_r+0xaec>
  805768:	28800044 	addi	r2,r5,1
  80576c:	27000044 	addi	fp,r4,1
  805770:	20800005 	stb	r2,0(r4)
  805774:	003e6c06 	br	805128 <_dtoa_r+0xbe4>
  805778:	d8800f17 	ldw	r2,60(sp)
  80577c:	00bce016 	blt	zero,r2,804b00 <_dtoa_r+0x5bc>
  805780:	d9800f17 	ldw	r6,60(sp)
  805784:	303cc51e 	bne	r6,zero,804a9c <_dtoa_r+0x558>
  805788:	0005883a 	mov	r2,zero
  80578c:	00d00534 	movhi	r3,16404
  805790:	980b883a 	mov	r5,r19
  805794:	180f883a 	mov	r7,r3
  805798:	9009883a 	mov	r4,r18
  80579c:	100d883a 	mov	r6,r2
  8057a0:	080b18c0 	call	80b18c <__muldf3>
  8057a4:	180b883a 	mov	r5,r3
  8057a8:	a80f883a 	mov	r7,r21
  8057ac:	1009883a 	mov	r4,r2
  8057b0:	a00d883a 	mov	r6,r20
  8057b4:	080b9400 	call	80b940 <__gedf2>
  8057b8:	103cb80e 	bge	r2,zero,804a9c <_dtoa_r+0x558>
  8057bc:	0027883a 	mov	r19,zero
  8057c0:	0025883a 	mov	r18,zero
  8057c4:	003fc606 	br	8056e0 <_dtoa_r+0x119c>
  8057c8:	99400117 	ldw	r5,4(r19)
  8057cc:	d9001617 	ldw	r4,88(sp)
  8057d0:	08075180 	call	807518 <_Balloc>
  8057d4:	99800417 	ldw	r6,16(r19)
  8057d8:	11000304 	addi	r4,r2,12
  8057dc:	99400304 	addi	r5,r19,12
  8057e0:	318d883a 	add	r6,r6,r6
  8057e4:	318d883a 	add	r6,r6,r6
  8057e8:	31800204 	addi	r6,r6,8
  8057ec:	1023883a 	mov	r17,r2
  8057f0:	0806d800 	call	806d80 <memcpy>
  8057f4:	d9001617 	ldw	r4,88(sp)
  8057f8:	880b883a 	mov	r5,r17
  8057fc:	01800044 	movi	r6,1
  805800:	08078dc0 	call	8078dc <__lshift>
  805804:	100b883a 	mov	r5,r2
  805808:	003d9c06 	br	804e7c <_dtoa_r+0x938>
  80580c:	00800e44 	movi	r2,57
  805810:	b8807026 	beq	r23,r2,8059d4 <_dtoa_r+0x1490>
  805814:	b8800044 	addi	r2,r23,1
  805818:	b7000044 	addi	fp,r22,1
  80581c:	b0800005 	stb	r2,0(r22)
  805820:	003e4106 	br	805128 <_dtoa_r+0xbe4>
  805824:	d8800317 	ldw	r2,12(sp)
  805828:	01802074 	movhi	r6,129
  80582c:	31824104 	addi	r6,r6,2308
  805830:	b009883a 	mov	r4,r22
  805834:	100e90fa 	slli	r7,r2,3
  805838:	b80b883a 	mov	r5,r23
  80583c:	398f883a 	add	r7,r7,r6
  805840:	38bffe17 	ldw	r2,-8(r7)
  805844:	d9800517 	ldw	r6,20(sp)
  805848:	38ffff17 	ldw	r3,-4(r7)
  80584c:	37000044 	addi	fp,r6,1
  805850:	180f883a 	mov	r7,r3
  805854:	100d883a 	mov	r6,r2
  805858:	080b18c0 	call	80b18c <__muldf3>
  80585c:	a80b883a 	mov	r5,r21
  805860:	a009883a 	mov	r4,r20
  805864:	182f883a 	mov	r23,r3
  805868:	102d883a 	mov	r22,r2
  80586c:	080bb480 	call	80bb48 <__fixdfsi>
  805870:	1009883a 	mov	r4,r2
  805874:	1027883a 	mov	r19,r2
  805878:	080ba500 	call	80ba50 <__floatsidf>
  80587c:	a80b883a 	mov	r5,r21
  805880:	a009883a 	mov	r4,r20
  805884:	180f883a 	mov	r7,r3
  805888:	100d883a 	mov	r6,r2
  80588c:	080b0980 	call	80b098 <__subdf3>
  805890:	180b883a 	mov	r5,r3
  805894:	d8c00517 	ldw	r3,20(sp)
  805898:	9cc00c04 	addi	r19,r19,48
  80589c:	1009883a 	mov	r4,r2
  8058a0:	1cc00005 	stb	r19,0(r3)
  8058a4:	2021883a 	mov	r16,r4
  8058a8:	d9000317 	ldw	r4,12(sp)
  8058ac:	00800044 	movi	r2,1
  8058b0:	2823883a 	mov	r17,r5
  8058b4:	20802226 	beq	r4,r2,805940 <_dtoa_r+0x13fc>
  8058b8:	1029883a 	mov	r20,r2
  8058bc:	0005883a 	mov	r2,zero
  8058c0:	00d00934 	movhi	r3,16420
  8058c4:	180f883a 	mov	r7,r3
  8058c8:	100d883a 	mov	r6,r2
  8058cc:	880b883a 	mov	r5,r17
  8058d0:	8009883a 	mov	r4,r16
  8058d4:	080b18c0 	call	80b18c <__muldf3>
  8058d8:	180b883a 	mov	r5,r3
  8058dc:	1009883a 	mov	r4,r2
  8058e0:	1823883a 	mov	r17,r3
  8058e4:	1021883a 	mov	r16,r2
  8058e8:	080bb480 	call	80bb48 <__fixdfsi>
  8058ec:	1009883a 	mov	r4,r2
  8058f0:	102b883a 	mov	r21,r2
  8058f4:	080ba500 	call	80ba50 <__floatsidf>
  8058f8:	880b883a 	mov	r5,r17
  8058fc:	8009883a 	mov	r4,r16
  805900:	180f883a 	mov	r7,r3
  805904:	100d883a 	mov	r6,r2
  805908:	080b0980 	call	80b098 <__subdf3>
  80590c:	180b883a 	mov	r5,r3
  805910:	d8c00517 	ldw	r3,20(sp)
  805914:	1009883a 	mov	r4,r2
  805918:	ad400c04 	addi	r21,r21,48
  80591c:	1d05883a 	add	r2,r3,r20
  805920:	15400005 	stb	r21,0(r2)
  805924:	2021883a 	mov	r16,r4
  805928:	d9000317 	ldw	r4,12(sp)
  80592c:	a5000044 	addi	r20,r20,1
  805930:	2823883a 	mov	r17,r5
  805934:	a13fe11e 	bne	r20,r4,8058bc <_dtoa_r+0x1378>
  805938:	e505883a 	add	r2,fp,r20
  80593c:	173fffc4 	addi	fp,r2,-1
  805940:	0025883a 	mov	r18,zero
  805944:	04cff834 	movhi	r19,16352
  805948:	b009883a 	mov	r4,r22
  80594c:	b80b883a 	mov	r5,r23
  805950:	900d883a 	mov	r6,r18
  805954:	980f883a 	mov	r7,r19
  805958:	080b1180 	call	80b118 <__adddf3>
  80595c:	180b883a 	mov	r5,r3
  805960:	1009883a 	mov	r4,r2
  805964:	800d883a 	mov	r6,r16
  805968:	880f883a 	mov	r7,r17
  80596c:	080b9c80 	call	80b9c8 <__ltdf2>
  805970:	103cab16 	blt	r2,zero,804c20 <_dtoa_r+0x6dc>
  805974:	0009883a 	mov	r4,zero
  805978:	980b883a 	mov	r5,r19
  80597c:	b80f883a 	mov	r7,r23
  805980:	b00d883a 	mov	r6,r22
  805984:	080b0980 	call	80b098 <__subdf3>
  805988:	180b883a 	mov	r5,r3
  80598c:	880f883a 	mov	r7,r17
  805990:	1009883a 	mov	r4,r2
  805994:	800d883a 	mov	r6,r16
  805998:	080b8b80 	call	80b8b8 <__gtdf2>
  80599c:	00bc470e 	bge	zero,r2,804abc <_dtoa_r+0x578>
  8059a0:	00c00c04 	movi	r3,48
  8059a4:	e73fffc4 	addi	fp,fp,-1
  8059a8:	e0800007 	ldb	r2,0(fp)
  8059ac:	10fffd26 	beq	r2,r3,8059a4 <_dtoa_r+0x1460>
  8059b0:	d9800417 	ldw	r6,16(sp)
  8059b4:	e7000044 	addi	fp,fp,1
  8059b8:	d9800d15 	stw	r6,52(sp)
  8059bc:	003cab06 	br	804c6c <_dtoa_r+0x728>
  8059c0:	d8c00f17 	ldw	r3,60(sp)
  8059c4:	d9001117 	ldw	r4,68(sp)
  8059c8:	20e1c83a 	sub	r16,r4,r3
  8059cc:	0007883a 	mov	r3,zero
  8059d0:	003d9b06 	br	805040 <_dtoa_r+0xafc>
  8059d4:	00800e44 	movi	r2,57
  8059d8:	b0800005 	stb	r2,0(r22)
  8059dc:	b5800044 	addi	r22,r22,1
  8059e0:	003dc106 	br	8050e8 <_dtoa_r+0xba4>
  8059e4:	05800084 	movi	r22,2
  8059e8:	003bf706 	br	8049c8 <_dtoa_r+0x484>
  8059ec:	d9000f17 	ldw	r4,60(sp)
  8059f0:	013c000e 	bge	zero,r4,8049f4 <_dtoa_r+0x4b0>
  8059f4:	d9800e17 	ldw	r6,56(sp)
  8059f8:	01bc300e 	bge	zero,r6,804abc <_dtoa_r+0x578>
  8059fc:	0005883a 	mov	r2,zero
  805a00:	00d00934 	movhi	r3,16420
  805a04:	a80b883a 	mov	r5,r21
  805a08:	180f883a 	mov	r7,r3
  805a0c:	a009883a 	mov	r4,r20
  805a10:	100d883a 	mov	r6,r2
  805a14:	080b18c0 	call	80b18c <__muldf3>
  805a18:	b1000044 	addi	r4,r22,1
  805a1c:	1021883a 	mov	r16,r2
  805a20:	1823883a 	mov	r17,r3
  805a24:	080ba500 	call	80ba50 <__floatsidf>
  805a28:	880b883a 	mov	r5,r17
  805a2c:	8009883a 	mov	r4,r16
  805a30:	180f883a 	mov	r7,r3
  805a34:	100d883a 	mov	r6,r2
  805a38:	080b18c0 	call	80b18c <__muldf3>
  805a3c:	0011883a 	mov	r8,zero
  805a40:	02500734 	movhi	r9,16412
  805a44:	180b883a 	mov	r5,r3
  805a48:	480f883a 	mov	r7,r9
  805a4c:	1009883a 	mov	r4,r2
  805a50:	400d883a 	mov	r6,r8
  805a54:	080b1180 	call	80b118 <__adddf3>
  805a58:	102d883a 	mov	r22,r2
  805a5c:	00bf3034 	movhi	r2,64704
  805a60:	10ef883a 	add	r23,r2,r3
  805a64:	d8800d17 	ldw	r2,52(sp)
  805a68:	d8c00e17 	ldw	r3,56(sp)
  805a6c:	8029883a 	mov	r20,r16
  805a70:	10bfffc4 	addi	r2,r2,-1
  805a74:	882b883a 	mov	r21,r17
  805a78:	d8800415 	stw	r2,16(sp)
  805a7c:	d8c00315 	stw	r3,12(sp)
  805a80:	003e8306 	br	805490 <_dtoa_r+0xf4c>
  805a84:	d8800117 	ldw	r2,4(sp)
  805a88:	dc001117 	ldw	r16,68(sp)
  805a8c:	dc801017 	ldw	r18,64(sp)
  805a90:	00c00d84 	movi	r3,54
  805a94:	1887c83a 	sub	r3,r3,r2
  805a98:	003d6906 	br	805040 <_dtoa_r+0xafc>
  805a9c:	01800044 	movi	r6,1
  805aa0:	3021883a 	mov	r16,r6
  805aa4:	d9800f15 	stw	r6,60(sp)
  805aa8:	d9802615 	stw	r6,152(sp)
  805aac:	d9800e15 	stw	r6,56(sp)
  805ab0:	003b9306 	br	804900 <_dtoa_r+0x3bc>
  805ab4:	b021883a 	mov	r16,r22
  805ab8:	dd800f15 	stw	r22,60(sp)
  805abc:	003b9006 	br	804900 <_dtoa_r+0x3bc>
  805ac0:	103e221e 	bne	r2,zero,80534c <_dtoa_r+0xe08>
  805ac4:	b880004c 	andi	r2,r23,1
  805ac8:	1005003a 	cmpeq	r2,r2,zero
  805acc:	103e1f1e 	bne	r2,zero,80534c <_dtoa_r+0xe08>
  805ad0:	003e1b06 	br	805340 <_dtoa_r+0xdfc>
  805ad4:	d9001617 	ldw	r4,88(sp)
  805ad8:	980b883a 	mov	r5,r19
  805adc:	01800284 	movi	r6,10
  805ae0:	000f883a 	mov	r7,zero
  805ae4:	0807c4c0 	call	807c4c <__multadd>
  805ae8:	d8c00e17 	ldw	r3,56(sp)
  805aec:	1027883a 	mov	r19,r2
  805af0:	d8c00f15 	stw	r3,60(sp)
  805af4:	003cd306 	br	804e44 <_dtoa_r+0x900>

00805af8 <_fflush_r>:
  805af8:	defffb04 	addi	sp,sp,-20
  805afc:	dcc00315 	stw	r19,12(sp)
  805b00:	dc800215 	stw	r18,8(sp)
  805b04:	dfc00415 	stw	ra,16(sp)
  805b08:	dc400115 	stw	r17,4(sp)
  805b0c:	dc000015 	stw	r16,0(sp)
  805b10:	2027883a 	mov	r19,r4
  805b14:	2825883a 	mov	r18,r5
  805b18:	20000226 	beq	r4,zero,805b24 <_fflush_r+0x2c>
  805b1c:	20800e17 	ldw	r2,56(r4)
  805b20:	10005626 	beq	r2,zero,805c7c <_fflush_r+0x184>
  805b24:	9100030b 	ldhu	r4,12(r18)
  805b28:	20ffffcc 	andi	r3,r4,65535
  805b2c:	18e0001c 	xori	r3,r3,32768
  805b30:	18e00004 	addi	r3,r3,-32768
  805b34:	1880020c 	andi	r2,r3,8
  805b38:	1000261e 	bne	r2,zero,805bd4 <_fflush_r+0xdc>
  805b3c:	90c00117 	ldw	r3,4(r18)
  805b40:	20820014 	ori	r2,r4,2048
  805b44:	9080030d 	sth	r2,12(r18)
  805b48:	1009883a 	mov	r4,r2
  805b4c:	00c0400e 	bge	zero,r3,805c50 <_fflush_r+0x158>
  805b50:	92000a17 	ldw	r8,40(r18)
  805b54:	40004026 	beq	r8,zero,805c58 <_fflush_r+0x160>
  805b58:	2084000c 	andi	r2,r4,4096
  805b5c:	10005326 	beq	r2,zero,805cac <_fflush_r+0x1b4>
  805b60:	94001417 	ldw	r16,80(r18)
  805b64:	9080030b 	ldhu	r2,12(r18)
  805b68:	1080010c 	andi	r2,r2,4
  805b6c:	1000481e 	bne	r2,zero,805c90 <_fflush_r+0x198>
  805b70:	91400717 	ldw	r5,28(r18)
  805b74:	9809883a 	mov	r4,r19
  805b78:	800d883a 	mov	r6,r16
  805b7c:	000f883a 	mov	r7,zero
  805b80:	403ee83a 	callr	r8
  805b84:	8080261e 	bne	r16,r2,805c20 <_fflush_r+0x128>
  805b88:	9080030b 	ldhu	r2,12(r18)
  805b8c:	91000417 	ldw	r4,16(r18)
  805b90:	90000115 	stw	zero,4(r18)
  805b94:	10bdffcc 	andi	r2,r2,63487
  805b98:	10ffffcc 	andi	r3,r2,65535
  805b9c:	18c4000c 	andi	r3,r3,4096
  805ba0:	9080030d 	sth	r2,12(r18)
  805ba4:	91000015 	stw	r4,0(r18)
  805ba8:	18002b26 	beq	r3,zero,805c58 <_fflush_r+0x160>
  805bac:	0007883a 	mov	r3,zero
  805bb0:	1805883a 	mov	r2,r3
  805bb4:	94001415 	stw	r16,80(r18)
  805bb8:	dfc00417 	ldw	ra,16(sp)
  805bbc:	dcc00317 	ldw	r19,12(sp)
  805bc0:	dc800217 	ldw	r18,8(sp)
  805bc4:	dc400117 	ldw	r17,4(sp)
  805bc8:	dc000017 	ldw	r16,0(sp)
  805bcc:	dec00504 	addi	sp,sp,20
  805bd0:	f800283a 	ret
  805bd4:	94400417 	ldw	r17,16(r18)
  805bd8:	88001f26 	beq	r17,zero,805c58 <_fflush_r+0x160>
  805bdc:	90800017 	ldw	r2,0(r18)
  805be0:	18c000cc 	andi	r3,r3,3
  805be4:	94400015 	stw	r17,0(r18)
  805be8:	1461c83a 	sub	r16,r2,r17
  805bec:	18002526 	beq	r3,zero,805c84 <_fflush_r+0x18c>
  805bf0:	0005883a 	mov	r2,zero
  805bf4:	90800215 	stw	r2,8(r18)
  805bf8:	0400170e 	bge	zero,r16,805c58 <_fflush_r+0x160>
  805bfc:	90c00917 	ldw	r3,36(r18)
  805c00:	91400717 	ldw	r5,28(r18)
  805c04:	880d883a 	mov	r6,r17
  805c08:	800f883a 	mov	r7,r16
  805c0c:	9809883a 	mov	r4,r19
  805c10:	183ee83a 	callr	r3
  805c14:	88a3883a 	add	r17,r17,r2
  805c18:	80a1c83a 	sub	r16,r16,r2
  805c1c:	00bff616 	blt	zero,r2,805bf8 <_fflush_r+0x100>
  805c20:	9080030b 	ldhu	r2,12(r18)
  805c24:	00ffffc4 	movi	r3,-1
  805c28:	10801014 	ori	r2,r2,64
  805c2c:	9080030d 	sth	r2,12(r18)
  805c30:	1805883a 	mov	r2,r3
  805c34:	dfc00417 	ldw	ra,16(sp)
  805c38:	dcc00317 	ldw	r19,12(sp)
  805c3c:	dc800217 	ldw	r18,8(sp)
  805c40:	dc400117 	ldw	r17,4(sp)
  805c44:	dc000017 	ldw	r16,0(sp)
  805c48:	dec00504 	addi	sp,sp,20
  805c4c:	f800283a 	ret
  805c50:	90800f17 	ldw	r2,60(r18)
  805c54:	00bfbe16 	blt	zero,r2,805b50 <_fflush_r+0x58>
  805c58:	0007883a 	mov	r3,zero
  805c5c:	1805883a 	mov	r2,r3
  805c60:	dfc00417 	ldw	ra,16(sp)
  805c64:	dcc00317 	ldw	r19,12(sp)
  805c68:	dc800217 	ldw	r18,8(sp)
  805c6c:	dc400117 	ldw	r17,4(sp)
  805c70:	dc000017 	ldw	r16,0(sp)
  805c74:	dec00504 	addi	sp,sp,20
  805c78:	f800283a 	ret
  805c7c:	0805d900 	call	805d90 <__sinit>
  805c80:	003fa806 	br	805b24 <_fflush_r+0x2c>
  805c84:	90800517 	ldw	r2,20(r18)
  805c88:	90800215 	stw	r2,8(r18)
  805c8c:	003fda06 	br	805bf8 <_fflush_r+0x100>
  805c90:	90800117 	ldw	r2,4(r18)
  805c94:	90c00c17 	ldw	r3,48(r18)
  805c98:	80a1c83a 	sub	r16,r16,r2
  805c9c:	183fb426 	beq	r3,zero,805b70 <_fflush_r+0x78>
  805ca0:	90800f17 	ldw	r2,60(r18)
  805ca4:	80a1c83a 	sub	r16,r16,r2
  805ca8:	003fb106 	br	805b70 <_fflush_r+0x78>
  805cac:	91400717 	ldw	r5,28(r18)
  805cb0:	9809883a 	mov	r4,r19
  805cb4:	000d883a 	mov	r6,zero
  805cb8:	01c00044 	movi	r7,1
  805cbc:	403ee83a 	callr	r8
  805cc0:	1021883a 	mov	r16,r2
  805cc4:	00bfffc4 	movi	r2,-1
  805cc8:	80800226 	beq	r16,r2,805cd4 <_fflush_r+0x1dc>
  805ccc:	92000a17 	ldw	r8,40(r18)
  805cd0:	003fa406 	br	805b64 <_fflush_r+0x6c>
  805cd4:	98c00017 	ldw	r3,0(r19)
  805cd8:	00800744 	movi	r2,29
  805cdc:	18bfde26 	beq	r3,r2,805c58 <_fflush_r+0x160>
  805ce0:	9080030b 	ldhu	r2,12(r18)
  805ce4:	8007883a 	mov	r3,r16
  805ce8:	10801014 	ori	r2,r2,64
  805cec:	9080030d 	sth	r2,12(r18)
  805cf0:	003fcf06 	br	805c30 <_fflush_r+0x138>

00805cf4 <fflush>:
  805cf4:	01402034 	movhi	r5,128
  805cf8:	2956be04 	addi	r5,r5,23288
  805cfc:	2007883a 	mov	r3,r4
  805d00:	20000526 	beq	r4,zero,805d18 <fflush+0x24>
  805d04:	00802074 	movhi	r2,129
  805d08:	1089eb04 	addi	r2,r2,10156
  805d0c:	11000017 	ldw	r4,0(r2)
  805d10:	180b883a 	mov	r5,r3
  805d14:	0805af81 	jmpi	805af8 <_fflush_r>
  805d18:	00802074 	movhi	r2,129
  805d1c:	1089ec04 	addi	r2,r2,10160
  805d20:	11000017 	ldw	r4,0(r2)
  805d24:	08068c41 	jmpi	8068c4 <_fwalk_reent>

00805d28 <std>:
  805d28:	00802074 	movhi	r2,129
  805d2c:	10a25004 	addi	r2,r2,-30400
  805d30:	20800b15 	stw	r2,44(r4)
  805d34:	00802074 	movhi	r2,129
  805d38:	10a28b04 	addi	r2,r2,-30164
  805d3c:	20800815 	stw	r2,32(r4)
  805d40:	00c02074 	movhi	r3,129
  805d44:	18e26c04 	addi	r3,r3,-30288
  805d48:	00802074 	movhi	r2,129
  805d4c:	10a25204 	addi	r2,r2,-30392
  805d50:	2140030d 	sth	r5,12(r4)
  805d54:	2180038d 	sth	r6,14(r4)
  805d58:	20c00915 	stw	r3,36(r4)
  805d5c:	20800a15 	stw	r2,40(r4)
  805d60:	20000015 	stw	zero,0(r4)
  805d64:	20000115 	stw	zero,4(r4)
  805d68:	20000215 	stw	zero,8(r4)
  805d6c:	20000415 	stw	zero,16(r4)
  805d70:	20000515 	stw	zero,20(r4)
  805d74:	20000615 	stw	zero,24(r4)
  805d78:	21000715 	stw	r4,28(r4)
  805d7c:	f800283a 	ret

00805d80 <__sfp_lock_acquire>:
  805d80:	f800283a 	ret

00805d84 <__sfp_lock_release>:
  805d84:	f800283a 	ret

00805d88 <__sinit_lock_acquire>:
  805d88:	f800283a 	ret

00805d8c <__sinit_lock_release>:
  805d8c:	f800283a 	ret

00805d90 <__sinit>:
  805d90:	20800e17 	ldw	r2,56(r4)
  805d94:	defffd04 	addi	sp,sp,-12
  805d98:	dc400115 	stw	r17,4(sp)
  805d9c:	dc000015 	stw	r16,0(sp)
  805da0:	dfc00215 	stw	ra,8(sp)
  805da4:	04400044 	movi	r17,1
  805da8:	01400104 	movi	r5,4
  805dac:	000d883a 	mov	r6,zero
  805db0:	2021883a 	mov	r16,r4
  805db4:	2200bb04 	addi	r8,r4,748
  805db8:	200f883a 	mov	r7,r4
  805dbc:	10000526 	beq	r2,zero,805dd4 <__sinit+0x44>
  805dc0:	dfc00217 	ldw	ra,8(sp)
  805dc4:	dc400117 	ldw	r17,4(sp)
  805dc8:	dc000017 	ldw	r16,0(sp)
  805dcc:	dec00304 	addi	sp,sp,12
  805dd0:	f800283a 	ret
  805dd4:	21000117 	ldw	r4,4(r4)
  805dd8:	00802034 	movhi	r2,128
  805ddc:	10979d04 	addi	r2,r2,24180
  805de0:	00c000c4 	movi	r3,3
  805de4:	80800f15 	stw	r2,60(r16)
  805de8:	80c0b915 	stw	r3,740(r16)
  805dec:	8200ba15 	stw	r8,744(r16)
  805df0:	84400e15 	stw	r17,56(r16)
  805df4:	8000b815 	stw	zero,736(r16)
  805df8:	0805d280 	call	805d28 <std>
  805dfc:	81000217 	ldw	r4,8(r16)
  805e00:	880d883a 	mov	r6,r17
  805e04:	800f883a 	mov	r7,r16
  805e08:	01400284 	movi	r5,10
  805e0c:	0805d280 	call	805d28 <std>
  805e10:	81000317 	ldw	r4,12(r16)
  805e14:	800f883a 	mov	r7,r16
  805e18:	01400484 	movi	r5,18
  805e1c:	01800084 	movi	r6,2
  805e20:	dfc00217 	ldw	ra,8(sp)
  805e24:	dc400117 	ldw	r17,4(sp)
  805e28:	dc000017 	ldw	r16,0(sp)
  805e2c:	dec00304 	addi	sp,sp,12
  805e30:	0805d281 	jmpi	805d28 <std>

00805e34 <__fp_lock>:
  805e34:	0005883a 	mov	r2,zero
  805e38:	f800283a 	ret

00805e3c <__fp_unlock>:
  805e3c:	0005883a 	mov	r2,zero
  805e40:	f800283a 	ret

00805e44 <__fp_unlock_all>:
  805e44:	00802074 	movhi	r2,129
  805e48:	1089eb04 	addi	r2,r2,10156
  805e4c:	11000017 	ldw	r4,0(r2)
  805e50:	01402034 	movhi	r5,128
  805e54:	29578f04 	addi	r5,r5,24124
  805e58:	080698c1 	jmpi	80698c <_fwalk>

00805e5c <__fp_lock_all>:
  805e5c:	00802074 	movhi	r2,129
  805e60:	1089eb04 	addi	r2,r2,10156
  805e64:	11000017 	ldw	r4,0(r2)
  805e68:	01402034 	movhi	r5,128
  805e6c:	29578d04 	addi	r5,r5,24116
  805e70:	080698c1 	jmpi	80698c <_fwalk>

00805e74 <_cleanup_r>:
  805e74:	01402074 	movhi	r5,129
  805e78:	2967c504 	addi	r5,r5,-24812
  805e7c:	080698c1 	jmpi	80698c <_fwalk>

00805e80 <_cleanup>:
  805e80:	00802074 	movhi	r2,129
  805e84:	1089ec04 	addi	r2,r2,10160
  805e88:	11000017 	ldw	r4,0(r2)
  805e8c:	0805e741 	jmpi	805e74 <_cleanup_r>

00805e90 <__sfmoreglue>:
  805e90:	defffc04 	addi	sp,sp,-16
  805e94:	dc400115 	stw	r17,4(sp)
  805e98:	2c401724 	muli	r17,r5,92
  805e9c:	dc800215 	stw	r18,8(sp)
  805ea0:	2825883a 	mov	r18,r5
  805ea4:	89400304 	addi	r5,r17,12
  805ea8:	dc000015 	stw	r16,0(sp)
  805eac:	dfc00315 	stw	ra,12(sp)
  805eb0:	08016bc0 	call	8016bc <_malloc_r>
  805eb4:	0021883a 	mov	r16,zero
  805eb8:	880d883a 	mov	r6,r17
  805ebc:	000b883a 	mov	r5,zero
  805ec0:	10000626 	beq	r2,zero,805edc <__sfmoreglue+0x4c>
  805ec4:	11000304 	addi	r4,r2,12
  805ec8:	14800115 	stw	r18,4(r2)
  805ecc:	10000015 	stw	zero,0(r2)
  805ed0:	11000215 	stw	r4,8(r2)
  805ed4:	1021883a 	mov	r16,r2
  805ed8:	0806f000 	call	806f00 <memset>
  805edc:	8005883a 	mov	r2,r16
  805ee0:	dfc00317 	ldw	ra,12(sp)
  805ee4:	dc800217 	ldw	r18,8(sp)
  805ee8:	dc400117 	ldw	r17,4(sp)
  805eec:	dc000017 	ldw	r16,0(sp)
  805ef0:	dec00404 	addi	sp,sp,16
  805ef4:	f800283a 	ret

00805ef8 <__sfp>:
  805ef8:	defffd04 	addi	sp,sp,-12
  805efc:	00802074 	movhi	r2,129
  805f00:	1089ec04 	addi	r2,r2,10160
  805f04:	dc000015 	stw	r16,0(sp)
  805f08:	14000017 	ldw	r16,0(r2)
  805f0c:	dc400115 	stw	r17,4(sp)
  805f10:	dfc00215 	stw	ra,8(sp)
  805f14:	80800e17 	ldw	r2,56(r16)
  805f18:	2023883a 	mov	r17,r4
  805f1c:	10002626 	beq	r2,zero,805fb8 <__sfp+0xc0>
  805f20:	8400b804 	addi	r16,r16,736
  805f24:	80800117 	ldw	r2,4(r16)
  805f28:	81000217 	ldw	r4,8(r16)
  805f2c:	10ffffc4 	addi	r3,r2,-1
  805f30:	18000916 	blt	r3,zero,805f58 <__sfp+0x60>
  805f34:	2080030f 	ldh	r2,12(r4)
  805f38:	10000b26 	beq	r2,zero,805f68 <__sfp+0x70>
  805f3c:	017fffc4 	movi	r5,-1
  805f40:	00000206 	br	805f4c <__sfp+0x54>
  805f44:	2080030f 	ldh	r2,12(r4)
  805f48:	10000726 	beq	r2,zero,805f68 <__sfp+0x70>
  805f4c:	18ffffc4 	addi	r3,r3,-1
  805f50:	21001704 	addi	r4,r4,92
  805f54:	197ffb1e 	bne	r3,r5,805f44 <__sfp+0x4c>
  805f58:	80800017 	ldw	r2,0(r16)
  805f5c:	10001926 	beq	r2,zero,805fc4 <__sfp+0xcc>
  805f60:	1021883a 	mov	r16,r2
  805f64:	003fef06 	br	805f24 <__sfp+0x2c>
  805f68:	00bfffc4 	movi	r2,-1
  805f6c:	00c00044 	movi	r3,1
  805f70:	2080038d 	sth	r2,14(r4)
  805f74:	20c0030d 	sth	r3,12(r4)
  805f78:	20000015 	stw	zero,0(r4)
  805f7c:	20000215 	stw	zero,8(r4)
  805f80:	20000115 	stw	zero,4(r4)
  805f84:	20000415 	stw	zero,16(r4)
  805f88:	20000515 	stw	zero,20(r4)
  805f8c:	20000615 	stw	zero,24(r4)
  805f90:	20000c15 	stw	zero,48(r4)
  805f94:	20000d15 	stw	zero,52(r4)
  805f98:	20001115 	stw	zero,68(r4)
  805f9c:	20001215 	stw	zero,72(r4)
  805fa0:	2005883a 	mov	r2,r4
  805fa4:	dfc00217 	ldw	ra,8(sp)
  805fa8:	dc400117 	ldw	r17,4(sp)
  805fac:	dc000017 	ldw	r16,0(sp)
  805fb0:	dec00304 	addi	sp,sp,12
  805fb4:	f800283a 	ret
  805fb8:	8009883a 	mov	r4,r16
  805fbc:	0805d900 	call	805d90 <__sinit>
  805fc0:	003fd706 	br	805f20 <__sfp+0x28>
  805fc4:	8809883a 	mov	r4,r17
  805fc8:	01400104 	movi	r5,4
  805fcc:	0805e900 	call	805e90 <__sfmoreglue>
  805fd0:	80800015 	stw	r2,0(r16)
  805fd4:	103fe21e 	bne	r2,zero,805f60 <__sfp+0x68>
  805fd8:	00800304 	movi	r2,12
  805fdc:	0009883a 	mov	r4,zero
  805fe0:	88800015 	stw	r2,0(r17)
  805fe4:	003fee06 	br	805fa0 <__sfp+0xa8>

00805fe8 <_malloc_trim_r>:
  805fe8:	defffb04 	addi	sp,sp,-20
  805fec:	dcc00315 	stw	r19,12(sp)
  805ff0:	04c02074 	movhi	r19,129
  805ff4:	9cc3ff04 	addi	r19,r19,4092
  805ff8:	dc800215 	stw	r18,8(sp)
  805ffc:	dc400115 	stw	r17,4(sp)
  806000:	dc000015 	stw	r16,0(sp)
  806004:	2823883a 	mov	r17,r5
  806008:	2025883a 	mov	r18,r4
  80600c:	dfc00415 	stw	ra,16(sp)
  806010:	080cfd40 	call	80cfd4 <__malloc_lock>
  806014:	98800217 	ldw	r2,8(r19)
  806018:	9009883a 	mov	r4,r18
  80601c:	000b883a 	mov	r5,zero
  806020:	10c00117 	ldw	r3,4(r2)
  806024:	00bfff04 	movi	r2,-4
  806028:	18a0703a 	and	r16,r3,r2
  80602c:	8463c83a 	sub	r17,r16,r17
  806030:	8c43fbc4 	addi	r17,r17,4079
  806034:	8822d33a 	srli	r17,r17,12
  806038:	0083ffc4 	movi	r2,4095
  80603c:	8c7fffc4 	addi	r17,r17,-1
  806040:	8822933a 	slli	r17,r17,12
  806044:	1440060e 	bge	r2,r17,806060 <_malloc_trim_r+0x78>
  806048:	0801f280 	call	801f28 <_sbrk_r>
  80604c:	98c00217 	ldw	r3,8(r19)
  806050:	9009883a 	mov	r4,r18
  806054:	044bc83a 	sub	r5,zero,r17
  806058:	80c7883a 	add	r3,r16,r3
  80605c:	10c00926 	beq	r2,r3,806084 <_malloc_trim_r+0x9c>
  806060:	080cff40 	call	80cff4 <__malloc_unlock>
  806064:	0005883a 	mov	r2,zero
  806068:	dfc00417 	ldw	ra,16(sp)
  80606c:	dcc00317 	ldw	r19,12(sp)
  806070:	dc800217 	ldw	r18,8(sp)
  806074:	dc400117 	ldw	r17,4(sp)
  806078:	dc000017 	ldw	r16,0(sp)
  80607c:	dec00504 	addi	sp,sp,20
  806080:	f800283a 	ret
  806084:	9009883a 	mov	r4,r18
  806088:	0801f280 	call	801f28 <_sbrk_r>
  80608c:	844dc83a 	sub	r6,r16,r17
  806090:	00ffffc4 	movi	r3,-1
  806094:	9009883a 	mov	r4,r18
  806098:	000b883a 	mov	r5,zero
  80609c:	01c02074 	movhi	r7,129
  8060a0:	39d10e04 	addi	r7,r7,17464
  8060a4:	31800054 	ori	r6,r6,1
  8060a8:	10c00926 	beq	r2,r3,8060d0 <_malloc_trim_r+0xe8>
  8060ac:	38800017 	ldw	r2,0(r7)
  8060b0:	98c00217 	ldw	r3,8(r19)
  8060b4:	9009883a 	mov	r4,r18
  8060b8:	1445c83a 	sub	r2,r2,r17
  8060bc:	38800015 	stw	r2,0(r7)
  8060c0:	19800115 	stw	r6,4(r3)
  8060c4:	080cff40 	call	80cff4 <__malloc_unlock>
  8060c8:	00800044 	movi	r2,1
  8060cc:	003fe606 	br	806068 <_malloc_trim_r+0x80>
  8060d0:	0801f280 	call	801f28 <_sbrk_r>
  8060d4:	99800217 	ldw	r6,8(r19)
  8060d8:	100f883a 	mov	r7,r2
  8060dc:	9009883a 	mov	r4,r18
  8060e0:	1187c83a 	sub	r3,r2,r6
  8060e4:	008003c4 	movi	r2,15
  8060e8:	19400054 	ori	r5,r3,1
  8060ec:	10ffdc0e 	bge	r2,r3,806060 <_malloc_trim_r+0x78>
  8060f0:	00802074 	movhi	r2,129
  8060f4:	1089ee04 	addi	r2,r2,10168
  8060f8:	10c00017 	ldw	r3,0(r2)
  8060fc:	00802074 	movhi	r2,129
  806100:	10910e04 	addi	r2,r2,17464
  806104:	31400115 	stw	r5,4(r6)
  806108:	38c7c83a 	sub	r3,r7,r3
  80610c:	10c00015 	stw	r3,0(r2)
  806110:	003fd306 	br	806060 <_malloc_trim_r+0x78>

00806114 <_free_r>:
  806114:	defffd04 	addi	sp,sp,-12
  806118:	dc400115 	stw	r17,4(sp)
  80611c:	dc000015 	stw	r16,0(sp)
  806120:	dfc00215 	stw	ra,8(sp)
  806124:	2821883a 	mov	r16,r5
  806128:	2023883a 	mov	r17,r4
  80612c:	28005a26 	beq	r5,zero,806298 <_free_r+0x184>
  806130:	080cfd40 	call	80cfd4 <__malloc_lock>
  806134:	823ffe04 	addi	r8,r16,-8
  806138:	41400117 	ldw	r5,4(r8)
  80613c:	00bfff84 	movi	r2,-2
  806140:	02802074 	movhi	r10,129
  806144:	5283ff04 	addi	r10,r10,4092
  806148:	288e703a 	and	r7,r5,r2
  80614c:	41cd883a 	add	r6,r8,r7
  806150:	30c00117 	ldw	r3,4(r6)
  806154:	51000217 	ldw	r4,8(r10)
  806158:	00bfff04 	movi	r2,-4
  80615c:	1892703a 	and	r9,r3,r2
  806160:	5017883a 	mov	r11,r10
  806164:	31006726 	beq	r6,r4,806304 <_free_r+0x1f0>
  806168:	2880004c 	andi	r2,r5,1
  80616c:	1005003a 	cmpeq	r2,r2,zero
  806170:	32400115 	stw	r9,4(r6)
  806174:	10001a1e 	bne	r2,zero,8061e0 <_free_r+0xcc>
  806178:	000b883a 	mov	r5,zero
  80617c:	3247883a 	add	r3,r6,r9
  806180:	18800117 	ldw	r2,4(r3)
  806184:	1080004c 	andi	r2,r2,1
  806188:	1000231e 	bne	r2,zero,806218 <_free_r+0x104>
  80618c:	280ac03a 	cmpne	r5,r5,zero
  806190:	3a4f883a 	add	r7,r7,r9
  806194:	2800451e 	bne	r5,zero,8062ac <_free_r+0x198>
  806198:	31000217 	ldw	r4,8(r6)
  80619c:	00802074 	movhi	r2,129
  8061a0:	10840104 	addi	r2,r2,4100
  8061a4:	20807b26 	beq	r4,r2,806394 <_free_r+0x280>
  8061a8:	30800317 	ldw	r2,12(r6)
  8061ac:	3a07883a 	add	r3,r7,r8
  8061b0:	19c00015 	stw	r7,0(r3)
  8061b4:	11000215 	stw	r4,8(r2)
  8061b8:	20800315 	stw	r2,12(r4)
  8061bc:	38800054 	ori	r2,r7,1
  8061c0:	40800115 	stw	r2,4(r8)
  8061c4:	28001a26 	beq	r5,zero,806230 <_free_r+0x11c>
  8061c8:	8809883a 	mov	r4,r17
  8061cc:	dfc00217 	ldw	ra,8(sp)
  8061d0:	dc400117 	ldw	r17,4(sp)
  8061d4:	dc000017 	ldw	r16,0(sp)
  8061d8:	dec00304 	addi	sp,sp,12
  8061dc:	080cff41 	jmpi	80cff4 <__malloc_unlock>
  8061e0:	80bffe17 	ldw	r2,-8(r16)
  8061e4:	50c00204 	addi	r3,r10,8
  8061e8:	4091c83a 	sub	r8,r8,r2
  8061ec:	41000217 	ldw	r4,8(r8)
  8061f0:	388f883a 	add	r7,r7,r2
  8061f4:	20c06126 	beq	r4,r3,80637c <_free_r+0x268>
  8061f8:	40800317 	ldw	r2,12(r8)
  8061fc:	3247883a 	add	r3,r6,r9
  806200:	000b883a 	mov	r5,zero
  806204:	11000215 	stw	r4,8(r2)
  806208:	20800315 	stw	r2,12(r4)
  80620c:	18800117 	ldw	r2,4(r3)
  806210:	1080004c 	andi	r2,r2,1
  806214:	103fdd26 	beq	r2,zero,80618c <_free_r+0x78>
  806218:	38800054 	ori	r2,r7,1
  80621c:	3a07883a 	add	r3,r7,r8
  806220:	280ac03a 	cmpne	r5,r5,zero
  806224:	40800115 	stw	r2,4(r8)
  806228:	19c00015 	stw	r7,0(r3)
  80622c:	283fe61e 	bne	r5,zero,8061c8 <_free_r+0xb4>
  806230:	00807fc4 	movi	r2,511
  806234:	11c01f2e 	bgeu	r2,r7,8062b4 <_free_r+0x1a0>
  806238:	3806d27a 	srli	r3,r7,9
  80623c:	1800481e 	bne	r3,zero,806360 <_free_r+0x24c>
  806240:	3804d0fa 	srli	r2,r7,3
  806244:	100690fa 	slli	r3,r2,3
  806248:	1acd883a 	add	r6,r3,r11
  80624c:	31400217 	ldw	r5,8(r6)
  806250:	31405926 	beq	r6,r5,8063b8 <_free_r+0x2a4>
  806254:	28800117 	ldw	r2,4(r5)
  806258:	00ffff04 	movi	r3,-4
  80625c:	10c4703a 	and	r2,r2,r3
  806260:	3880022e 	bgeu	r7,r2,80626c <_free_r+0x158>
  806264:	29400217 	ldw	r5,8(r5)
  806268:	317ffa1e 	bne	r6,r5,806254 <_free_r+0x140>
  80626c:	29800317 	ldw	r6,12(r5)
  806270:	41800315 	stw	r6,12(r8)
  806274:	41400215 	stw	r5,8(r8)
  806278:	8809883a 	mov	r4,r17
  80627c:	2a000315 	stw	r8,12(r5)
  806280:	32000215 	stw	r8,8(r6)
  806284:	dfc00217 	ldw	ra,8(sp)
  806288:	dc400117 	ldw	r17,4(sp)
  80628c:	dc000017 	ldw	r16,0(sp)
  806290:	dec00304 	addi	sp,sp,12
  806294:	080cff41 	jmpi	80cff4 <__malloc_unlock>
  806298:	dfc00217 	ldw	ra,8(sp)
  80629c:	dc400117 	ldw	r17,4(sp)
  8062a0:	dc000017 	ldw	r16,0(sp)
  8062a4:	dec00304 	addi	sp,sp,12
  8062a8:	f800283a 	ret
  8062ac:	31000217 	ldw	r4,8(r6)
  8062b0:	003fbd06 	br	8061a8 <_free_r+0x94>
  8062b4:	3806d0fa 	srli	r3,r7,3
  8062b8:	00800044 	movi	r2,1
  8062bc:	51400117 	ldw	r5,4(r10)
  8062c0:	180890fa 	slli	r4,r3,3
  8062c4:	1807d0ba 	srai	r3,r3,2
  8062c8:	22c9883a 	add	r4,r4,r11
  8062cc:	21800217 	ldw	r6,8(r4)
  8062d0:	10c4983a 	sll	r2,r2,r3
  8062d4:	41000315 	stw	r4,12(r8)
  8062d8:	41800215 	stw	r6,8(r8)
  8062dc:	288ab03a 	or	r5,r5,r2
  8062e0:	22000215 	stw	r8,8(r4)
  8062e4:	8809883a 	mov	r4,r17
  8062e8:	51400115 	stw	r5,4(r10)
  8062ec:	32000315 	stw	r8,12(r6)
  8062f0:	dfc00217 	ldw	ra,8(sp)
  8062f4:	dc400117 	ldw	r17,4(sp)
  8062f8:	dc000017 	ldw	r16,0(sp)
  8062fc:	dec00304 	addi	sp,sp,12
  806300:	080cff41 	jmpi	80cff4 <__malloc_unlock>
  806304:	2880004c 	andi	r2,r5,1
  806308:	3a4d883a 	add	r6,r7,r9
  80630c:	1000071e 	bne	r2,zero,80632c <_free_r+0x218>
  806310:	80bffe17 	ldw	r2,-8(r16)
  806314:	4091c83a 	sub	r8,r8,r2
  806318:	41000317 	ldw	r4,12(r8)
  80631c:	40c00217 	ldw	r3,8(r8)
  806320:	308d883a 	add	r6,r6,r2
  806324:	20c00215 	stw	r3,8(r4)
  806328:	19000315 	stw	r4,12(r3)
  80632c:	00802074 	movhi	r2,129
  806330:	1089ed04 	addi	r2,r2,10164
  806334:	11000017 	ldw	r4,0(r2)
  806338:	30c00054 	ori	r3,r6,1
  80633c:	52000215 	stw	r8,8(r10)
  806340:	40c00115 	stw	r3,4(r8)
  806344:	313fa036 	bltu	r6,r4,8061c8 <_free_r+0xb4>
  806348:	00802074 	movhi	r2,129
  80634c:	10910104 	addi	r2,r2,17412
  806350:	11400017 	ldw	r5,0(r2)
  806354:	8809883a 	mov	r4,r17
  806358:	0805fe80 	call	805fe8 <_malloc_trim_r>
  80635c:	003f9a06 	br	8061c8 <_free_r+0xb4>
  806360:	00800104 	movi	r2,4
  806364:	10c0072e 	bgeu	r2,r3,806384 <_free_r+0x270>
  806368:	00800504 	movi	r2,20
  80636c:	10c01936 	bltu	r2,r3,8063d4 <_free_r+0x2c0>
  806370:	188016c4 	addi	r2,r3,91
  806374:	100690fa 	slli	r3,r2,3
  806378:	003fb306 	br	806248 <_free_r+0x134>
  80637c:	01400044 	movi	r5,1
  806380:	003f7e06 	br	80617c <_free_r+0x68>
  806384:	3804d1ba 	srli	r2,r7,6
  806388:	10800e04 	addi	r2,r2,56
  80638c:	100690fa 	slli	r3,r2,3
  806390:	003fad06 	br	806248 <_free_r+0x134>
  806394:	22000315 	stw	r8,12(r4)
  806398:	22000215 	stw	r8,8(r4)
  80639c:	3a05883a 	add	r2,r7,r8
  8063a0:	38c00054 	ori	r3,r7,1
  8063a4:	11c00015 	stw	r7,0(r2)
  8063a8:	41000215 	stw	r4,8(r8)
  8063ac:	40c00115 	stw	r3,4(r8)
  8063b0:	41000315 	stw	r4,12(r8)
  8063b4:	003f8406 	br	8061c8 <_free_r+0xb4>
  8063b8:	1005d0ba 	srai	r2,r2,2
  8063bc:	00c00044 	movi	r3,1
  8063c0:	51000117 	ldw	r4,4(r10)
  8063c4:	1886983a 	sll	r3,r3,r2
  8063c8:	20c8b03a 	or	r4,r4,r3
  8063cc:	51000115 	stw	r4,4(r10)
  8063d0:	003fa706 	br	806270 <_free_r+0x15c>
  8063d4:	00801504 	movi	r2,84
  8063d8:	10c00436 	bltu	r2,r3,8063ec <_free_r+0x2d8>
  8063dc:	3804d33a 	srli	r2,r7,12
  8063e0:	10801b84 	addi	r2,r2,110
  8063e4:	100690fa 	slli	r3,r2,3
  8063e8:	003f9706 	br	806248 <_free_r+0x134>
  8063ec:	00805504 	movi	r2,340
  8063f0:	10c00436 	bltu	r2,r3,806404 <_free_r+0x2f0>
  8063f4:	3804d3fa 	srli	r2,r7,15
  8063f8:	10801dc4 	addi	r2,r2,119
  8063fc:	100690fa 	slli	r3,r2,3
  806400:	003f9106 	br	806248 <_free_r+0x134>
  806404:	00815504 	movi	r2,1364
  806408:	10c0032e 	bgeu	r2,r3,806418 <_free_r+0x304>
  80640c:	00801f84 	movi	r2,126
  806410:	00c0fc04 	movi	r3,1008
  806414:	003f8c06 	br	806248 <_free_r+0x134>
  806418:	3804d4ba 	srli	r2,r7,18
  80641c:	10801f04 	addi	r2,r2,124
  806420:	100690fa 	slli	r3,r2,3
  806424:	003f8806 	br	806248 <_free_r+0x134>

00806428 <__sfvwrite_r>:
  806428:	30800217 	ldw	r2,8(r6)
  80642c:	defff504 	addi	sp,sp,-44
  806430:	df000915 	stw	fp,36(sp)
  806434:	dd800715 	stw	r22,28(sp)
  806438:	dc800315 	stw	r18,12(sp)
  80643c:	dfc00a15 	stw	ra,40(sp)
  806440:	ddc00815 	stw	r23,32(sp)
  806444:	dd400615 	stw	r21,24(sp)
  806448:	dd000515 	stw	r20,20(sp)
  80644c:	dcc00415 	stw	r19,16(sp)
  806450:	dc400215 	stw	r17,8(sp)
  806454:	dc000115 	stw	r16,4(sp)
  806458:	302d883a 	mov	r22,r6
  80645c:	2039883a 	mov	fp,r4
  806460:	2825883a 	mov	r18,r5
  806464:	10001c26 	beq	r2,zero,8064d8 <__sfvwrite_r+0xb0>
  806468:	29c0030b 	ldhu	r7,12(r5)
  80646c:	3880020c 	andi	r2,r7,8
  806470:	10002726 	beq	r2,zero,806510 <__sfvwrite_r+0xe8>
  806474:	28800417 	ldw	r2,16(r5)
  806478:	10002526 	beq	r2,zero,806510 <__sfvwrite_r+0xe8>
  80647c:	3880008c 	andi	r2,r7,2
  806480:	b5400017 	ldw	r21,0(r22)
  806484:	10002826 	beq	r2,zero,806528 <__sfvwrite_r+0x100>
  806488:	0021883a 	mov	r16,zero
  80648c:	0023883a 	mov	r17,zero
  806490:	880d883a 	mov	r6,r17
  806494:	e009883a 	mov	r4,fp
  806498:	00810004 	movi	r2,1024
  80649c:	80006e26 	beq	r16,zero,806658 <__sfvwrite_r+0x230>
  8064a0:	800f883a 	mov	r7,r16
  8064a4:	91400717 	ldw	r5,28(r18)
  8064a8:	1400012e 	bgeu	r2,r16,8064b0 <__sfvwrite_r+0x88>
  8064ac:	100f883a 	mov	r7,r2
  8064b0:	90c00917 	ldw	r3,36(r18)
  8064b4:	183ee83a 	callr	r3
  8064b8:	1007883a 	mov	r3,r2
  8064bc:	80a1c83a 	sub	r16,r16,r2
  8064c0:	88a3883a 	add	r17,r17,r2
  8064c4:	00806d0e 	bge	zero,r2,80667c <__sfvwrite_r+0x254>
  8064c8:	b0800217 	ldw	r2,8(r22)
  8064cc:	10c5c83a 	sub	r2,r2,r3
  8064d0:	b0800215 	stw	r2,8(r22)
  8064d4:	103fee1e 	bne	r2,zero,806490 <__sfvwrite_r+0x68>
  8064d8:	0009883a 	mov	r4,zero
  8064dc:	2005883a 	mov	r2,r4
  8064e0:	dfc00a17 	ldw	ra,40(sp)
  8064e4:	df000917 	ldw	fp,36(sp)
  8064e8:	ddc00817 	ldw	r23,32(sp)
  8064ec:	dd800717 	ldw	r22,28(sp)
  8064f0:	dd400617 	ldw	r21,24(sp)
  8064f4:	dd000517 	ldw	r20,20(sp)
  8064f8:	dcc00417 	ldw	r19,16(sp)
  8064fc:	dc800317 	ldw	r18,12(sp)
  806500:	dc400217 	ldw	r17,8(sp)
  806504:	dc000117 	ldw	r16,4(sp)
  806508:	dec00b04 	addi	sp,sp,44
  80650c:	f800283a 	ret
  806510:	08040240 	call	804024 <__swsetup_r>
  806514:	1000e41e 	bne	r2,zero,8068a8 <__sfvwrite_r+0x480>
  806518:	91c0030b 	ldhu	r7,12(r18)
  80651c:	b5400017 	ldw	r21,0(r22)
  806520:	3880008c 	andi	r2,r7,2
  806524:	103fd81e 	bne	r2,zero,806488 <__sfvwrite_r+0x60>
  806528:	3880004c 	andi	r2,r7,1
  80652c:	1005003a 	cmpeq	r2,r2,zero
  806530:	10005726 	beq	r2,zero,806690 <__sfvwrite_r+0x268>
  806534:	0029883a 	mov	r20,zero
  806538:	002f883a 	mov	r23,zero
  80653c:	a0004226 	beq	r20,zero,806648 <__sfvwrite_r+0x220>
  806540:	3880800c 	andi	r2,r7,512
  806544:	94000217 	ldw	r16,8(r18)
  806548:	10008b26 	beq	r2,zero,806778 <__sfvwrite_r+0x350>
  80654c:	800d883a 	mov	r6,r16
  806550:	a400a536 	bltu	r20,r16,8067e8 <__sfvwrite_r+0x3c0>
  806554:	3881200c 	andi	r2,r7,1152
  806558:	10002726 	beq	r2,zero,8065f8 <__sfvwrite_r+0x1d0>
  80655c:	90800517 	ldw	r2,20(r18)
  806560:	92000417 	ldw	r8,16(r18)
  806564:	91400017 	ldw	r5,0(r18)
  806568:	1087883a 	add	r3,r2,r2
  80656c:	1887883a 	add	r3,r3,r2
  806570:	1808d7fa 	srli	r4,r3,31
  806574:	2a21c83a 	sub	r16,r5,r8
  806578:	80800044 	addi	r2,r16,1
  80657c:	20c9883a 	add	r4,r4,r3
  806580:	2027d07a 	srai	r19,r4,1
  806584:	a085883a 	add	r2,r20,r2
  806588:	980d883a 	mov	r6,r19
  80658c:	9880022e 	bgeu	r19,r2,806598 <__sfvwrite_r+0x170>
  806590:	1027883a 	mov	r19,r2
  806594:	100d883a 	mov	r6,r2
  806598:	3881000c 	andi	r2,r7,1024
  80659c:	1000b826 	beq	r2,zero,806880 <__sfvwrite_r+0x458>
  8065a0:	300b883a 	mov	r5,r6
  8065a4:	e009883a 	mov	r4,fp
  8065a8:	08016bc0 	call	8016bc <_malloc_r>
  8065ac:	10003126 	beq	r2,zero,806674 <__sfvwrite_r+0x24c>
  8065b0:	91400417 	ldw	r5,16(r18)
  8065b4:	1009883a 	mov	r4,r2
  8065b8:	800d883a 	mov	r6,r16
  8065bc:	1023883a 	mov	r17,r2
  8065c0:	0806d800 	call	806d80 <memcpy>
  8065c4:	90c0030b 	ldhu	r3,12(r18)
  8065c8:	00beffc4 	movi	r2,-1025
  8065cc:	1886703a 	and	r3,r3,r2
  8065d0:	18c02014 	ori	r3,r3,128
  8065d4:	90c0030d 	sth	r3,12(r18)
  8065d8:	9c07c83a 	sub	r3,r19,r16
  8065dc:	8c05883a 	add	r2,r17,r16
  8065e0:	a00d883a 	mov	r6,r20
  8065e4:	a021883a 	mov	r16,r20
  8065e8:	90800015 	stw	r2,0(r18)
  8065ec:	90c00215 	stw	r3,8(r18)
  8065f0:	94400415 	stw	r17,16(r18)
  8065f4:	94c00515 	stw	r19,20(r18)
  8065f8:	91000017 	ldw	r4,0(r18)
  8065fc:	b80b883a 	mov	r5,r23
  806600:	a023883a 	mov	r17,r20
  806604:	0806e200 	call	806e20 <memmove>
  806608:	90c00217 	ldw	r3,8(r18)
  80660c:	90800017 	ldw	r2,0(r18)
  806610:	a027883a 	mov	r19,r20
  806614:	1c07c83a 	sub	r3,r3,r16
  806618:	1405883a 	add	r2,r2,r16
  80661c:	90c00215 	stw	r3,8(r18)
  806620:	a021883a 	mov	r16,r20
  806624:	90800015 	stw	r2,0(r18)
  806628:	b0800217 	ldw	r2,8(r22)
  80662c:	1405c83a 	sub	r2,r2,r16
  806630:	b0800215 	stw	r2,8(r22)
  806634:	103fa826 	beq	r2,zero,8064d8 <__sfvwrite_r+0xb0>
  806638:	a469c83a 	sub	r20,r20,r17
  80663c:	91c0030b 	ldhu	r7,12(r18)
  806640:	bcef883a 	add	r23,r23,r19
  806644:	a03fbe1e 	bne	r20,zero,806540 <__sfvwrite_r+0x118>
  806648:	adc00017 	ldw	r23,0(r21)
  80664c:	ad000117 	ldw	r20,4(r21)
  806650:	ad400204 	addi	r21,r21,8
  806654:	003fb906 	br	80653c <__sfvwrite_r+0x114>
  806658:	ac400017 	ldw	r17,0(r21)
  80665c:	ac000117 	ldw	r16,4(r21)
  806660:	ad400204 	addi	r21,r21,8
  806664:	003f8a06 	br	806490 <__sfvwrite_r+0x68>
  806668:	91400417 	ldw	r5,16(r18)
  80666c:	e009883a 	mov	r4,fp
  806670:	08061140 	call	806114 <_free_r>
  806674:	00800304 	movi	r2,12
  806678:	e0800015 	stw	r2,0(fp)
  80667c:	9080030b 	ldhu	r2,12(r18)
  806680:	013fffc4 	movi	r4,-1
  806684:	10801014 	ori	r2,r2,64
  806688:	9080030d 	sth	r2,12(r18)
  80668c:	003f9306 	br	8064dc <__sfvwrite_r+0xb4>
  806690:	0027883a 	mov	r19,zero
  806694:	002f883a 	mov	r23,zero
  806698:	d8000015 	stw	zero,0(sp)
  80669c:	0029883a 	mov	r20,zero
  8066a0:	98001e26 	beq	r19,zero,80671c <__sfvwrite_r+0x2f4>
  8066a4:	d8c00017 	ldw	r3,0(sp)
  8066a8:	1804c03a 	cmpne	r2,r3,zero
  8066ac:	10005e26 	beq	r2,zero,806828 <__sfvwrite_r+0x400>
  8066b0:	9821883a 	mov	r16,r19
  8066b4:	a4c0012e 	bgeu	r20,r19,8066bc <__sfvwrite_r+0x294>
  8066b8:	a021883a 	mov	r16,r20
  8066bc:	91000017 	ldw	r4,0(r18)
  8066c0:	90800417 	ldw	r2,16(r18)
  8066c4:	91800217 	ldw	r6,8(r18)
  8066c8:	91c00517 	ldw	r7,20(r18)
  8066cc:	1100022e 	bgeu	r2,r4,8066d8 <__sfvwrite_r+0x2b0>
  8066d0:	31e3883a 	add	r17,r6,r7
  8066d4:	8c001616 	blt	r17,r16,806730 <__sfvwrite_r+0x308>
  8066d8:	81c03816 	blt	r16,r7,8067bc <__sfvwrite_r+0x394>
  8066dc:	90c00917 	ldw	r3,36(r18)
  8066e0:	91400717 	ldw	r5,28(r18)
  8066e4:	e009883a 	mov	r4,fp
  8066e8:	b80d883a 	mov	r6,r23
  8066ec:	183ee83a 	callr	r3
  8066f0:	1023883a 	mov	r17,r2
  8066f4:	00bfe10e 	bge	zero,r2,80667c <__sfvwrite_r+0x254>
  8066f8:	a469c83a 	sub	r20,r20,r17
  8066fc:	a0001826 	beq	r20,zero,806760 <__sfvwrite_r+0x338>
  806700:	b0800217 	ldw	r2,8(r22)
  806704:	1445c83a 	sub	r2,r2,r17
  806708:	b0800215 	stw	r2,8(r22)
  80670c:	103f7226 	beq	r2,zero,8064d8 <__sfvwrite_r+0xb0>
  806710:	9c67c83a 	sub	r19,r19,r17
  806714:	bc6f883a 	add	r23,r23,r17
  806718:	983fe21e 	bne	r19,zero,8066a4 <__sfvwrite_r+0x27c>
  80671c:	adc00017 	ldw	r23,0(r21)
  806720:	acc00117 	ldw	r19,4(r21)
  806724:	ad400204 	addi	r21,r21,8
  806728:	d8000015 	stw	zero,0(sp)
  80672c:	003fdc06 	br	8066a0 <__sfvwrite_r+0x278>
  806730:	b80b883a 	mov	r5,r23
  806734:	880d883a 	mov	r6,r17
  806738:	0806e200 	call	806e20 <memmove>
  80673c:	90c00017 	ldw	r3,0(r18)
  806740:	e009883a 	mov	r4,fp
  806744:	900b883a 	mov	r5,r18
  806748:	1c47883a 	add	r3,r3,r17
  80674c:	90c00015 	stw	r3,0(r18)
  806750:	0805af80 	call	805af8 <_fflush_r>
  806754:	103fc91e 	bne	r2,zero,80667c <__sfvwrite_r+0x254>
  806758:	a469c83a 	sub	r20,r20,r17
  80675c:	a03fe81e 	bne	r20,zero,806700 <__sfvwrite_r+0x2d8>
  806760:	e009883a 	mov	r4,fp
  806764:	900b883a 	mov	r5,r18
  806768:	0805af80 	call	805af8 <_fflush_r>
  80676c:	103fc31e 	bne	r2,zero,80667c <__sfvwrite_r+0x254>
  806770:	d8000015 	stw	zero,0(sp)
  806774:	003fe206 	br	806700 <__sfvwrite_r+0x2d8>
  806778:	91000017 	ldw	r4,0(r18)
  80677c:	90800417 	ldw	r2,16(r18)
  806780:	1100022e 	bgeu	r2,r4,80678c <__sfvwrite_r+0x364>
  806784:	8023883a 	mov	r17,r16
  806788:	85003136 	bltu	r16,r20,806850 <__sfvwrite_r+0x428>
  80678c:	91c00517 	ldw	r7,20(r18)
  806790:	a1c01836 	bltu	r20,r7,8067f4 <__sfvwrite_r+0x3cc>
  806794:	90c00917 	ldw	r3,36(r18)
  806798:	91400717 	ldw	r5,28(r18)
  80679c:	e009883a 	mov	r4,fp
  8067a0:	b80d883a 	mov	r6,r23
  8067a4:	183ee83a 	callr	r3
  8067a8:	1021883a 	mov	r16,r2
  8067ac:	00bfb30e 	bge	zero,r2,80667c <__sfvwrite_r+0x254>
  8067b0:	1023883a 	mov	r17,r2
  8067b4:	1027883a 	mov	r19,r2
  8067b8:	003f9b06 	br	806628 <__sfvwrite_r+0x200>
  8067bc:	b80b883a 	mov	r5,r23
  8067c0:	800d883a 	mov	r6,r16
  8067c4:	0806e200 	call	806e20 <memmove>
  8067c8:	90c00217 	ldw	r3,8(r18)
  8067cc:	90800017 	ldw	r2,0(r18)
  8067d0:	8023883a 	mov	r17,r16
  8067d4:	1c07c83a 	sub	r3,r3,r16
  8067d8:	1405883a 	add	r2,r2,r16
  8067dc:	90c00215 	stw	r3,8(r18)
  8067e0:	90800015 	stw	r2,0(r18)
  8067e4:	003fc406 	br	8066f8 <__sfvwrite_r+0x2d0>
  8067e8:	a00d883a 	mov	r6,r20
  8067ec:	a021883a 	mov	r16,r20
  8067f0:	003f8106 	br	8065f8 <__sfvwrite_r+0x1d0>
  8067f4:	b80b883a 	mov	r5,r23
  8067f8:	a00d883a 	mov	r6,r20
  8067fc:	0806e200 	call	806e20 <memmove>
  806800:	90c00217 	ldw	r3,8(r18)
  806804:	90800017 	ldw	r2,0(r18)
  806808:	a021883a 	mov	r16,r20
  80680c:	1d07c83a 	sub	r3,r3,r20
  806810:	1505883a 	add	r2,r2,r20
  806814:	a023883a 	mov	r17,r20
  806818:	a027883a 	mov	r19,r20
  80681c:	90c00215 	stw	r3,8(r18)
  806820:	90800015 	stw	r2,0(r18)
  806824:	003f8006 	br	806628 <__sfvwrite_r+0x200>
  806828:	b809883a 	mov	r4,r23
  80682c:	01400284 	movi	r5,10
  806830:	980d883a 	mov	r6,r19
  806834:	0806c9c0 	call	806c9c <memchr>
  806838:	10001726 	beq	r2,zero,806898 <__sfvwrite_r+0x470>
  80683c:	15c5c83a 	sub	r2,r2,r23
  806840:	15000044 	addi	r20,r2,1
  806844:	00800044 	movi	r2,1
  806848:	d8800015 	stw	r2,0(sp)
  80684c:	003f9806 	br	8066b0 <__sfvwrite_r+0x288>
  806850:	b80b883a 	mov	r5,r23
  806854:	800d883a 	mov	r6,r16
  806858:	0806e200 	call	806e20 <memmove>
  80685c:	90c00017 	ldw	r3,0(r18)
  806860:	e009883a 	mov	r4,fp
  806864:	900b883a 	mov	r5,r18
  806868:	1c07883a 	add	r3,r3,r16
  80686c:	90c00015 	stw	r3,0(r18)
  806870:	8027883a 	mov	r19,r16
  806874:	0805af80 	call	805af8 <_fflush_r>
  806878:	103f6b26 	beq	r2,zero,806628 <__sfvwrite_r+0x200>
  80687c:	003f7f06 	br	80667c <__sfvwrite_r+0x254>
  806880:	400b883a 	mov	r5,r8
  806884:	e009883a 	mov	r4,fp
  806888:	0807f8c0 	call	807f8c <_realloc_r>
  80688c:	103f7626 	beq	r2,zero,806668 <__sfvwrite_r+0x240>
  806890:	1023883a 	mov	r17,r2
  806894:	003f5006 	br	8065d8 <__sfvwrite_r+0x1b0>
  806898:	00c00044 	movi	r3,1
  80689c:	9d000044 	addi	r20,r19,1
  8068a0:	d8c00015 	stw	r3,0(sp)
  8068a4:	003f8206 	br	8066b0 <__sfvwrite_r+0x288>
  8068a8:	9080030b 	ldhu	r2,12(r18)
  8068ac:	00c00244 	movi	r3,9
  8068b0:	013fffc4 	movi	r4,-1
  8068b4:	10801014 	ori	r2,r2,64
  8068b8:	9080030d 	sth	r2,12(r18)
  8068bc:	e0c00015 	stw	r3,0(fp)
  8068c0:	003f0606 	br	8064dc <__sfvwrite_r+0xb4>

008068c4 <_fwalk_reent>:
  8068c4:	defff704 	addi	sp,sp,-36
  8068c8:	dcc00315 	stw	r19,12(sp)
  8068cc:	24c0b804 	addi	r19,r4,736
  8068d0:	dd800615 	stw	r22,24(sp)
  8068d4:	dd400515 	stw	r21,20(sp)
  8068d8:	dfc00815 	stw	ra,32(sp)
  8068dc:	ddc00715 	stw	r23,28(sp)
  8068e0:	dd000415 	stw	r20,16(sp)
  8068e4:	dc800215 	stw	r18,8(sp)
  8068e8:	dc400115 	stw	r17,4(sp)
  8068ec:	dc000015 	stw	r16,0(sp)
  8068f0:	202b883a 	mov	r21,r4
  8068f4:	282d883a 	mov	r22,r5
  8068f8:	0805d800 	call	805d80 <__sfp_lock_acquire>
  8068fc:	98002126 	beq	r19,zero,806984 <_fwalk_reent+0xc0>
  806900:	002f883a 	mov	r23,zero
  806904:	9c800117 	ldw	r18,4(r19)
  806908:	9c000217 	ldw	r16,8(r19)
  80690c:	90bfffc4 	addi	r2,r18,-1
  806910:	10000d16 	blt	r2,zero,806948 <_fwalk_reent+0x84>
  806914:	0023883a 	mov	r17,zero
  806918:	053fffc4 	movi	r20,-1
  80691c:	8080030f 	ldh	r2,12(r16)
  806920:	8c400044 	addi	r17,r17,1
  806924:	10000626 	beq	r2,zero,806940 <_fwalk_reent+0x7c>
  806928:	8080038f 	ldh	r2,14(r16)
  80692c:	800b883a 	mov	r5,r16
  806930:	a809883a 	mov	r4,r21
  806934:	15000226 	beq	r2,r20,806940 <_fwalk_reent+0x7c>
  806938:	b03ee83a 	callr	r22
  80693c:	b8aeb03a 	or	r23,r23,r2
  806940:	84001704 	addi	r16,r16,92
  806944:	947ff51e 	bne	r18,r17,80691c <_fwalk_reent+0x58>
  806948:	9cc00017 	ldw	r19,0(r19)
  80694c:	983fed1e 	bne	r19,zero,806904 <_fwalk_reent+0x40>
  806950:	0805d840 	call	805d84 <__sfp_lock_release>
  806954:	b805883a 	mov	r2,r23
  806958:	dfc00817 	ldw	ra,32(sp)
  80695c:	ddc00717 	ldw	r23,28(sp)
  806960:	dd800617 	ldw	r22,24(sp)
  806964:	dd400517 	ldw	r21,20(sp)
  806968:	dd000417 	ldw	r20,16(sp)
  80696c:	dcc00317 	ldw	r19,12(sp)
  806970:	dc800217 	ldw	r18,8(sp)
  806974:	dc400117 	ldw	r17,4(sp)
  806978:	dc000017 	ldw	r16,0(sp)
  80697c:	dec00904 	addi	sp,sp,36
  806980:	f800283a 	ret
  806984:	002f883a 	mov	r23,zero
  806988:	003ff106 	br	806950 <_fwalk_reent+0x8c>

0080698c <_fwalk>:
  80698c:	defff804 	addi	sp,sp,-32
  806990:	dcc00315 	stw	r19,12(sp)
  806994:	24c0b804 	addi	r19,r4,736
  806998:	dd400515 	stw	r21,20(sp)
  80699c:	dfc00715 	stw	ra,28(sp)
  8069a0:	dd800615 	stw	r22,24(sp)
  8069a4:	dd000415 	stw	r20,16(sp)
  8069a8:	dc800215 	stw	r18,8(sp)
  8069ac:	dc400115 	stw	r17,4(sp)
  8069b0:	dc000015 	stw	r16,0(sp)
  8069b4:	282b883a 	mov	r21,r5
  8069b8:	0805d800 	call	805d80 <__sfp_lock_acquire>
  8069bc:	98001f26 	beq	r19,zero,806a3c <_fwalk+0xb0>
  8069c0:	002d883a 	mov	r22,zero
  8069c4:	9c800117 	ldw	r18,4(r19)
  8069c8:	9c000217 	ldw	r16,8(r19)
  8069cc:	90bfffc4 	addi	r2,r18,-1
  8069d0:	10000c16 	blt	r2,zero,806a04 <_fwalk+0x78>
  8069d4:	0023883a 	mov	r17,zero
  8069d8:	053fffc4 	movi	r20,-1
  8069dc:	8080030f 	ldh	r2,12(r16)
  8069e0:	8c400044 	addi	r17,r17,1
  8069e4:	10000526 	beq	r2,zero,8069fc <_fwalk+0x70>
  8069e8:	8080038f 	ldh	r2,14(r16)
  8069ec:	8009883a 	mov	r4,r16
  8069f0:	15000226 	beq	r2,r20,8069fc <_fwalk+0x70>
  8069f4:	a83ee83a 	callr	r21
  8069f8:	b0acb03a 	or	r22,r22,r2
  8069fc:	84001704 	addi	r16,r16,92
  806a00:	947ff61e 	bne	r18,r17,8069dc <_fwalk+0x50>
  806a04:	9cc00017 	ldw	r19,0(r19)
  806a08:	983fee1e 	bne	r19,zero,8069c4 <_fwalk+0x38>
  806a0c:	0805d840 	call	805d84 <__sfp_lock_release>
  806a10:	b005883a 	mov	r2,r22
  806a14:	dfc00717 	ldw	ra,28(sp)
  806a18:	dd800617 	ldw	r22,24(sp)
  806a1c:	dd400517 	ldw	r21,20(sp)
  806a20:	dd000417 	ldw	r20,16(sp)
  806a24:	dcc00317 	ldw	r19,12(sp)
  806a28:	dc800217 	ldw	r18,8(sp)
  806a2c:	dc400117 	ldw	r17,4(sp)
  806a30:	dc000017 	ldw	r16,0(sp)
  806a34:	dec00804 	addi	sp,sp,32
  806a38:	f800283a 	ret
  806a3c:	002d883a 	mov	r22,zero
  806a40:	003ff206 	br	806a0c <_fwalk+0x80>

00806a44 <__locale_charset>:
  806a44:	d0a00717 	ldw	r2,-32740(gp)
  806a48:	f800283a 	ret

00806a4c <_localeconv_r>:
  806a4c:	00802074 	movhi	r2,129
  806a50:	10823504 	addi	r2,r2,2260
  806a54:	f800283a 	ret

00806a58 <localeconv>:
  806a58:	00802074 	movhi	r2,129
  806a5c:	1089eb04 	addi	r2,r2,10156
  806a60:	11000017 	ldw	r4,0(r2)
  806a64:	0806a4c1 	jmpi	806a4c <_localeconv_r>

00806a68 <_setlocale_r>:
  806a68:	defffc04 	addi	sp,sp,-16
  806a6c:	00c02074 	movhi	r3,129
  806a70:	18c20b04 	addi	r3,r3,2092
  806a74:	dc800215 	stw	r18,8(sp)
  806a78:	dc400115 	stw	r17,4(sp)
  806a7c:	dc000015 	stw	r16,0(sp)
  806a80:	2023883a 	mov	r17,r4
  806a84:	2825883a 	mov	r18,r5
  806a88:	dfc00315 	stw	ra,12(sp)
  806a8c:	3021883a 	mov	r16,r6
  806a90:	3009883a 	mov	r4,r6
  806a94:	180b883a 	mov	r5,r3
  806a98:	30000926 	beq	r6,zero,806ac0 <_setlocale_r+0x58>
  806a9c:	0808a8c0 	call	808a8c <strcmp>
  806aa0:	8009883a 	mov	r4,r16
  806aa4:	01402074 	movhi	r5,129
  806aa8:	29420a04 	addi	r5,r5,2088
  806aac:	10000b1e 	bne	r2,zero,806adc <_setlocale_r+0x74>
  806ab0:	8c000d15 	stw	r16,52(r17)
  806ab4:	8c800c15 	stw	r18,48(r17)
  806ab8:	00c02074 	movhi	r3,129
  806abc:	18c20b04 	addi	r3,r3,2092
  806ac0:	1805883a 	mov	r2,r3
  806ac4:	dfc00317 	ldw	ra,12(sp)
  806ac8:	dc800217 	ldw	r18,8(sp)
  806acc:	dc400117 	ldw	r17,4(sp)
  806ad0:	dc000017 	ldw	r16,0(sp)
  806ad4:	dec00404 	addi	sp,sp,16
  806ad8:	f800283a 	ret
  806adc:	0808a8c0 	call	808a8c <strcmp>
  806ae0:	0007883a 	mov	r3,zero
  806ae4:	103ff226 	beq	r2,zero,806ab0 <_setlocale_r+0x48>
  806ae8:	003ff506 	br	806ac0 <_setlocale_r+0x58>

00806aec <setlocale>:
  806aec:	01802074 	movhi	r6,129
  806af0:	3189eb04 	addi	r6,r6,10156
  806af4:	2007883a 	mov	r3,r4
  806af8:	31000017 	ldw	r4,0(r6)
  806afc:	280d883a 	mov	r6,r5
  806b00:	180b883a 	mov	r5,r3
  806b04:	0806a681 	jmpi	806a68 <_setlocale_r>

00806b08 <__smakebuf_r>:
  806b08:	2880030b 	ldhu	r2,12(r5)
  806b0c:	deffed04 	addi	sp,sp,-76
  806b10:	dc401015 	stw	r17,64(sp)
  806b14:	1080008c 	andi	r2,r2,2
  806b18:	dc000f15 	stw	r16,60(sp)
  806b1c:	dfc01215 	stw	ra,72(sp)
  806b20:	dc801115 	stw	r18,68(sp)
  806b24:	2821883a 	mov	r16,r5
  806b28:	2023883a 	mov	r17,r4
  806b2c:	10000b26 	beq	r2,zero,806b5c <__smakebuf_r+0x54>
  806b30:	28c010c4 	addi	r3,r5,67
  806b34:	00800044 	movi	r2,1
  806b38:	28800515 	stw	r2,20(r5)
  806b3c:	28c00415 	stw	r3,16(r5)
  806b40:	28c00015 	stw	r3,0(r5)
  806b44:	dfc01217 	ldw	ra,72(sp)
  806b48:	dc801117 	ldw	r18,68(sp)
  806b4c:	dc401017 	ldw	r17,64(sp)
  806b50:	dc000f17 	ldw	r16,60(sp)
  806b54:	dec01304 	addi	sp,sp,76
  806b58:	f800283a 	ret
  806b5c:	2940038f 	ldh	r5,14(r5)
  806b60:	28002116 	blt	r5,zero,806be8 <__smakebuf_r+0xe0>
  806b64:	d80d883a 	mov	r6,sp
  806b68:	0809f280 	call	809f28 <_fstat_r>
  806b6c:	10001e16 	blt	r2,zero,806be8 <__smakebuf_r+0xe0>
  806b70:	d8800117 	ldw	r2,4(sp)
  806b74:	00e00014 	movui	r3,32768
  806b78:	113c000c 	andi	r4,r2,61440
  806b7c:	20c03126 	beq	r4,r3,806c44 <__smakebuf_r+0x13c>
  806b80:	8080030b 	ldhu	r2,12(r16)
  806b84:	00c80004 	movi	r3,8192
  806b88:	10820014 	ori	r2,r2,2048
  806b8c:	8080030d 	sth	r2,12(r16)
  806b90:	20c01e26 	beq	r4,r3,806c0c <__smakebuf_r+0x104>
  806b94:	04810004 	movi	r18,1024
  806b98:	8809883a 	mov	r4,r17
  806b9c:	900b883a 	mov	r5,r18
  806ba0:	08016bc0 	call	8016bc <_malloc_r>
  806ba4:	1009883a 	mov	r4,r2
  806ba8:	10003126 	beq	r2,zero,806c70 <__smakebuf_r+0x168>
  806bac:	80c0030b 	ldhu	r3,12(r16)
  806bb0:	00802034 	movhi	r2,128
  806bb4:	10979d04 	addi	r2,r2,24180
  806bb8:	88800f15 	stw	r2,60(r17)
  806bbc:	18c02014 	ori	r3,r3,128
  806bc0:	84800515 	stw	r18,20(r16)
  806bc4:	80c0030d 	sth	r3,12(r16)
  806bc8:	81000415 	stw	r4,16(r16)
  806bcc:	81000015 	stw	r4,0(r16)
  806bd0:	dfc01217 	ldw	ra,72(sp)
  806bd4:	dc801117 	ldw	r18,68(sp)
  806bd8:	dc401017 	ldw	r17,64(sp)
  806bdc:	dc000f17 	ldw	r16,60(sp)
  806be0:	dec01304 	addi	sp,sp,76
  806be4:	f800283a 	ret
  806be8:	80c0030b 	ldhu	r3,12(r16)
  806bec:	1880200c 	andi	r2,r3,128
  806bf0:	10000426 	beq	r2,zero,806c04 <__smakebuf_r+0xfc>
  806bf4:	04801004 	movi	r18,64
  806bf8:	18820014 	ori	r2,r3,2048
  806bfc:	8080030d 	sth	r2,12(r16)
  806c00:	003fe506 	br	806b98 <__smakebuf_r+0x90>
  806c04:	04810004 	movi	r18,1024
  806c08:	003ffb06 	br	806bf8 <__smakebuf_r+0xf0>
  806c0c:	8140038f 	ldh	r5,14(r16)
  806c10:	8809883a 	mov	r4,r17
  806c14:	0809f9c0 	call	809f9c <_isatty_r>
  806c18:	103fde26 	beq	r2,zero,806b94 <__smakebuf_r+0x8c>
  806c1c:	8080030b 	ldhu	r2,12(r16)
  806c20:	80c010c4 	addi	r3,r16,67
  806c24:	04810004 	movi	r18,1024
  806c28:	10800054 	ori	r2,r2,1
  806c2c:	8080030d 	sth	r2,12(r16)
  806c30:	00800044 	movi	r2,1
  806c34:	80c00415 	stw	r3,16(r16)
  806c38:	80800515 	stw	r2,20(r16)
  806c3c:	80c00015 	stw	r3,0(r16)
  806c40:	003fd506 	br	806b98 <__smakebuf_r+0x90>
  806c44:	80c00a17 	ldw	r3,40(r16)
  806c48:	00802074 	movhi	r2,129
  806c4c:	10a25204 	addi	r2,r2,-30392
  806c50:	18bfcb1e 	bne	r3,r2,806b80 <__smakebuf_r+0x78>
  806c54:	8080030b 	ldhu	r2,12(r16)
  806c58:	00c10004 	movi	r3,1024
  806c5c:	1825883a 	mov	r18,r3
  806c60:	10c4b03a 	or	r2,r2,r3
  806c64:	8080030d 	sth	r2,12(r16)
  806c68:	80c01315 	stw	r3,76(r16)
  806c6c:	003fca06 	br	806b98 <__smakebuf_r+0x90>
  806c70:	8100030b 	ldhu	r4,12(r16)
  806c74:	2080800c 	andi	r2,r4,512
  806c78:	103fb21e 	bne	r2,zero,806b44 <__smakebuf_r+0x3c>
  806c7c:	80c010c4 	addi	r3,r16,67
  806c80:	21000094 	ori	r4,r4,2
  806c84:	00800044 	movi	r2,1
  806c88:	80800515 	stw	r2,20(r16)
  806c8c:	8100030d 	sth	r4,12(r16)
  806c90:	80c00415 	stw	r3,16(r16)
  806c94:	80c00015 	stw	r3,0(r16)
  806c98:	003faa06 	br	806b44 <__smakebuf_r+0x3c>

00806c9c <memchr>:
  806c9c:	008000c4 	movi	r2,3
  806ca0:	29403fcc 	andi	r5,r5,255
  806ca4:	2007883a 	mov	r3,r4
  806ca8:	1180022e 	bgeu	r2,r6,806cb4 <memchr+0x18>
  806cac:	2084703a 	and	r2,r4,r2
  806cb0:	10000b26 	beq	r2,zero,806ce0 <memchr+0x44>
  806cb4:	313fffc4 	addi	r4,r6,-1
  806cb8:	3000051e 	bne	r6,zero,806cd0 <memchr+0x34>
  806cbc:	00002c06 	br	806d70 <memchr+0xd4>
  806cc0:	213fffc4 	addi	r4,r4,-1
  806cc4:	00bfffc4 	movi	r2,-1
  806cc8:	18c00044 	addi	r3,r3,1
  806ccc:	20802826 	beq	r4,r2,806d70 <memchr+0xd4>
  806cd0:	18800003 	ldbu	r2,0(r3)
  806cd4:	28bffa1e 	bne	r5,r2,806cc0 <memchr+0x24>
  806cd8:	1805883a 	mov	r2,r3
  806cdc:	f800283a 	ret
  806ce0:	0011883a 	mov	r8,zero
  806ce4:	0007883a 	mov	r3,zero
  806ce8:	01c00104 	movi	r7,4
  806cec:	4004923a 	slli	r2,r8,8
  806cf0:	18c00044 	addi	r3,r3,1
  806cf4:	1151883a 	add	r8,r2,r5
  806cf8:	19fffc1e 	bne	r3,r7,806cec <memchr+0x50>
  806cfc:	02bfbff4 	movhi	r10,65279
  806d00:	52bfbfc4 	addi	r10,r10,-257
  806d04:	02602074 	movhi	r9,32897
  806d08:	4a602004 	addi	r9,r9,-32640
  806d0c:	02c000c4 	movi	r11,3
  806d10:	20800017 	ldw	r2,0(r4)
  806d14:	31bfff04 	addi	r6,r6,-4
  806d18:	200f883a 	mov	r7,r4
  806d1c:	1204f03a 	xor	r2,r2,r8
  806d20:	1287883a 	add	r3,r2,r10
  806d24:	1a46703a 	and	r3,r3,r9
  806d28:	0084303a 	nor	r2,zero,r2
  806d2c:	10c4703a 	and	r2,r2,r3
  806d30:	10000b26 	beq	r2,zero,806d60 <memchr+0xc4>
  806d34:	20800003 	ldbu	r2,0(r4)
  806d38:	28800f26 	beq	r5,r2,806d78 <memchr+0xdc>
  806d3c:	20800043 	ldbu	r2,1(r4)
  806d40:	21c00044 	addi	r7,r4,1
  806d44:	28800c26 	beq	r5,r2,806d78 <memchr+0xdc>
  806d48:	20800083 	ldbu	r2,2(r4)
  806d4c:	21c00084 	addi	r7,r4,2
  806d50:	28800926 	beq	r5,r2,806d78 <memchr+0xdc>
  806d54:	208000c3 	ldbu	r2,3(r4)
  806d58:	21c000c4 	addi	r7,r4,3
  806d5c:	28800626 	beq	r5,r2,806d78 <memchr+0xdc>
  806d60:	21000104 	addi	r4,r4,4
  806d64:	59bfea36 	bltu	r11,r6,806d10 <memchr+0x74>
  806d68:	2007883a 	mov	r3,r4
  806d6c:	003fd106 	br	806cb4 <memchr+0x18>
  806d70:	0005883a 	mov	r2,zero
  806d74:	f800283a 	ret
  806d78:	3805883a 	mov	r2,r7
  806d7c:	f800283a 	ret

00806d80 <memcpy>:
  806d80:	01c003c4 	movi	r7,15
  806d84:	2007883a 	mov	r3,r4
  806d88:	3980032e 	bgeu	r7,r6,806d98 <memcpy+0x18>
  806d8c:	2904b03a 	or	r2,r5,r4
  806d90:	108000cc 	andi	r2,r2,3
  806d94:	10000926 	beq	r2,zero,806dbc <memcpy+0x3c>
  806d98:	30000626 	beq	r6,zero,806db4 <memcpy+0x34>
  806d9c:	30cd883a 	add	r6,r6,r3
  806da0:	28800003 	ldbu	r2,0(r5)
  806da4:	29400044 	addi	r5,r5,1
  806da8:	18800005 	stb	r2,0(r3)
  806dac:	18c00044 	addi	r3,r3,1
  806db0:	30fffb1e 	bne	r6,r3,806da0 <memcpy+0x20>
  806db4:	2005883a 	mov	r2,r4
  806db8:	f800283a 	ret
  806dbc:	3811883a 	mov	r8,r7
  806dc0:	200f883a 	mov	r7,r4
  806dc4:	28c00017 	ldw	r3,0(r5)
  806dc8:	31bffc04 	addi	r6,r6,-16
  806dcc:	38c00015 	stw	r3,0(r7)
  806dd0:	28800117 	ldw	r2,4(r5)
  806dd4:	38800115 	stw	r2,4(r7)
  806dd8:	28c00217 	ldw	r3,8(r5)
  806ddc:	38c00215 	stw	r3,8(r7)
  806de0:	28800317 	ldw	r2,12(r5)
  806de4:	29400404 	addi	r5,r5,16
  806de8:	38800315 	stw	r2,12(r7)
  806dec:	39c00404 	addi	r7,r7,16
  806df0:	41bff436 	bltu	r8,r6,806dc4 <memcpy+0x44>
  806df4:	008000c4 	movi	r2,3
  806df8:	1180072e 	bgeu	r2,r6,806e18 <memcpy+0x98>
  806dfc:	1007883a 	mov	r3,r2
  806e00:	28800017 	ldw	r2,0(r5)
  806e04:	31bfff04 	addi	r6,r6,-4
  806e08:	29400104 	addi	r5,r5,4
  806e0c:	38800015 	stw	r2,0(r7)
  806e10:	39c00104 	addi	r7,r7,4
  806e14:	19bffa36 	bltu	r3,r6,806e00 <memcpy+0x80>
  806e18:	3807883a 	mov	r3,r7
  806e1c:	003fde06 	br	806d98 <memcpy+0x18>

00806e20 <memmove>:
  806e20:	2807883a 	mov	r3,r5
  806e24:	2011883a 	mov	r8,r4
  806e28:	29000c2e 	bgeu	r5,r4,806e5c <memmove+0x3c>
  806e2c:	298f883a 	add	r7,r5,r6
  806e30:	21c00a2e 	bgeu	r4,r7,806e5c <memmove+0x3c>
  806e34:	30000726 	beq	r6,zero,806e54 <memmove+0x34>
  806e38:	2187883a 	add	r3,r4,r6
  806e3c:	198dc83a 	sub	r6,r3,r6
  806e40:	39ffffc4 	addi	r7,r7,-1
  806e44:	38800003 	ldbu	r2,0(r7)
  806e48:	18ffffc4 	addi	r3,r3,-1
  806e4c:	18800005 	stb	r2,0(r3)
  806e50:	19bffb1e 	bne	r3,r6,806e40 <memmove+0x20>
  806e54:	2005883a 	mov	r2,r4
  806e58:	f800283a 	ret
  806e5c:	01c003c4 	movi	r7,15
  806e60:	39800a36 	bltu	r7,r6,806e8c <memmove+0x6c>
  806e64:	303ffb26 	beq	r6,zero,806e54 <memmove+0x34>
  806e68:	400f883a 	mov	r7,r8
  806e6c:	320d883a 	add	r6,r6,r8
  806e70:	28800003 	ldbu	r2,0(r5)
  806e74:	29400044 	addi	r5,r5,1
  806e78:	38800005 	stb	r2,0(r7)
  806e7c:	39c00044 	addi	r7,r7,1
  806e80:	39bffb1e 	bne	r7,r6,806e70 <memmove+0x50>
  806e84:	2005883a 	mov	r2,r4
  806e88:	f800283a 	ret
  806e8c:	1904b03a 	or	r2,r3,r4
  806e90:	108000cc 	andi	r2,r2,3
  806e94:	103ff31e 	bne	r2,zero,806e64 <memmove+0x44>
  806e98:	3811883a 	mov	r8,r7
  806e9c:	180b883a 	mov	r5,r3
  806ea0:	200f883a 	mov	r7,r4
  806ea4:	28c00017 	ldw	r3,0(r5)
  806ea8:	31bffc04 	addi	r6,r6,-16
  806eac:	38c00015 	stw	r3,0(r7)
  806eb0:	28800117 	ldw	r2,4(r5)
  806eb4:	38800115 	stw	r2,4(r7)
  806eb8:	28c00217 	ldw	r3,8(r5)
  806ebc:	38c00215 	stw	r3,8(r7)
  806ec0:	28800317 	ldw	r2,12(r5)
  806ec4:	29400404 	addi	r5,r5,16
  806ec8:	38800315 	stw	r2,12(r7)
  806ecc:	39c00404 	addi	r7,r7,16
  806ed0:	41bff436 	bltu	r8,r6,806ea4 <memmove+0x84>
  806ed4:	008000c4 	movi	r2,3
  806ed8:	1180072e 	bgeu	r2,r6,806ef8 <memmove+0xd8>
  806edc:	1007883a 	mov	r3,r2
  806ee0:	28800017 	ldw	r2,0(r5)
  806ee4:	31bfff04 	addi	r6,r6,-4
  806ee8:	29400104 	addi	r5,r5,4
  806eec:	38800015 	stw	r2,0(r7)
  806ef0:	39c00104 	addi	r7,r7,4
  806ef4:	19bffa36 	bltu	r3,r6,806ee0 <memmove+0xc0>
  806ef8:	3811883a 	mov	r8,r7
  806efc:	003fd906 	br	806e64 <memmove+0x44>

00806f00 <memset>:
  806f00:	008000c4 	movi	r2,3
  806f04:	29403fcc 	andi	r5,r5,255
  806f08:	2007883a 	mov	r3,r4
  806f0c:	1180022e 	bgeu	r2,r6,806f18 <memset+0x18>
  806f10:	2084703a 	and	r2,r4,r2
  806f14:	10000826 	beq	r2,zero,806f38 <memset+0x38>
  806f18:	30000526 	beq	r6,zero,806f30 <memset+0x30>
  806f1c:	2805883a 	mov	r2,r5
  806f20:	30cd883a 	add	r6,r6,r3
  806f24:	18800005 	stb	r2,0(r3)
  806f28:	18c00044 	addi	r3,r3,1
  806f2c:	19bffd1e 	bne	r3,r6,806f24 <memset+0x24>
  806f30:	2005883a 	mov	r2,r4
  806f34:	f800283a 	ret
  806f38:	2804923a 	slli	r2,r5,8
  806f3c:	020003c4 	movi	r8,15
  806f40:	200f883a 	mov	r7,r4
  806f44:	2884b03a 	or	r2,r5,r2
  806f48:	1006943a 	slli	r3,r2,16
  806f4c:	10c6b03a 	or	r3,r2,r3
  806f50:	41800a2e 	bgeu	r8,r6,806f7c <memset+0x7c>
  806f54:	4005883a 	mov	r2,r8
  806f58:	31bffc04 	addi	r6,r6,-16
  806f5c:	38c00015 	stw	r3,0(r7)
  806f60:	38c00115 	stw	r3,4(r7)
  806f64:	38c00215 	stw	r3,8(r7)
  806f68:	38c00315 	stw	r3,12(r7)
  806f6c:	39c00404 	addi	r7,r7,16
  806f70:	11bff936 	bltu	r2,r6,806f58 <memset+0x58>
  806f74:	008000c4 	movi	r2,3
  806f78:	1180052e 	bgeu	r2,r6,806f90 <memset+0x90>
  806f7c:	31bfff04 	addi	r6,r6,-4
  806f80:	008000c4 	movi	r2,3
  806f84:	38c00015 	stw	r3,0(r7)
  806f88:	39c00104 	addi	r7,r7,4
  806f8c:	11bffb36 	bltu	r2,r6,806f7c <memset+0x7c>
  806f90:	3807883a 	mov	r3,r7
  806f94:	003fe006 	br	806f18 <memset+0x18>

00806f98 <_Bfree>:
  806f98:	28000826 	beq	r5,zero,806fbc <_Bfree+0x24>
  806f9c:	28800117 	ldw	r2,4(r5)
  806fa0:	21001317 	ldw	r4,76(r4)
  806fa4:	1085883a 	add	r2,r2,r2
  806fa8:	1085883a 	add	r2,r2,r2
  806fac:	1105883a 	add	r2,r2,r4
  806fb0:	10c00017 	ldw	r3,0(r2)
  806fb4:	28c00015 	stw	r3,0(r5)
  806fb8:	11400015 	stw	r5,0(r2)
  806fbc:	f800283a 	ret

00806fc0 <__hi0bits>:
  806fc0:	20bfffec 	andhi	r2,r4,65535
  806fc4:	10001426 	beq	r2,zero,807018 <__hi0bits+0x58>
  806fc8:	0007883a 	mov	r3,zero
  806fcc:	20bfc02c 	andhi	r2,r4,65280
  806fd0:	1000021e 	bne	r2,zero,806fdc <__hi0bits+0x1c>
  806fd4:	2008923a 	slli	r4,r4,8
  806fd8:	18c00204 	addi	r3,r3,8
  806fdc:	20bc002c 	andhi	r2,r4,61440
  806fe0:	1000021e 	bne	r2,zero,806fec <__hi0bits+0x2c>
  806fe4:	2008913a 	slli	r4,r4,4
  806fe8:	18c00104 	addi	r3,r3,4
  806fec:	20b0002c 	andhi	r2,r4,49152
  806ff0:	1000031e 	bne	r2,zero,807000 <__hi0bits+0x40>
  806ff4:	2105883a 	add	r2,r4,r4
  806ff8:	18c00084 	addi	r3,r3,2
  806ffc:	1089883a 	add	r4,r2,r2
  807000:	20000316 	blt	r4,zero,807010 <__hi0bits+0x50>
  807004:	2090002c 	andhi	r2,r4,16384
  807008:	10000626 	beq	r2,zero,807024 <__hi0bits+0x64>
  80700c:	18c00044 	addi	r3,r3,1
  807010:	1805883a 	mov	r2,r3
  807014:	f800283a 	ret
  807018:	2008943a 	slli	r4,r4,16
  80701c:	00c00404 	movi	r3,16
  807020:	003fea06 	br	806fcc <__hi0bits+0xc>
  807024:	00c00804 	movi	r3,32
  807028:	1805883a 	mov	r2,r3
  80702c:	f800283a 	ret

00807030 <__lo0bits>:
  807030:	20c00017 	ldw	r3,0(r4)
  807034:	188001cc 	andi	r2,r3,7
  807038:	10000a26 	beq	r2,zero,807064 <__lo0bits+0x34>
  80703c:	1880004c 	andi	r2,r3,1
  807040:	1005003a 	cmpeq	r2,r2,zero
  807044:	10002126 	beq	r2,zero,8070cc <__lo0bits+0x9c>
  807048:	1880008c 	andi	r2,r3,2
  80704c:	1000251e 	bne	r2,zero,8070e4 <__lo0bits+0xb4>
  807050:	1804d0ba 	srli	r2,r3,2
  807054:	01400084 	movi	r5,2
  807058:	20800015 	stw	r2,0(r4)
  80705c:	2805883a 	mov	r2,r5
  807060:	f800283a 	ret
  807064:	18bfffcc 	andi	r2,r3,65535
  807068:	10001526 	beq	r2,zero,8070c0 <__lo0bits+0x90>
  80706c:	000b883a 	mov	r5,zero
  807070:	18803fcc 	andi	r2,r3,255
  807074:	1000021e 	bne	r2,zero,807080 <__lo0bits+0x50>
  807078:	1806d23a 	srli	r3,r3,8
  80707c:	29400204 	addi	r5,r5,8
  807080:	188003cc 	andi	r2,r3,15
  807084:	1000021e 	bne	r2,zero,807090 <__lo0bits+0x60>
  807088:	1806d13a 	srli	r3,r3,4
  80708c:	29400104 	addi	r5,r5,4
  807090:	188000cc 	andi	r2,r3,3
  807094:	1000021e 	bne	r2,zero,8070a0 <__lo0bits+0x70>
  807098:	1806d0ba 	srli	r3,r3,2
  80709c:	29400084 	addi	r5,r5,2
  8070a0:	1880004c 	andi	r2,r3,1
  8070a4:	1000031e 	bne	r2,zero,8070b4 <__lo0bits+0x84>
  8070a8:	1806d07a 	srli	r3,r3,1
  8070ac:	18000a26 	beq	r3,zero,8070d8 <__lo0bits+0xa8>
  8070b0:	29400044 	addi	r5,r5,1
  8070b4:	2805883a 	mov	r2,r5
  8070b8:	20c00015 	stw	r3,0(r4)
  8070bc:	f800283a 	ret
  8070c0:	1806d43a 	srli	r3,r3,16
  8070c4:	01400404 	movi	r5,16
  8070c8:	003fe906 	br	807070 <__lo0bits+0x40>
  8070cc:	000b883a 	mov	r5,zero
  8070d0:	2805883a 	mov	r2,r5
  8070d4:	f800283a 	ret
  8070d8:	01400804 	movi	r5,32
  8070dc:	2805883a 	mov	r2,r5
  8070e0:	f800283a 	ret
  8070e4:	1804d07a 	srli	r2,r3,1
  8070e8:	01400044 	movi	r5,1
  8070ec:	20800015 	stw	r2,0(r4)
  8070f0:	003fda06 	br	80705c <__lo0bits+0x2c>

008070f4 <__mcmp>:
  8070f4:	20800417 	ldw	r2,16(r4)
  8070f8:	28c00417 	ldw	r3,16(r5)
  8070fc:	10cfc83a 	sub	r7,r2,r3
  807100:	38000c1e 	bne	r7,zero,807134 <__mcmp+0x40>
  807104:	18c5883a 	add	r2,r3,r3
  807108:	1085883a 	add	r2,r2,r2
  80710c:	10c00504 	addi	r3,r2,20
  807110:	21000504 	addi	r4,r4,20
  807114:	28cb883a 	add	r5,r5,r3
  807118:	2085883a 	add	r2,r4,r2
  80711c:	10bfff04 	addi	r2,r2,-4
  807120:	297fff04 	addi	r5,r5,-4
  807124:	11800017 	ldw	r6,0(r2)
  807128:	28c00017 	ldw	r3,0(r5)
  80712c:	30c0031e 	bne	r6,r3,80713c <__mcmp+0x48>
  807130:	20bffa36 	bltu	r4,r2,80711c <__mcmp+0x28>
  807134:	3805883a 	mov	r2,r7
  807138:	f800283a 	ret
  80713c:	30c00336 	bltu	r6,r3,80714c <__mcmp+0x58>
  807140:	01c00044 	movi	r7,1
  807144:	3805883a 	mov	r2,r7
  807148:	f800283a 	ret
  80714c:	01ffffc4 	movi	r7,-1
  807150:	003ff806 	br	807134 <__mcmp+0x40>

00807154 <__ulp>:
  807154:	295ffc2c 	andhi	r5,r5,32752
  807158:	013f3034 	movhi	r4,64704
  80715c:	290b883a 	add	r5,r5,r4
  807160:	0145c83a 	sub	r2,zero,r5
  807164:	1007d53a 	srai	r3,r2,20
  807168:	000d883a 	mov	r6,zero
  80716c:	0140040e 	bge	zero,r5,807180 <__ulp+0x2c>
  807170:	280f883a 	mov	r7,r5
  807174:	3807883a 	mov	r3,r7
  807178:	3005883a 	mov	r2,r6
  80717c:	f800283a 	ret
  807180:	008004c4 	movi	r2,19
  807184:	193ffb04 	addi	r4,r3,-20
  807188:	10c00c0e 	bge	r2,r3,8071bc <__ulp+0x68>
  80718c:	008007c4 	movi	r2,31
  807190:	1107c83a 	sub	r3,r2,r4
  807194:	00800784 	movi	r2,30
  807198:	01400044 	movi	r5,1
  80719c:	11000216 	blt	r2,r4,8071a8 <__ulp+0x54>
  8071a0:	00800044 	movi	r2,1
  8071a4:	10ca983a 	sll	r5,r2,r3
  8071a8:	000f883a 	mov	r7,zero
  8071ac:	280d883a 	mov	r6,r5
  8071b0:	3807883a 	mov	r3,r7
  8071b4:	3005883a 	mov	r2,r6
  8071b8:	f800283a 	ret
  8071bc:	00800234 	movhi	r2,8
  8071c0:	10cfd83a 	sra	r7,r2,r3
  8071c4:	000d883a 	mov	r6,zero
  8071c8:	3005883a 	mov	r2,r6
  8071cc:	3807883a 	mov	r3,r7
  8071d0:	f800283a 	ret

008071d4 <__b2d>:
  8071d4:	20800417 	ldw	r2,16(r4)
  8071d8:	defff904 	addi	sp,sp,-28
  8071dc:	dd000415 	stw	r20,16(sp)
  8071e0:	1085883a 	add	r2,r2,r2
  8071e4:	25000504 	addi	r20,r4,20
  8071e8:	1085883a 	add	r2,r2,r2
  8071ec:	dc000015 	stw	r16,0(sp)
  8071f0:	a0a1883a 	add	r16,r20,r2
  8071f4:	dd400515 	stw	r21,20(sp)
  8071f8:	857fff17 	ldw	r21,-4(r16)
  8071fc:	dc400115 	stw	r17,4(sp)
  807200:	dfc00615 	stw	ra,24(sp)
  807204:	a809883a 	mov	r4,r21
  807208:	2823883a 	mov	r17,r5
  80720c:	dcc00315 	stw	r19,12(sp)
  807210:	dc800215 	stw	r18,8(sp)
  807214:	0806fc00 	call	806fc0 <__hi0bits>
  807218:	100b883a 	mov	r5,r2
  80721c:	00800804 	movi	r2,32
  807220:	1145c83a 	sub	r2,r2,r5
  807224:	88800015 	stw	r2,0(r17)
  807228:	00800284 	movi	r2,10
  80722c:	80ffff04 	addi	r3,r16,-4
  807230:	11401416 	blt	r2,r5,807284 <__b2d+0xb0>
  807234:	008002c4 	movi	r2,11
  807238:	1149c83a 	sub	r4,r2,r5
  80723c:	a0c02736 	bltu	r20,r3,8072dc <__b2d+0x108>
  807240:	000d883a 	mov	r6,zero
  807244:	28800544 	addi	r2,r5,21
  807248:	a906d83a 	srl	r3,r21,r4
  80724c:	a884983a 	sll	r2,r21,r2
  807250:	1ccffc34 	orhi	r19,r3,16368
  807254:	11a4b03a 	or	r18,r2,r6
  807258:	9005883a 	mov	r2,r18
  80725c:	9807883a 	mov	r3,r19
  807260:	dfc00617 	ldw	ra,24(sp)
  807264:	dd400517 	ldw	r21,20(sp)
  807268:	dd000417 	ldw	r20,16(sp)
  80726c:	dcc00317 	ldw	r19,12(sp)
  807270:	dc800217 	ldw	r18,8(sp)
  807274:	dc400117 	ldw	r17,4(sp)
  807278:	dc000017 	ldw	r16,0(sp)
  80727c:	dec00704 	addi	sp,sp,28
  807280:	f800283a 	ret
  807284:	a0c00e36 	bltu	r20,r3,8072c0 <__b2d+0xec>
  807288:	293ffd44 	addi	r4,r5,-11
  80728c:	000d883a 	mov	r6,zero
  807290:	20000f26 	beq	r4,zero,8072d0 <__b2d+0xfc>
  807294:	00800804 	movi	r2,32
  807298:	110bc83a 	sub	r5,r2,r4
  80729c:	a0c01236 	bltu	r20,r3,8072e8 <__b2d+0x114>
  8072a0:	000f883a 	mov	r7,zero
  8072a4:	a904983a 	sll	r2,r21,r4
  8072a8:	3146d83a 	srl	r3,r6,r5
  8072ac:	3108983a 	sll	r4,r6,r4
  8072b0:	108ffc34 	orhi	r2,r2,16368
  8072b4:	18a6b03a 	or	r19,r3,r2
  8072b8:	3924b03a 	or	r18,r7,r4
  8072bc:	003fe606 	br	807258 <__b2d+0x84>
  8072c0:	293ffd44 	addi	r4,r5,-11
  8072c4:	81bffe17 	ldw	r6,-8(r16)
  8072c8:	80fffe04 	addi	r3,r16,-8
  8072cc:	203ff11e 	bne	r4,zero,807294 <__b2d+0xc0>
  8072d0:	accffc34 	orhi	r19,r21,16368
  8072d4:	3025883a 	mov	r18,r6
  8072d8:	003fdf06 	br	807258 <__b2d+0x84>
  8072dc:	18bfff17 	ldw	r2,-4(r3)
  8072e0:	110cd83a 	srl	r6,r2,r4
  8072e4:	003fd706 	br	807244 <__b2d+0x70>
  8072e8:	18bfff17 	ldw	r2,-4(r3)
  8072ec:	114ed83a 	srl	r7,r2,r5
  8072f0:	003fec06 	br	8072a4 <__b2d+0xd0>

008072f4 <__ratio>:
  8072f4:	defff904 	addi	sp,sp,-28
  8072f8:	dc400215 	stw	r17,8(sp)
  8072fc:	2823883a 	mov	r17,r5
  807300:	d80b883a 	mov	r5,sp
  807304:	dfc00615 	stw	ra,24(sp)
  807308:	dd000515 	stw	r20,20(sp)
  80730c:	dcc00415 	stw	r19,16(sp)
  807310:	dc800315 	stw	r18,12(sp)
  807314:	2025883a 	mov	r18,r4
  807318:	08071d40 	call	8071d4 <__b2d>
  80731c:	8809883a 	mov	r4,r17
  807320:	d9400104 	addi	r5,sp,4
  807324:	1027883a 	mov	r19,r2
  807328:	1829883a 	mov	r20,r3
  80732c:	08071d40 	call	8071d4 <__b2d>
  807330:	89000417 	ldw	r4,16(r17)
  807334:	91c00417 	ldw	r7,16(r18)
  807338:	d9800117 	ldw	r6,4(sp)
  80733c:	180b883a 	mov	r5,r3
  807340:	390fc83a 	sub	r7,r7,r4
  807344:	1009883a 	mov	r4,r2
  807348:	d8800017 	ldw	r2,0(sp)
  80734c:	380e917a 	slli	r7,r7,5
  807350:	2011883a 	mov	r8,r4
  807354:	1185c83a 	sub	r2,r2,r6
  807358:	11c5883a 	add	r2,r2,r7
  80735c:	1006953a 	slli	r3,r2,20
  807360:	2813883a 	mov	r9,r5
  807364:	00800d0e 	bge	zero,r2,80739c <__ratio+0xa8>
  807368:	1d29883a 	add	r20,r3,r20
  80736c:	a00b883a 	mov	r5,r20
  807370:	480f883a 	mov	r7,r9
  807374:	9809883a 	mov	r4,r19
  807378:	400d883a 	mov	r6,r8
  80737c:	080b5500 	call	80b550 <__divdf3>
  807380:	dfc00617 	ldw	ra,24(sp)
  807384:	dd000517 	ldw	r20,20(sp)
  807388:	dcc00417 	ldw	r19,16(sp)
  80738c:	dc800317 	ldw	r18,12(sp)
  807390:	dc400217 	ldw	r17,8(sp)
  807394:	dec00704 	addi	sp,sp,28
  807398:	f800283a 	ret
  80739c:	28d3c83a 	sub	r9,r5,r3
  8073a0:	003ff206 	br	80736c <__ratio+0x78>

008073a4 <_mprec_log10>:
  8073a4:	defffe04 	addi	sp,sp,-8
  8073a8:	008005c4 	movi	r2,23
  8073ac:	dc000015 	stw	r16,0(sp)
  8073b0:	dfc00115 	stw	ra,4(sp)
  8073b4:	2021883a 	mov	r16,r4
  8073b8:	11000c16 	blt	r2,r4,8073ec <_mprec_log10+0x48>
  8073bc:	200490fa 	slli	r2,r4,3
  8073c0:	00c02074 	movhi	r3,129
  8073c4:	18c24104 	addi	r3,r3,2308
  8073c8:	10c5883a 	add	r2,r2,r3
  8073cc:	12400117 	ldw	r9,4(r2)
  8073d0:	12000017 	ldw	r8,0(r2)
  8073d4:	4807883a 	mov	r3,r9
  8073d8:	4005883a 	mov	r2,r8
  8073dc:	dfc00117 	ldw	ra,4(sp)
  8073e0:	dc000017 	ldw	r16,0(sp)
  8073e4:	dec00204 	addi	sp,sp,8
  8073e8:	f800283a 	ret
  8073ec:	0011883a 	mov	r8,zero
  8073f0:	024ffc34 	movhi	r9,16368
  8073f4:	0005883a 	mov	r2,zero
  8073f8:	00d00934 	movhi	r3,16420
  8073fc:	480b883a 	mov	r5,r9
  807400:	4009883a 	mov	r4,r8
  807404:	180f883a 	mov	r7,r3
  807408:	100d883a 	mov	r6,r2
  80740c:	080b18c0 	call	80b18c <__muldf3>
  807410:	843fffc4 	addi	r16,r16,-1
  807414:	1011883a 	mov	r8,r2
  807418:	1813883a 	mov	r9,r3
  80741c:	803ff51e 	bne	r16,zero,8073f4 <_mprec_log10+0x50>
  807420:	4005883a 	mov	r2,r8
  807424:	4807883a 	mov	r3,r9
  807428:	dfc00117 	ldw	ra,4(sp)
  80742c:	dc000017 	ldw	r16,0(sp)
  807430:	dec00204 	addi	sp,sp,8
  807434:	f800283a 	ret

00807438 <__copybits>:
  807438:	297fffc4 	addi	r5,r5,-1
  80743c:	30800417 	ldw	r2,16(r6)
  807440:	280bd17a 	srai	r5,r5,5
  807444:	31800504 	addi	r6,r6,20
  807448:	1085883a 	add	r2,r2,r2
  80744c:	294b883a 	add	r5,r5,r5
  807450:	294b883a 	add	r5,r5,r5
  807454:	1085883a 	add	r2,r2,r2
  807458:	290b883a 	add	r5,r5,r4
  80745c:	3087883a 	add	r3,r6,r2
  807460:	29400104 	addi	r5,r5,4
  807464:	30c0052e 	bgeu	r6,r3,80747c <__copybits+0x44>
  807468:	30800017 	ldw	r2,0(r6)
  80746c:	31800104 	addi	r6,r6,4
  807470:	20800015 	stw	r2,0(r4)
  807474:	21000104 	addi	r4,r4,4
  807478:	30fffb36 	bltu	r6,r3,807468 <__copybits+0x30>
  80747c:	2140032e 	bgeu	r4,r5,80748c <__copybits+0x54>
  807480:	20000015 	stw	zero,0(r4)
  807484:	21000104 	addi	r4,r4,4
  807488:	217ffd36 	bltu	r4,r5,807480 <__copybits+0x48>
  80748c:	f800283a 	ret

00807490 <__any_on>:
  807490:	20800417 	ldw	r2,16(r4)
  807494:	2807d17a 	srai	r3,r5,5
  807498:	21000504 	addi	r4,r4,20
  80749c:	10c00d0e 	bge	r2,r3,8074d4 <__any_on+0x44>
  8074a0:	1085883a 	add	r2,r2,r2
  8074a4:	1085883a 	add	r2,r2,r2
  8074a8:	208d883a 	add	r6,r4,r2
  8074ac:	2180182e 	bgeu	r4,r6,807510 <__any_on+0x80>
  8074b0:	30bfff17 	ldw	r2,-4(r6)
  8074b4:	30ffff04 	addi	r3,r6,-4
  8074b8:	1000041e 	bne	r2,zero,8074cc <__any_on+0x3c>
  8074bc:	20c0142e 	bgeu	r4,r3,807510 <__any_on+0x80>
  8074c0:	18ffff04 	addi	r3,r3,-4
  8074c4:	18800017 	ldw	r2,0(r3)
  8074c8:	103ffc26 	beq	r2,zero,8074bc <__any_on+0x2c>
  8074cc:	00800044 	movi	r2,1
  8074d0:	f800283a 	ret
  8074d4:	18800a0e 	bge	r3,r2,807500 <__any_on+0x70>
  8074d8:	294007cc 	andi	r5,r5,31
  8074dc:	28000826 	beq	r5,zero,807500 <__any_on+0x70>
  8074e0:	18c5883a 	add	r2,r3,r3
  8074e4:	1085883a 	add	r2,r2,r2
  8074e8:	208d883a 	add	r6,r4,r2
  8074ec:	30c00017 	ldw	r3,0(r6)
  8074f0:	1944d83a 	srl	r2,r3,r5
  8074f4:	1144983a 	sll	r2,r2,r5
  8074f8:	18bff41e 	bne	r3,r2,8074cc <__any_on+0x3c>
  8074fc:	003feb06 	br	8074ac <__any_on+0x1c>
  807500:	18c5883a 	add	r2,r3,r3
  807504:	1085883a 	add	r2,r2,r2
  807508:	208d883a 	add	r6,r4,r2
  80750c:	003fe706 	br	8074ac <__any_on+0x1c>
  807510:	0005883a 	mov	r2,zero
  807514:	f800283a 	ret

00807518 <_Balloc>:
  807518:	20c01317 	ldw	r3,76(r4)
  80751c:	defffb04 	addi	sp,sp,-20
  807520:	dcc00315 	stw	r19,12(sp)
  807524:	dc800215 	stw	r18,8(sp)
  807528:	dfc00415 	stw	ra,16(sp)
  80752c:	2825883a 	mov	r18,r5
  807530:	dc400115 	stw	r17,4(sp)
  807534:	dc000015 	stw	r16,0(sp)
  807538:	2027883a 	mov	r19,r4
  80753c:	01800404 	movi	r6,16
  807540:	01400104 	movi	r5,4
  807544:	18001726 	beq	r3,zero,8075a4 <_Balloc+0x8c>
  807548:	01400044 	movi	r5,1
  80754c:	9485883a 	add	r2,r18,r18
  807550:	2ca2983a 	sll	r17,r5,r18
  807554:	1085883a 	add	r2,r2,r2
  807558:	10c7883a 	add	r3,r2,r3
  80755c:	1c000017 	ldw	r16,0(r3)
  807560:	8c4d883a 	add	r6,r17,r17
  807564:	318d883a 	add	r6,r6,r6
  807568:	9809883a 	mov	r4,r19
  80756c:	31800504 	addi	r6,r6,20
  807570:	80001226 	beq	r16,zero,8075bc <_Balloc+0xa4>
  807574:	80800017 	ldw	r2,0(r16)
  807578:	18800015 	stw	r2,0(r3)
  80757c:	80000415 	stw	zero,16(r16)
  807580:	80000315 	stw	zero,12(r16)
  807584:	8005883a 	mov	r2,r16
  807588:	dfc00417 	ldw	ra,16(sp)
  80758c:	dcc00317 	ldw	r19,12(sp)
  807590:	dc800217 	ldw	r18,8(sp)
  807594:	dc400117 	ldw	r17,4(sp)
  807598:	dc000017 	ldw	r16,0(sp)
  80759c:	dec00504 	addi	sp,sp,20
  8075a0:	f800283a 	ret
  8075a4:	0809ce00 	call	809ce0 <_calloc_r>
  8075a8:	1007883a 	mov	r3,r2
  8075ac:	0021883a 	mov	r16,zero
  8075b0:	98801315 	stw	r2,76(r19)
  8075b4:	103fe41e 	bne	r2,zero,807548 <_Balloc+0x30>
  8075b8:	003ff206 	br	807584 <_Balloc+0x6c>
  8075bc:	0809ce00 	call	809ce0 <_calloc_r>
  8075c0:	103ff026 	beq	r2,zero,807584 <_Balloc+0x6c>
  8075c4:	1021883a 	mov	r16,r2
  8075c8:	14800115 	stw	r18,4(r2)
  8075cc:	14400215 	stw	r17,8(r2)
  8075d0:	003fea06 	br	80757c <_Balloc+0x64>

008075d4 <__d2b>:
  8075d4:	defff504 	addi	sp,sp,-44
  8075d8:	dcc00515 	stw	r19,20(sp)
  8075dc:	04c00044 	movi	r19,1
  8075e0:	dc000215 	stw	r16,8(sp)
  8075e4:	2821883a 	mov	r16,r5
  8075e8:	980b883a 	mov	r5,r19
  8075ec:	ddc00915 	stw	r23,36(sp)
  8075f0:	dd800815 	stw	r22,32(sp)
  8075f4:	dd400715 	stw	r21,28(sp)
  8075f8:	dd000615 	stw	r20,24(sp)
  8075fc:	dc800415 	stw	r18,16(sp)
  807600:	dc400315 	stw	r17,12(sp)
  807604:	dfc00a15 	stw	ra,40(sp)
  807608:	3023883a 	mov	r17,r6
  80760c:	382d883a 	mov	r22,r7
  807610:	ddc00b17 	ldw	r23,44(sp)
  807614:	08075180 	call	807518 <_Balloc>
  807618:	1025883a 	mov	r18,r2
  80761c:	00a00034 	movhi	r2,32768
  807620:	10bfffc4 	addi	r2,r2,-1
  807624:	8888703a 	and	r4,r17,r2
  807628:	202ad53a 	srli	r21,r4,20
  80762c:	00800434 	movhi	r2,16
  807630:	10bfffc4 	addi	r2,r2,-1
  807634:	8886703a 	and	r3,r17,r2
  807638:	a829003a 	cmpeq	r20,r21,zero
  80763c:	800b883a 	mov	r5,r16
  807640:	d8c00115 	stw	r3,4(sp)
  807644:	94000504 	addi	r16,r18,20
  807648:	a000021e 	bne	r20,zero,807654 <__d2b+0x80>
  80764c:	18c00434 	orhi	r3,r3,16
  807650:	d8c00115 	stw	r3,4(sp)
  807654:	28002726 	beq	r5,zero,8076f4 <__d2b+0x120>
  807658:	d809883a 	mov	r4,sp
  80765c:	d9400015 	stw	r5,0(sp)
  807660:	08070300 	call	807030 <__lo0bits>
  807664:	100d883a 	mov	r6,r2
  807668:	10003526 	beq	r2,zero,807740 <__d2b+0x16c>
  80766c:	d8c00117 	ldw	r3,4(sp)
  807670:	00800804 	movi	r2,32
  807674:	1185c83a 	sub	r2,r2,r6
  807678:	d9000017 	ldw	r4,0(sp)
  80767c:	1886983a 	sll	r3,r3,r2
  807680:	1906b03a 	or	r3,r3,r4
  807684:	90c00515 	stw	r3,20(r18)
  807688:	d8c00117 	ldw	r3,4(sp)
  80768c:	1986d83a 	srl	r3,r3,r6
  807690:	d8c00115 	stw	r3,4(sp)
  807694:	180b003a 	cmpeq	r5,r3,zero
  807698:	00800084 	movi	r2,2
  80769c:	114bc83a 	sub	r5,r2,r5
  8076a0:	80c00115 	stw	r3,4(r16)
  8076a4:	91400415 	stw	r5,16(r18)
  8076a8:	a0001a1e 	bne	r20,zero,807714 <__d2b+0x140>
  8076ac:	3545883a 	add	r2,r6,r21
  8076b0:	10bef344 	addi	r2,r2,-1075
  8076b4:	00c00d44 	movi	r3,53
  8076b8:	b0800015 	stw	r2,0(r22)
  8076bc:	1987c83a 	sub	r3,r3,r6
  8076c0:	b8c00015 	stw	r3,0(r23)
  8076c4:	9005883a 	mov	r2,r18
  8076c8:	dfc00a17 	ldw	ra,40(sp)
  8076cc:	ddc00917 	ldw	r23,36(sp)
  8076d0:	dd800817 	ldw	r22,32(sp)
  8076d4:	dd400717 	ldw	r21,28(sp)
  8076d8:	dd000617 	ldw	r20,24(sp)
  8076dc:	dcc00517 	ldw	r19,20(sp)
  8076e0:	dc800417 	ldw	r18,16(sp)
  8076e4:	dc400317 	ldw	r17,12(sp)
  8076e8:	dc000217 	ldw	r16,8(sp)
  8076ec:	dec00b04 	addi	sp,sp,44
  8076f0:	f800283a 	ret
  8076f4:	d9000104 	addi	r4,sp,4
  8076f8:	08070300 	call	807030 <__lo0bits>
  8076fc:	11800804 	addi	r6,r2,32
  807700:	d8800117 	ldw	r2,4(sp)
  807704:	94c00415 	stw	r19,16(r18)
  807708:	980b883a 	mov	r5,r19
  80770c:	90800515 	stw	r2,20(r18)
  807710:	a03fe626 	beq	r20,zero,8076ac <__d2b+0xd8>
  807714:	2945883a 	add	r2,r5,r5
  807718:	1085883a 	add	r2,r2,r2
  80771c:	1405883a 	add	r2,r2,r16
  807720:	113fff17 	ldw	r4,-4(r2)
  807724:	30fef384 	addi	r3,r6,-1074
  807728:	2820917a 	slli	r16,r5,5
  80772c:	b0c00015 	stw	r3,0(r22)
  807730:	0806fc00 	call	806fc0 <__hi0bits>
  807734:	80a1c83a 	sub	r16,r16,r2
  807738:	bc000015 	stw	r16,0(r23)
  80773c:	003fe106 	br	8076c4 <__d2b+0xf0>
  807740:	d8800017 	ldw	r2,0(sp)
  807744:	90800515 	stw	r2,20(r18)
  807748:	d8c00117 	ldw	r3,4(sp)
  80774c:	003fd106 	br	807694 <__d2b+0xc0>

00807750 <__mdiff>:
  807750:	defffb04 	addi	sp,sp,-20
  807754:	dc000015 	stw	r16,0(sp)
  807758:	2821883a 	mov	r16,r5
  80775c:	dc800215 	stw	r18,8(sp)
  807760:	300b883a 	mov	r5,r6
  807764:	2025883a 	mov	r18,r4
  807768:	8009883a 	mov	r4,r16
  80776c:	dc400115 	stw	r17,4(sp)
  807770:	dfc00415 	stw	ra,16(sp)
  807774:	dcc00315 	stw	r19,12(sp)
  807778:	3023883a 	mov	r17,r6
  80777c:	08070f40 	call	8070f4 <__mcmp>
  807780:	10004226 	beq	r2,zero,80788c <__mdiff+0x13c>
  807784:	10005016 	blt	r2,zero,8078c8 <__mdiff+0x178>
  807788:	0027883a 	mov	r19,zero
  80778c:	81400117 	ldw	r5,4(r16)
  807790:	9009883a 	mov	r4,r18
  807794:	08075180 	call	807518 <_Balloc>
  807798:	1019883a 	mov	r12,r2
  80779c:	82800417 	ldw	r10,16(r16)
  8077a0:	88800417 	ldw	r2,16(r17)
  8077a4:	81800504 	addi	r6,r16,20
  8077a8:	5287883a 	add	r3,r10,r10
  8077ac:	1085883a 	add	r2,r2,r2
  8077b0:	18c7883a 	add	r3,r3,r3
  8077b4:	1085883a 	add	r2,r2,r2
  8077b8:	8a000504 	addi	r8,r17,20
  8077bc:	64c00315 	stw	r19,12(r12)
  8077c0:	30db883a 	add	r13,r6,r3
  8077c4:	4097883a 	add	r11,r8,r2
  8077c8:	61c00504 	addi	r7,r12,20
  8077cc:	0013883a 	mov	r9,zero
  8077d0:	31000017 	ldw	r4,0(r6)
  8077d4:	41400017 	ldw	r5,0(r8)
  8077d8:	42000104 	addi	r8,r8,4
  8077dc:	20bfffcc 	andi	r2,r4,65535
  8077e0:	28ffffcc 	andi	r3,r5,65535
  8077e4:	10c5c83a 	sub	r2,r2,r3
  8077e8:	1245883a 	add	r2,r2,r9
  8077ec:	2008d43a 	srli	r4,r4,16
  8077f0:	280ad43a 	srli	r5,r5,16
  8077f4:	1007d43a 	srai	r3,r2,16
  8077f8:	3880000d 	sth	r2,0(r7)
  8077fc:	2149c83a 	sub	r4,r4,r5
  807800:	20c9883a 	add	r4,r4,r3
  807804:	3900008d 	sth	r4,2(r7)
  807808:	31800104 	addi	r6,r6,4
  80780c:	39c00104 	addi	r7,r7,4
  807810:	2013d43a 	srai	r9,r4,16
  807814:	42ffee36 	bltu	r8,r11,8077d0 <__mdiff+0x80>
  807818:	33400c2e 	bgeu	r6,r13,80784c <__mdiff+0xfc>
  80781c:	30800017 	ldw	r2,0(r6)
  807820:	31800104 	addi	r6,r6,4
  807824:	10ffffcc 	andi	r3,r2,65535
  807828:	1a47883a 	add	r3,r3,r9
  80782c:	1004d43a 	srli	r2,r2,16
  807830:	1809d43a 	srai	r4,r3,16
  807834:	38c0000d 	sth	r3,0(r7)
  807838:	1105883a 	add	r2,r2,r4
  80783c:	3880008d 	sth	r2,2(r7)
  807840:	1013d43a 	srai	r9,r2,16
  807844:	39c00104 	addi	r7,r7,4
  807848:	337ff436 	bltu	r6,r13,80781c <__mdiff+0xcc>
  80784c:	38bfff17 	ldw	r2,-4(r7)
  807850:	38ffff04 	addi	r3,r7,-4
  807854:	1000041e 	bne	r2,zero,807868 <__mdiff+0x118>
  807858:	18ffff04 	addi	r3,r3,-4
  80785c:	18800017 	ldw	r2,0(r3)
  807860:	52bfffc4 	addi	r10,r10,-1
  807864:	103ffc26 	beq	r2,zero,807858 <__mdiff+0x108>
  807868:	6005883a 	mov	r2,r12
  80786c:	62800415 	stw	r10,16(r12)
  807870:	dfc00417 	ldw	ra,16(sp)
  807874:	dcc00317 	ldw	r19,12(sp)
  807878:	dc800217 	ldw	r18,8(sp)
  80787c:	dc400117 	ldw	r17,4(sp)
  807880:	dc000017 	ldw	r16,0(sp)
  807884:	dec00504 	addi	sp,sp,20
  807888:	f800283a 	ret
  80788c:	9009883a 	mov	r4,r18
  807890:	000b883a 	mov	r5,zero
  807894:	08075180 	call	807518 <_Balloc>
  807898:	1019883a 	mov	r12,r2
  80789c:	00800044 	movi	r2,1
  8078a0:	60800415 	stw	r2,16(r12)
  8078a4:	6005883a 	mov	r2,r12
  8078a8:	60000515 	stw	zero,20(r12)
  8078ac:	dfc00417 	ldw	ra,16(sp)
  8078b0:	dcc00317 	ldw	r19,12(sp)
  8078b4:	dc800217 	ldw	r18,8(sp)
  8078b8:	dc400117 	ldw	r17,4(sp)
  8078bc:	dc000017 	ldw	r16,0(sp)
  8078c0:	dec00504 	addi	sp,sp,20
  8078c4:	f800283a 	ret
  8078c8:	880d883a 	mov	r6,r17
  8078cc:	04c00044 	movi	r19,1
  8078d0:	8023883a 	mov	r17,r16
  8078d4:	3021883a 	mov	r16,r6
  8078d8:	003fac06 	br	80778c <__mdiff+0x3c>

008078dc <__lshift>:
  8078dc:	defff904 	addi	sp,sp,-28
  8078e0:	28800417 	ldw	r2,16(r5)
  8078e4:	dc000015 	stw	r16,0(sp)
  8078e8:	3021d17a 	srai	r16,r6,5
  8078ec:	28c00217 	ldw	r3,8(r5)
  8078f0:	10800044 	addi	r2,r2,1
  8078f4:	dc400115 	stw	r17,4(sp)
  8078f8:	80a3883a 	add	r17,r16,r2
  8078fc:	dd400515 	stw	r21,20(sp)
  807900:	dd000415 	stw	r20,16(sp)
  807904:	dc800215 	stw	r18,8(sp)
  807908:	dfc00615 	stw	ra,24(sp)
  80790c:	2825883a 	mov	r18,r5
  807910:	dcc00315 	stw	r19,12(sp)
  807914:	3029883a 	mov	r20,r6
  807918:	202b883a 	mov	r21,r4
  80791c:	29400117 	ldw	r5,4(r5)
  807920:	1c40030e 	bge	r3,r17,807930 <__lshift+0x54>
  807924:	18c7883a 	add	r3,r3,r3
  807928:	29400044 	addi	r5,r5,1
  80792c:	1c7ffd16 	blt	r3,r17,807924 <__lshift+0x48>
  807930:	a809883a 	mov	r4,r21
  807934:	08075180 	call	807518 <_Balloc>
  807938:	1027883a 	mov	r19,r2
  80793c:	11400504 	addi	r5,r2,20
  807940:	0400090e 	bge	zero,r16,807968 <__lshift+0x8c>
  807944:	2805883a 	mov	r2,r5
  807948:	0007883a 	mov	r3,zero
  80794c:	18c00044 	addi	r3,r3,1
  807950:	10000015 	stw	zero,0(r2)
  807954:	10800104 	addi	r2,r2,4
  807958:	80fffc1e 	bne	r16,r3,80794c <__lshift+0x70>
  80795c:	8405883a 	add	r2,r16,r16
  807960:	1085883a 	add	r2,r2,r2
  807964:	288b883a 	add	r5,r5,r2
  807968:	90800417 	ldw	r2,16(r18)
  80796c:	91000504 	addi	r4,r18,20
  807970:	a18007cc 	andi	r6,r20,31
  807974:	1085883a 	add	r2,r2,r2
  807978:	1085883a 	add	r2,r2,r2
  80797c:	208f883a 	add	r7,r4,r2
  807980:	30001e26 	beq	r6,zero,8079fc <__lshift+0x120>
  807984:	00800804 	movi	r2,32
  807988:	1191c83a 	sub	r8,r2,r6
  80798c:	0007883a 	mov	r3,zero
  807990:	20800017 	ldw	r2,0(r4)
  807994:	1184983a 	sll	r2,r2,r6
  807998:	1884b03a 	or	r2,r3,r2
  80799c:	28800015 	stw	r2,0(r5)
  8079a0:	20c00017 	ldw	r3,0(r4)
  8079a4:	21000104 	addi	r4,r4,4
  8079a8:	29400104 	addi	r5,r5,4
  8079ac:	1a06d83a 	srl	r3,r3,r8
  8079b0:	21fff736 	bltu	r4,r7,807990 <__lshift+0xb4>
  8079b4:	28c00015 	stw	r3,0(r5)
  8079b8:	18000126 	beq	r3,zero,8079c0 <__lshift+0xe4>
  8079bc:	8c400044 	addi	r17,r17,1
  8079c0:	88bfffc4 	addi	r2,r17,-1
  8079c4:	98800415 	stw	r2,16(r19)
  8079c8:	a809883a 	mov	r4,r21
  8079cc:	900b883a 	mov	r5,r18
  8079d0:	0806f980 	call	806f98 <_Bfree>
  8079d4:	9805883a 	mov	r2,r19
  8079d8:	dfc00617 	ldw	ra,24(sp)
  8079dc:	dd400517 	ldw	r21,20(sp)
  8079e0:	dd000417 	ldw	r20,16(sp)
  8079e4:	dcc00317 	ldw	r19,12(sp)
  8079e8:	dc800217 	ldw	r18,8(sp)
  8079ec:	dc400117 	ldw	r17,4(sp)
  8079f0:	dc000017 	ldw	r16,0(sp)
  8079f4:	dec00704 	addi	sp,sp,28
  8079f8:	f800283a 	ret
  8079fc:	20800017 	ldw	r2,0(r4)
  807a00:	21000104 	addi	r4,r4,4
  807a04:	28800015 	stw	r2,0(r5)
  807a08:	29400104 	addi	r5,r5,4
  807a0c:	21ffec2e 	bgeu	r4,r7,8079c0 <__lshift+0xe4>
  807a10:	20800017 	ldw	r2,0(r4)
  807a14:	21000104 	addi	r4,r4,4
  807a18:	28800015 	stw	r2,0(r5)
  807a1c:	29400104 	addi	r5,r5,4
  807a20:	21fff636 	bltu	r4,r7,8079fc <__lshift+0x120>
  807a24:	003fe606 	br	8079c0 <__lshift+0xe4>

00807a28 <__multiply>:
  807a28:	defff904 	addi	sp,sp,-28
  807a2c:	dcc00315 	stw	r19,12(sp)
  807a30:	dc800215 	stw	r18,8(sp)
  807a34:	2cc00417 	ldw	r19,16(r5)
  807a38:	34800417 	ldw	r18,16(r6)
  807a3c:	dd000415 	stw	r20,16(sp)
  807a40:	dc400115 	stw	r17,4(sp)
  807a44:	dfc00615 	stw	ra,24(sp)
  807a48:	dd400515 	stw	r21,20(sp)
  807a4c:	dc000015 	stw	r16,0(sp)
  807a50:	2823883a 	mov	r17,r5
  807a54:	3029883a 	mov	r20,r6
  807a58:	9c80040e 	bge	r19,r18,807a6c <__multiply+0x44>
  807a5c:	9027883a 	mov	r19,r18
  807a60:	2c800417 	ldw	r18,16(r5)
  807a64:	2829883a 	mov	r20,r5
  807a68:	3023883a 	mov	r17,r6
  807a6c:	88800217 	ldw	r2,8(r17)
  807a70:	9ca1883a 	add	r16,r19,r18
  807a74:	89400117 	ldw	r5,4(r17)
  807a78:	1400010e 	bge	r2,r16,807a80 <__multiply+0x58>
  807a7c:	29400044 	addi	r5,r5,1
  807a80:	08075180 	call	807518 <_Balloc>
  807a84:	102b883a 	mov	r21,r2
  807a88:	8405883a 	add	r2,r16,r16
  807a8c:	1085883a 	add	r2,r2,r2
  807a90:	a9000504 	addi	r4,r21,20
  807a94:	209d883a 	add	r14,r4,r2
  807a98:	2380042e 	bgeu	r4,r14,807aac <__multiply+0x84>
  807a9c:	2005883a 	mov	r2,r4
  807aa0:	10000015 	stw	zero,0(r2)
  807aa4:	10800104 	addi	r2,r2,4
  807aa8:	13bffd36 	bltu	r2,r14,807aa0 <__multiply+0x78>
  807aac:	9485883a 	add	r2,r18,r18
  807ab0:	9cc7883a 	add	r3,r19,r19
  807ab4:	a1800504 	addi	r6,r20,20
  807ab8:	1085883a 	add	r2,r2,r2
  807abc:	8b400504 	addi	r13,r17,20
  807ac0:	18c7883a 	add	r3,r3,r3
  807ac4:	309f883a 	add	r15,r6,r2
  807ac8:	68d7883a 	add	r11,r13,r3
  807acc:	33c03b2e 	bgeu	r6,r15,807bbc <__multiply+0x194>
  807ad0:	2019883a 	mov	r12,r4
  807ad4:	30800017 	ldw	r2,0(r6)
  807ad8:	127fffcc 	andi	r9,r2,65535
  807adc:	48001826 	beq	r9,zero,807b40 <__multiply+0x118>
  807ae0:	6811883a 	mov	r8,r13
  807ae4:	600f883a 	mov	r7,r12
  807ae8:	0015883a 	mov	r10,zero
  807aec:	40c00017 	ldw	r3,0(r8)
  807af0:	39400017 	ldw	r5,0(r7)
  807af4:	42000104 	addi	r8,r8,4
  807af8:	193fffcc 	andi	r4,r3,65535
  807afc:	4909383a 	mul	r4,r9,r4
  807b00:	1806d43a 	srli	r3,r3,16
  807b04:	28bfffcc 	andi	r2,r5,65535
  807b08:	5085883a 	add	r2,r10,r2
  807b0c:	2089883a 	add	r4,r4,r2
  807b10:	48c7383a 	mul	r3,r9,r3
  807b14:	280ad43a 	srli	r5,r5,16
  807b18:	2004d43a 	srli	r2,r4,16
  807b1c:	3900000d 	sth	r4,0(r7)
  807b20:	1947883a 	add	r3,r3,r5
  807b24:	10c5883a 	add	r2,r2,r3
  807b28:	3880008d 	sth	r2,2(r7)
  807b2c:	1014d43a 	srli	r10,r2,16
  807b30:	39c00104 	addi	r7,r7,4
  807b34:	42ffed36 	bltu	r8,r11,807aec <__multiply+0xc4>
  807b38:	3a800015 	stw	r10,0(r7)
  807b3c:	30800017 	ldw	r2,0(r6)
  807b40:	1012d43a 	srli	r9,r2,16
  807b44:	48001926 	beq	r9,zero,807bac <__multiply+0x184>
  807b48:	60800017 	ldw	r2,0(r12)
  807b4c:	6811883a 	mov	r8,r13
  807b50:	600f883a 	mov	r7,r12
  807b54:	0015883a 	mov	r10,zero
  807b58:	100b883a 	mov	r5,r2
  807b5c:	41000017 	ldw	r4,0(r8)
  807b60:	2806d43a 	srli	r3,r5,16
  807b64:	3880000d 	sth	r2,0(r7)
  807b68:	20bfffcc 	andi	r2,r4,65535
  807b6c:	4885383a 	mul	r2,r9,r2
  807b70:	50c7883a 	add	r3,r10,r3
  807b74:	2008d43a 	srli	r4,r4,16
  807b78:	10c5883a 	add	r2,r2,r3
  807b7c:	3880008d 	sth	r2,2(r7)
  807b80:	39c00104 	addi	r7,r7,4
  807b84:	39400017 	ldw	r5,0(r7)
  807b88:	4909383a 	mul	r4,r9,r4
  807b8c:	1004d43a 	srli	r2,r2,16
  807b90:	28ffffcc 	andi	r3,r5,65535
  807b94:	20c9883a 	add	r4,r4,r3
  807b98:	1105883a 	add	r2,r2,r4
  807b9c:	42000104 	addi	r8,r8,4
  807ba0:	1014d43a 	srli	r10,r2,16
  807ba4:	42ffed36 	bltu	r8,r11,807b5c <__multiply+0x134>
  807ba8:	38800015 	stw	r2,0(r7)
  807bac:	31800104 	addi	r6,r6,4
  807bb0:	33c0022e 	bgeu	r6,r15,807bbc <__multiply+0x194>
  807bb4:	63000104 	addi	r12,r12,4
  807bb8:	003fc606 	br	807ad4 <__multiply+0xac>
  807bbc:	0400090e 	bge	zero,r16,807be4 <__multiply+0x1bc>
  807bc0:	70bfff17 	ldw	r2,-4(r14)
  807bc4:	70ffff04 	addi	r3,r14,-4
  807bc8:	10000326 	beq	r2,zero,807bd8 <__multiply+0x1b0>
  807bcc:	00000506 	br	807be4 <__multiply+0x1bc>
  807bd0:	18800017 	ldw	r2,0(r3)
  807bd4:	1000031e 	bne	r2,zero,807be4 <__multiply+0x1bc>
  807bd8:	843fffc4 	addi	r16,r16,-1
  807bdc:	18ffff04 	addi	r3,r3,-4
  807be0:	803ffb1e 	bne	r16,zero,807bd0 <__multiply+0x1a8>
  807be4:	a805883a 	mov	r2,r21
  807be8:	ac000415 	stw	r16,16(r21)
  807bec:	dfc00617 	ldw	ra,24(sp)
  807bf0:	dd400517 	ldw	r21,20(sp)
  807bf4:	dd000417 	ldw	r20,16(sp)
  807bf8:	dcc00317 	ldw	r19,12(sp)
  807bfc:	dc800217 	ldw	r18,8(sp)
  807c00:	dc400117 	ldw	r17,4(sp)
  807c04:	dc000017 	ldw	r16,0(sp)
  807c08:	dec00704 	addi	sp,sp,28
  807c0c:	f800283a 	ret

00807c10 <__i2b>:
  807c10:	defffd04 	addi	sp,sp,-12
  807c14:	dc000015 	stw	r16,0(sp)
  807c18:	04000044 	movi	r16,1
  807c1c:	dc800115 	stw	r18,4(sp)
  807c20:	2825883a 	mov	r18,r5
  807c24:	800b883a 	mov	r5,r16
  807c28:	dfc00215 	stw	ra,8(sp)
  807c2c:	08075180 	call	807518 <_Balloc>
  807c30:	14000415 	stw	r16,16(r2)
  807c34:	14800515 	stw	r18,20(r2)
  807c38:	dfc00217 	ldw	ra,8(sp)
  807c3c:	dc800117 	ldw	r18,4(sp)
  807c40:	dc000017 	ldw	r16,0(sp)
  807c44:	dec00304 	addi	sp,sp,12
  807c48:	f800283a 	ret

00807c4c <__multadd>:
  807c4c:	defffa04 	addi	sp,sp,-24
  807c50:	dc800215 	stw	r18,8(sp)
  807c54:	2c800417 	ldw	r18,16(r5)
  807c58:	dd000415 	stw	r20,16(sp)
  807c5c:	dcc00315 	stw	r19,12(sp)
  807c60:	dc000015 	stw	r16,0(sp)
  807c64:	dfc00515 	stw	ra,20(sp)
  807c68:	3821883a 	mov	r16,r7
  807c6c:	dc400115 	stw	r17,4(sp)
  807c70:	2827883a 	mov	r19,r5
  807c74:	2029883a 	mov	r20,r4
  807c78:	2a000504 	addi	r8,r5,20
  807c7c:	000f883a 	mov	r7,zero
  807c80:	40800017 	ldw	r2,0(r8)
  807c84:	39c00044 	addi	r7,r7,1
  807c88:	10ffffcc 	andi	r3,r2,65535
  807c8c:	1987383a 	mul	r3,r3,r6
  807c90:	1004d43a 	srli	r2,r2,16
  807c94:	1c07883a 	add	r3,r3,r16
  807c98:	180ad43a 	srli	r5,r3,16
  807c9c:	1185383a 	mul	r2,r2,r6
  807ca0:	18ffffcc 	andi	r3,r3,65535
  807ca4:	1145883a 	add	r2,r2,r5
  807ca8:	1008943a 	slli	r4,r2,16
  807cac:	1020d43a 	srli	r16,r2,16
  807cb0:	20c9883a 	add	r4,r4,r3
  807cb4:	41000015 	stw	r4,0(r8)
  807cb8:	42000104 	addi	r8,r8,4
  807cbc:	3cbff016 	blt	r7,r18,807c80 <__multadd+0x34>
  807cc0:	80000826 	beq	r16,zero,807ce4 <__multadd+0x98>
  807cc4:	98800217 	ldw	r2,8(r19)
  807cc8:	90800f0e 	bge	r18,r2,807d08 <__multadd+0xbc>
  807ccc:	9485883a 	add	r2,r18,r18
  807cd0:	1085883a 	add	r2,r2,r2
  807cd4:	14c5883a 	add	r2,r2,r19
  807cd8:	90c00044 	addi	r3,r18,1
  807cdc:	14000515 	stw	r16,20(r2)
  807ce0:	98c00415 	stw	r3,16(r19)
  807ce4:	9805883a 	mov	r2,r19
  807ce8:	dfc00517 	ldw	ra,20(sp)
  807cec:	dd000417 	ldw	r20,16(sp)
  807cf0:	dcc00317 	ldw	r19,12(sp)
  807cf4:	dc800217 	ldw	r18,8(sp)
  807cf8:	dc400117 	ldw	r17,4(sp)
  807cfc:	dc000017 	ldw	r16,0(sp)
  807d00:	dec00604 	addi	sp,sp,24
  807d04:	f800283a 	ret
  807d08:	99400117 	ldw	r5,4(r19)
  807d0c:	a009883a 	mov	r4,r20
  807d10:	29400044 	addi	r5,r5,1
  807d14:	08075180 	call	807518 <_Balloc>
  807d18:	99800417 	ldw	r6,16(r19)
  807d1c:	99400304 	addi	r5,r19,12
  807d20:	11000304 	addi	r4,r2,12
  807d24:	318d883a 	add	r6,r6,r6
  807d28:	318d883a 	add	r6,r6,r6
  807d2c:	31800204 	addi	r6,r6,8
  807d30:	1023883a 	mov	r17,r2
  807d34:	0806d800 	call	806d80 <memcpy>
  807d38:	980b883a 	mov	r5,r19
  807d3c:	a009883a 	mov	r4,r20
  807d40:	0806f980 	call	806f98 <_Bfree>
  807d44:	8827883a 	mov	r19,r17
  807d48:	003fe006 	br	807ccc <__multadd+0x80>

00807d4c <__pow5mult>:
  807d4c:	defffa04 	addi	sp,sp,-24
  807d50:	308000cc 	andi	r2,r6,3
  807d54:	dd000415 	stw	r20,16(sp)
  807d58:	dcc00315 	stw	r19,12(sp)
  807d5c:	dc000015 	stw	r16,0(sp)
  807d60:	dfc00515 	stw	ra,20(sp)
  807d64:	dc800215 	stw	r18,8(sp)
  807d68:	dc400115 	stw	r17,4(sp)
  807d6c:	3021883a 	mov	r16,r6
  807d70:	2027883a 	mov	r19,r4
  807d74:	2829883a 	mov	r20,r5
  807d78:	10002b1e 	bne	r2,zero,807e28 <__pow5mult+0xdc>
  807d7c:	8025d0ba 	srai	r18,r16,2
  807d80:	90001b26 	beq	r18,zero,807df0 <__pow5mult+0xa4>
  807d84:	9c001217 	ldw	r16,72(r19)
  807d88:	8000081e 	bne	r16,zero,807dac <__pow5mult+0x60>
  807d8c:	00003006 	br	807e50 <__pow5mult+0x104>
  807d90:	800b883a 	mov	r5,r16
  807d94:	800d883a 	mov	r6,r16
  807d98:	9809883a 	mov	r4,r19
  807d9c:	90001426 	beq	r18,zero,807df0 <__pow5mult+0xa4>
  807da0:	80800017 	ldw	r2,0(r16)
  807da4:	10001b26 	beq	r2,zero,807e14 <__pow5mult+0xc8>
  807da8:	1021883a 	mov	r16,r2
  807dac:	9080004c 	andi	r2,r18,1
  807db0:	1005003a 	cmpeq	r2,r2,zero
  807db4:	9025d07a 	srai	r18,r18,1
  807db8:	800d883a 	mov	r6,r16
  807dbc:	9809883a 	mov	r4,r19
  807dc0:	a00b883a 	mov	r5,r20
  807dc4:	103ff21e 	bne	r2,zero,807d90 <__pow5mult+0x44>
  807dc8:	0807a280 	call	807a28 <__multiply>
  807dcc:	a00b883a 	mov	r5,r20
  807dd0:	9809883a 	mov	r4,r19
  807dd4:	1023883a 	mov	r17,r2
  807dd8:	0806f980 	call	806f98 <_Bfree>
  807ddc:	8829883a 	mov	r20,r17
  807de0:	800b883a 	mov	r5,r16
  807de4:	800d883a 	mov	r6,r16
  807de8:	9809883a 	mov	r4,r19
  807dec:	903fec1e 	bne	r18,zero,807da0 <__pow5mult+0x54>
  807df0:	a005883a 	mov	r2,r20
  807df4:	dfc00517 	ldw	ra,20(sp)
  807df8:	dd000417 	ldw	r20,16(sp)
  807dfc:	dcc00317 	ldw	r19,12(sp)
  807e00:	dc800217 	ldw	r18,8(sp)
  807e04:	dc400117 	ldw	r17,4(sp)
  807e08:	dc000017 	ldw	r16,0(sp)
  807e0c:	dec00604 	addi	sp,sp,24
  807e10:	f800283a 	ret
  807e14:	0807a280 	call	807a28 <__multiply>
  807e18:	80800015 	stw	r2,0(r16)
  807e1c:	1021883a 	mov	r16,r2
  807e20:	10000015 	stw	zero,0(r2)
  807e24:	003fe106 	br	807dac <__pow5mult+0x60>
  807e28:	1085883a 	add	r2,r2,r2
  807e2c:	00c02074 	movhi	r3,129
  807e30:	18c28704 	addi	r3,r3,2588
  807e34:	1085883a 	add	r2,r2,r2
  807e38:	10c5883a 	add	r2,r2,r3
  807e3c:	11bfff17 	ldw	r6,-4(r2)
  807e40:	000f883a 	mov	r7,zero
  807e44:	0807c4c0 	call	807c4c <__multadd>
  807e48:	1029883a 	mov	r20,r2
  807e4c:	003fcb06 	br	807d7c <__pow5mult+0x30>
  807e50:	9809883a 	mov	r4,r19
  807e54:	01409c44 	movi	r5,625
  807e58:	0807c100 	call	807c10 <__i2b>
  807e5c:	98801215 	stw	r2,72(r19)
  807e60:	1021883a 	mov	r16,r2
  807e64:	10000015 	stw	zero,0(r2)
  807e68:	003fd006 	br	807dac <__pow5mult+0x60>

00807e6c <__s2b>:
  807e6c:	defff904 	addi	sp,sp,-28
  807e70:	dcc00315 	stw	r19,12(sp)
  807e74:	dc800215 	stw	r18,8(sp)
  807e78:	2827883a 	mov	r19,r5
  807e7c:	2025883a 	mov	r18,r4
  807e80:	01400244 	movi	r5,9
  807e84:	39000204 	addi	r4,r7,8
  807e88:	dd000415 	stw	r20,16(sp)
  807e8c:	dc400115 	stw	r17,4(sp)
  807e90:	dfc00615 	stw	ra,24(sp)
  807e94:	dd400515 	stw	r21,20(sp)
  807e98:	dc000015 	stw	r16,0(sp)
  807e9c:	3829883a 	mov	r20,r7
  807ea0:	3023883a 	mov	r17,r6
  807ea4:	080be300 	call	80be30 <__divsi3>
  807ea8:	00c00044 	movi	r3,1
  807eac:	1880350e 	bge	r3,r2,807f84 <__s2b+0x118>
  807eb0:	000b883a 	mov	r5,zero
  807eb4:	18c7883a 	add	r3,r3,r3
  807eb8:	29400044 	addi	r5,r5,1
  807ebc:	18bffd16 	blt	r3,r2,807eb4 <__s2b+0x48>
  807ec0:	9009883a 	mov	r4,r18
  807ec4:	08075180 	call	807518 <_Balloc>
  807ec8:	1011883a 	mov	r8,r2
  807ecc:	d8800717 	ldw	r2,28(sp)
  807ed0:	00c00044 	movi	r3,1
  807ed4:	01800244 	movi	r6,9
  807ed8:	40800515 	stw	r2,20(r8)
  807edc:	40c00415 	stw	r3,16(r8)
  807ee0:	3440260e 	bge	r6,r17,807f7c <__s2b+0x110>
  807ee4:	3021883a 	mov	r16,r6
  807ee8:	99ab883a 	add	r21,r19,r6
  807eec:	9c05883a 	add	r2,r19,r16
  807ef0:	11c00007 	ldb	r7,0(r2)
  807ef4:	400b883a 	mov	r5,r8
  807ef8:	9009883a 	mov	r4,r18
  807efc:	39fff404 	addi	r7,r7,-48
  807f00:	01800284 	movi	r6,10
  807f04:	0807c4c0 	call	807c4c <__multadd>
  807f08:	84000044 	addi	r16,r16,1
  807f0c:	1011883a 	mov	r8,r2
  807f10:	8c3ff61e 	bne	r17,r16,807eec <__s2b+0x80>
  807f14:	ac45883a 	add	r2,r21,r17
  807f18:	117ffe04 	addi	r5,r2,-8
  807f1c:	880d883a 	mov	r6,r17
  807f20:	35000c0e 	bge	r6,r20,807f54 <__s2b+0xe8>
  807f24:	a185c83a 	sub	r2,r20,r6
  807f28:	2821883a 	mov	r16,r5
  807f2c:	28a3883a 	add	r17,r5,r2
  807f30:	81c00007 	ldb	r7,0(r16)
  807f34:	400b883a 	mov	r5,r8
  807f38:	9009883a 	mov	r4,r18
  807f3c:	39fff404 	addi	r7,r7,-48
  807f40:	01800284 	movi	r6,10
  807f44:	0807c4c0 	call	807c4c <__multadd>
  807f48:	84000044 	addi	r16,r16,1
  807f4c:	1011883a 	mov	r8,r2
  807f50:	847ff71e 	bne	r16,r17,807f30 <__s2b+0xc4>
  807f54:	4005883a 	mov	r2,r8
  807f58:	dfc00617 	ldw	ra,24(sp)
  807f5c:	dd400517 	ldw	r21,20(sp)
  807f60:	dd000417 	ldw	r20,16(sp)
  807f64:	dcc00317 	ldw	r19,12(sp)
  807f68:	dc800217 	ldw	r18,8(sp)
  807f6c:	dc400117 	ldw	r17,4(sp)
  807f70:	dc000017 	ldw	r16,0(sp)
  807f74:	dec00704 	addi	sp,sp,28
  807f78:	f800283a 	ret
  807f7c:	99400284 	addi	r5,r19,10
  807f80:	003fe706 	br	807f20 <__s2b+0xb4>
  807f84:	000b883a 	mov	r5,zero
  807f88:	003fcd06 	br	807ec0 <__s2b+0x54>

00807f8c <_realloc_r>:
  807f8c:	defff404 	addi	sp,sp,-48
  807f90:	dd800815 	stw	r22,32(sp)
  807f94:	dc800415 	stw	r18,16(sp)
  807f98:	dc400315 	stw	r17,12(sp)
  807f9c:	dfc00b15 	stw	ra,44(sp)
  807fa0:	df000a15 	stw	fp,40(sp)
  807fa4:	ddc00915 	stw	r23,36(sp)
  807fa8:	dd400715 	stw	r21,28(sp)
  807fac:	dd000615 	stw	r20,24(sp)
  807fb0:	dcc00515 	stw	r19,20(sp)
  807fb4:	dc000215 	stw	r16,8(sp)
  807fb8:	2825883a 	mov	r18,r5
  807fbc:	3023883a 	mov	r17,r6
  807fc0:	202d883a 	mov	r22,r4
  807fc4:	2800c926 	beq	r5,zero,8082ec <_realloc_r+0x360>
  807fc8:	080cfd40 	call	80cfd4 <__malloc_lock>
  807fcc:	943ffe04 	addi	r16,r18,-8
  807fd0:	88c002c4 	addi	r3,r17,11
  807fd4:	00800584 	movi	r2,22
  807fd8:	82000117 	ldw	r8,4(r16)
  807fdc:	10c01b2e 	bgeu	r2,r3,80804c <_realloc_r+0xc0>
  807fe0:	00bffe04 	movi	r2,-8
  807fe4:	188e703a 	and	r7,r3,r2
  807fe8:	3839883a 	mov	fp,r7
  807fec:	38001a16 	blt	r7,zero,808058 <_realloc_r+0xcc>
  807ff0:	e4401936 	bltu	fp,r17,808058 <_realloc_r+0xcc>
  807ff4:	013fff04 	movi	r4,-4
  807ff8:	4126703a 	and	r19,r8,r4
  807ffc:	99c02616 	blt	r19,r7,808098 <_realloc_r+0x10c>
  808000:	802b883a 	mov	r21,r16
  808004:	9829883a 	mov	r20,r19
  808008:	84000204 	addi	r16,r16,8
  80800c:	a80f883a 	mov	r7,r21
  808010:	a70dc83a 	sub	r6,r20,fp
  808014:	008003c4 	movi	r2,15
  808018:	1180c136 	bltu	r2,r6,808320 <_realloc_r+0x394>
  80801c:	38800117 	ldw	r2,4(r7)
  808020:	a549883a 	add	r4,r20,r21
  808024:	1080004c 	andi	r2,r2,1
  808028:	a084b03a 	or	r2,r20,r2
  80802c:	38800115 	stw	r2,4(r7)
  808030:	20c00117 	ldw	r3,4(r4)
  808034:	18c00054 	ori	r3,r3,1
  808038:	20c00115 	stw	r3,4(r4)
  80803c:	b009883a 	mov	r4,r22
  808040:	080cff40 	call	80cff4 <__malloc_unlock>
  808044:	8023883a 	mov	r17,r16
  808048:	00000606 	br	808064 <_realloc_r+0xd8>
  80804c:	01c00404 	movi	r7,16
  808050:	3839883a 	mov	fp,r7
  808054:	e47fe72e 	bgeu	fp,r17,807ff4 <_realloc_r+0x68>
  808058:	00800304 	movi	r2,12
  80805c:	0023883a 	mov	r17,zero
  808060:	b0800015 	stw	r2,0(r22)
  808064:	8805883a 	mov	r2,r17
  808068:	dfc00b17 	ldw	ra,44(sp)
  80806c:	df000a17 	ldw	fp,40(sp)
  808070:	ddc00917 	ldw	r23,36(sp)
  808074:	dd800817 	ldw	r22,32(sp)
  808078:	dd400717 	ldw	r21,28(sp)
  80807c:	dd000617 	ldw	r20,24(sp)
  808080:	dcc00517 	ldw	r19,20(sp)
  808084:	dc800417 	ldw	r18,16(sp)
  808088:	dc400317 	ldw	r17,12(sp)
  80808c:	dc000217 	ldw	r16,8(sp)
  808090:	dec00c04 	addi	sp,sp,48
  808094:	f800283a 	ret
  808098:	00802074 	movhi	r2,129
  80809c:	1083ff04 	addi	r2,r2,4092
  8080a0:	12400217 	ldw	r9,8(r2)
  8080a4:	84cd883a 	add	r6,r16,r19
  8080a8:	802b883a 	mov	r21,r16
  8080ac:	3240b926 	beq	r6,r9,808394 <_realloc_r+0x408>
  8080b0:	31400117 	ldw	r5,4(r6)
  8080b4:	00bfff84 	movi	r2,-2
  8080b8:	2884703a 	and	r2,r5,r2
  8080bc:	1185883a 	add	r2,r2,r6
  8080c0:	10c00117 	ldw	r3,4(r2)
  8080c4:	18c0004c 	andi	r3,r3,1
  8080c8:	1807003a 	cmpeq	r3,r3,zero
  8080cc:	1800a326 	beq	r3,zero,80835c <_realloc_r+0x3d0>
  8080d0:	2908703a 	and	r4,r5,r4
  8080d4:	9929883a 	add	r20,r19,r4
  8080d8:	a1c0a30e 	bge	r20,r7,808368 <_realloc_r+0x3dc>
  8080dc:	4080004c 	andi	r2,r8,1
  8080e0:	1000551e 	bne	r2,zero,808238 <_realloc_r+0x2ac>
  8080e4:	80800017 	ldw	r2,0(r16)
  8080e8:	80afc83a 	sub	r23,r16,r2
  8080ec:	b8c00117 	ldw	r3,4(r23)
  8080f0:	00bfff04 	movi	r2,-4
  8080f4:	1884703a 	and	r2,r3,r2
  8080f8:	30002e26 	beq	r6,zero,8081b4 <_realloc_r+0x228>
  8080fc:	3240b926 	beq	r6,r9,8083e4 <_realloc_r+0x458>
  808100:	98a9883a 	add	r20,r19,r2
  808104:	2509883a 	add	r4,r4,r20
  808108:	d9000015 	stw	r4,0(sp)
  80810c:	21c02a16 	blt	r4,r7,8081b8 <_realloc_r+0x22c>
  808110:	30800317 	ldw	r2,12(r6)
  808114:	30c00217 	ldw	r3,8(r6)
  808118:	01400904 	movi	r5,36
  80811c:	99bfff04 	addi	r6,r19,-4
  808120:	18800315 	stw	r2,12(r3)
  808124:	10c00215 	stw	r3,8(r2)
  808128:	b9000317 	ldw	r4,12(r23)
  80812c:	b8800217 	ldw	r2,8(r23)
  808130:	b82b883a 	mov	r21,r23
  808134:	bc000204 	addi	r16,r23,8
  808138:	20800215 	stw	r2,8(r4)
  80813c:	11000315 	stw	r4,12(r2)
  808140:	2980e436 	bltu	r5,r6,8084d4 <_realloc_r+0x548>
  808144:	008004c4 	movi	r2,19
  808148:	9009883a 	mov	r4,r18
  80814c:	8011883a 	mov	r8,r16
  808150:	11800f2e 	bgeu	r2,r6,808190 <_realloc_r+0x204>
  808154:	90800017 	ldw	r2,0(r18)
  808158:	ba000404 	addi	r8,r23,16
  80815c:	91000204 	addi	r4,r18,8
  808160:	b8800215 	stw	r2,8(r23)
  808164:	90c00117 	ldw	r3,4(r18)
  808168:	008006c4 	movi	r2,27
  80816c:	b8c00315 	stw	r3,12(r23)
  808170:	1180072e 	bgeu	r2,r6,808190 <_realloc_r+0x204>
  808174:	90c00217 	ldw	r3,8(r18)
  808178:	ba000604 	addi	r8,r23,24
  80817c:	91000404 	addi	r4,r18,16
  808180:	b8c00415 	stw	r3,16(r23)
  808184:	90800317 	ldw	r2,12(r18)
  808188:	b8800515 	stw	r2,20(r23)
  80818c:	3140e726 	beq	r6,r5,80852c <_realloc_r+0x5a0>
  808190:	20800017 	ldw	r2,0(r4)
  808194:	dd000017 	ldw	r20,0(sp)
  808198:	b80f883a 	mov	r7,r23
  80819c:	40800015 	stw	r2,0(r8)
  8081a0:	20c00117 	ldw	r3,4(r4)
  8081a4:	40c00115 	stw	r3,4(r8)
  8081a8:	20800217 	ldw	r2,8(r4)
  8081ac:	40800215 	stw	r2,8(r8)
  8081b0:	003f9706 	br	808010 <_realloc_r+0x84>
  8081b4:	98a9883a 	add	r20,r19,r2
  8081b8:	a1c01f16 	blt	r20,r7,808238 <_realloc_r+0x2ac>
  8081bc:	b8c00317 	ldw	r3,12(r23)
  8081c0:	b8800217 	ldw	r2,8(r23)
  8081c4:	99bfff04 	addi	r6,r19,-4
  8081c8:	01400904 	movi	r5,36
  8081cc:	b82b883a 	mov	r21,r23
  8081d0:	18800215 	stw	r2,8(r3)
  8081d4:	10c00315 	stw	r3,12(r2)
  8081d8:	bc000204 	addi	r16,r23,8
  8081dc:	2980c336 	bltu	r5,r6,8084ec <_realloc_r+0x560>
  8081e0:	008004c4 	movi	r2,19
  8081e4:	9009883a 	mov	r4,r18
  8081e8:	8011883a 	mov	r8,r16
  8081ec:	11800f2e 	bgeu	r2,r6,80822c <_realloc_r+0x2a0>
  8081f0:	90800017 	ldw	r2,0(r18)
  8081f4:	ba000404 	addi	r8,r23,16
  8081f8:	91000204 	addi	r4,r18,8
  8081fc:	b8800215 	stw	r2,8(r23)
  808200:	90c00117 	ldw	r3,4(r18)
  808204:	008006c4 	movi	r2,27
  808208:	b8c00315 	stw	r3,12(r23)
  80820c:	1180072e 	bgeu	r2,r6,80822c <_realloc_r+0x2a0>
  808210:	90c00217 	ldw	r3,8(r18)
  808214:	ba000604 	addi	r8,r23,24
  808218:	91000404 	addi	r4,r18,16
  80821c:	b8c00415 	stw	r3,16(r23)
  808220:	90800317 	ldw	r2,12(r18)
  808224:	b8800515 	stw	r2,20(r23)
  808228:	3140c726 	beq	r6,r5,808548 <_realloc_r+0x5bc>
  80822c:	20800017 	ldw	r2,0(r4)
  808230:	b80f883a 	mov	r7,r23
  808234:	003fd906 	br	80819c <_realloc_r+0x210>
  808238:	880b883a 	mov	r5,r17
  80823c:	b009883a 	mov	r4,r22
  808240:	08016bc0 	call	8016bc <_malloc_r>
  808244:	1023883a 	mov	r17,r2
  808248:	10002526 	beq	r2,zero,8082e0 <_realloc_r+0x354>
  80824c:	80800117 	ldw	r2,4(r16)
  808250:	00ffff84 	movi	r3,-2
  808254:	893ffe04 	addi	r4,r17,-8
  808258:	10c4703a 	and	r2,r2,r3
  80825c:	8085883a 	add	r2,r16,r2
  808260:	20809526 	beq	r4,r2,8084b8 <_realloc_r+0x52c>
  808264:	99bfff04 	addi	r6,r19,-4
  808268:	01c00904 	movi	r7,36
  80826c:	39804536 	bltu	r7,r6,808384 <_realloc_r+0x3f8>
  808270:	008004c4 	movi	r2,19
  808274:	9009883a 	mov	r4,r18
  808278:	880b883a 	mov	r5,r17
  80827c:	11800f2e 	bgeu	r2,r6,8082bc <_realloc_r+0x330>
  808280:	90800017 	ldw	r2,0(r18)
  808284:	89400204 	addi	r5,r17,8
  808288:	91000204 	addi	r4,r18,8
  80828c:	88800015 	stw	r2,0(r17)
  808290:	90c00117 	ldw	r3,4(r18)
  808294:	008006c4 	movi	r2,27
  808298:	88c00115 	stw	r3,4(r17)
  80829c:	1180072e 	bgeu	r2,r6,8082bc <_realloc_r+0x330>
  8082a0:	90c00217 	ldw	r3,8(r18)
  8082a4:	89400404 	addi	r5,r17,16
  8082a8:	91000404 	addi	r4,r18,16
  8082ac:	88c00215 	stw	r3,8(r17)
  8082b0:	90800317 	ldw	r2,12(r18)
  8082b4:	88800315 	stw	r2,12(r17)
  8082b8:	31c09126 	beq	r6,r7,808500 <_realloc_r+0x574>
  8082bc:	20800017 	ldw	r2,0(r4)
  8082c0:	28800015 	stw	r2,0(r5)
  8082c4:	20c00117 	ldw	r3,4(r4)
  8082c8:	28c00115 	stw	r3,4(r5)
  8082cc:	20800217 	ldw	r2,8(r4)
  8082d0:	28800215 	stw	r2,8(r5)
  8082d4:	900b883a 	mov	r5,r18
  8082d8:	b009883a 	mov	r4,r22
  8082dc:	08061140 	call	806114 <_free_r>
  8082e0:	b009883a 	mov	r4,r22
  8082e4:	080cff40 	call	80cff4 <__malloc_unlock>
  8082e8:	003f5e06 	br	808064 <_realloc_r+0xd8>
  8082ec:	300b883a 	mov	r5,r6
  8082f0:	dfc00b17 	ldw	ra,44(sp)
  8082f4:	df000a17 	ldw	fp,40(sp)
  8082f8:	ddc00917 	ldw	r23,36(sp)
  8082fc:	dd800817 	ldw	r22,32(sp)
  808300:	dd400717 	ldw	r21,28(sp)
  808304:	dd000617 	ldw	r20,24(sp)
  808308:	dcc00517 	ldw	r19,20(sp)
  80830c:	dc800417 	ldw	r18,16(sp)
  808310:	dc400317 	ldw	r17,12(sp)
  808314:	dc000217 	ldw	r16,8(sp)
  808318:	dec00c04 	addi	sp,sp,48
  80831c:	08016bc1 	jmpi	8016bc <_malloc_r>
  808320:	38800117 	ldw	r2,4(r7)
  808324:	e54b883a 	add	r5,fp,r21
  808328:	31000054 	ori	r4,r6,1
  80832c:	1080004c 	andi	r2,r2,1
  808330:	1704b03a 	or	r2,r2,fp
  808334:	38800115 	stw	r2,4(r7)
  808338:	29000115 	stw	r4,4(r5)
  80833c:	2987883a 	add	r3,r5,r6
  808340:	18800117 	ldw	r2,4(r3)
  808344:	29400204 	addi	r5,r5,8
  808348:	b009883a 	mov	r4,r22
  80834c:	10800054 	ori	r2,r2,1
  808350:	18800115 	stw	r2,4(r3)
  808354:	08061140 	call	806114 <_free_r>
  808358:	003f3806 	br	80803c <_realloc_r+0xb0>
  80835c:	000d883a 	mov	r6,zero
  808360:	0009883a 	mov	r4,zero
  808364:	003f5d06 	br	8080dc <_realloc_r+0x150>
  808368:	30c00217 	ldw	r3,8(r6)
  80836c:	30800317 	ldw	r2,12(r6)
  808370:	800f883a 	mov	r7,r16
  808374:	84000204 	addi	r16,r16,8
  808378:	10c00215 	stw	r3,8(r2)
  80837c:	18800315 	stw	r2,12(r3)
  808380:	003f2306 	br	808010 <_realloc_r+0x84>
  808384:	8809883a 	mov	r4,r17
  808388:	900b883a 	mov	r5,r18
  80838c:	0806e200 	call	806e20 <memmove>
  808390:	003fd006 	br	8082d4 <_realloc_r+0x348>
  808394:	30800117 	ldw	r2,4(r6)
  808398:	e0c00404 	addi	r3,fp,16
  80839c:	1108703a 	and	r4,r2,r4
  8083a0:	9905883a 	add	r2,r19,r4
  8083a4:	10ff4d16 	blt	r2,r3,8080dc <_realloc_r+0x150>
  8083a8:	1705c83a 	sub	r2,r2,fp
  8083ac:	870b883a 	add	r5,r16,fp
  8083b0:	10800054 	ori	r2,r2,1
  8083b4:	28800115 	stw	r2,4(r5)
  8083b8:	80c00117 	ldw	r3,4(r16)
  8083bc:	00802074 	movhi	r2,129
  8083c0:	1083ff04 	addi	r2,r2,4092
  8083c4:	b009883a 	mov	r4,r22
  8083c8:	18c0004c 	andi	r3,r3,1
  8083cc:	e0c6b03a 	or	r3,fp,r3
  8083d0:	11400215 	stw	r5,8(r2)
  8083d4:	80c00115 	stw	r3,4(r16)
  8083d8:	080cff40 	call	80cff4 <__malloc_unlock>
  8083dc:	84400204 	addi	r17,r16,8
  8083e0:	003f2006 	br	808064 <_realloc_r+0xd8>
  8083e4:	98a9883a 	add	r20,r19,r2
  8083e8:	2509883a 	add	r4,r4,r20
  8083ec:	e0800404 	addi	r2,fp,16
  8083f0:	d9000115 	stw	r4,4(sp)
  8083f4:	20bf7016 	blt	r4,r2,8081b8 <_realloc_r+0x22c>
  8083f8:	b8c00317 	ldw	r3,12(r23)
  8083fc:	b8800217 	ldw	r2,8(r23)
  808400:	99bfff04 	addi	r6,r19,-4
  808404:	01400904 	movi	r5,36
  808408:	18800215 	stw	r2,8(r3)
  80840c:	10c00315 	stw	r3,12(r2)
  808410:	bc400204 	addi	r17,r23,8
  808414:	29804136 	bltu	r5,r6,80851c <_realloc_r+0x590>
  808418:	008004c4 	movi	r2,19
  80841c:	9009883a 	mov	r4,r18
  808420:	880f883a 	mov	r7,r17
  808424:	11800f2e 	bgeu	r2,r6,808464 <_realloc_r+0x4d8>
  808428:	90800017 	ldw	r2,0(r18)
  80842c:	b9c00404 	addi	r7,r23,16
  808430:	91000204 	addi	r4,r18,8
  808434:	b8800215 	stw	r2,8(r23)
  808438:	90c00117 	ldw	r3,4(r18)
  80843c:	008006c4 	movi	r2,27
  808440:	b8c00315 	stw	r3,12(r23)
  808444:	1180072e 	bgeu	r2,r6,808464 <_realloc_r+0x4d8>
  808448:	90c00217 	ldw	r3,8(r18)
  80844c:	b9c00604 	addi	r7,r23,24
  808450:	91000404 	addi	r4,r18,16
  808454:	b8c00415 	stw	r3,16(r23)
  808458:	90800317 	ldw	r2,12(r18)
  80845c:	b8800515 	stw	r2,20(r23)
  808460:	31404026 	beq	r6,r5,808564 <_realloc_r+0x5d8>
  808464:	20800017 	ldw	r2,0(r4)
  808468:	38800015 	stw	r2,0(r7)
  80846c:	20c00117 	ldw	r3,4(r4)
  808470:	38c00115 	stw	r3,4(r7)
  808474:	20800217 	ldw	r2,8(r4)
  808478:	38800215 	stw	r2,8(r7)
  80847c:	d8c00117 	ldw	r3,4(sp)
  808480:	bf0b883a 	add	r5,r23,fp
  808484:	b009883a 	mov	r4,r22
  808488:	1f05c83a 	sub	r2,r3,fp
  80848c:	10800054 	ori	r2,r2,1
  808490:	28800115 	stw	r2,4(r5)
  808494:	b8c00117 	ldw	r3,4(r23)
  808498:	00802074 	movhi	r2,129
  80849c:	1083ff04 	addi	r2,r2,4092
  8084a0:	11400215 	stw	r5,8(r2)
  8084a4:	18c0004c 	andi	r3,r3,1
  8084a8:	e0c6b03a 	or	r3,fp,r3
  8084ac:	b8c00115 	stw	r3,4(r23)
  8084b0:	080cff40 	call	80cff4 <__malloc_unlock>
  8084b4:	003eeb06 	br	808064 <_realloc_r+0xd8>
  8084b8:	20800117 	ldw	r2,4(r4)
  8084bc:	00ffff04 	movi	r3,-4
  8084c0:	800f883a 	mov	r7,r16
  8084c4:	10c4703a 	and	r2,r2,r3
  8084c8:	98a9883a 	add	r20,r19,r2
  8084cc:	84000204 	addi	r16,r16,8
  8084d0:	003ecf06 	br	808010 <_realloc_r+0x84>
  8084d4:	900b883a 	mov	r5,r18
  8084d8:	8009883a 	mov	r4,r16
  8084dc:	0806e200 	call	806e20 <memmove>
  8084e0:	dd000017 	ldw	r20,0(sp)
  8084e4:	b80f883a 	mov	r7,r23
  8084e8:	003ec906 	br	808010 <_realloc_r+0x84>
  8084ec:	900b883a 	mov	r5,r18
  8084f0:	8009883a 	mov	r4,r16
  8084f4:	0806e200 	call	806e20 <memmove>
  8084f8:	b80f883a 	mov	r7,r23
  8084fc:	003ec406 	br	808010 <_realloc_r+0x84>
  808500:	90c00417 	ldw	r3,16(r18)
  808504:	89400604 	addi	r5,r17,24
  808508:	91000604 	addi	r4,r18,24
  80850c:	88c00415 	stw	r3,16(r17)
  808510:	90800517 	ldw	r2,20(r18)
  808514:	88800515 	stw	r2,20(r17)
  808518:	003f6806 	br	8082bc <_realloc_r+0x330>
  80851c:	900b883a 	mov	r5,r18
  808520:	8809883a 	mov	r4,r17
  808524:	0806e200 	call	806e20 <memmove>
  808528:	003fd406 	br	80847c <_realloc_r+0x4f0>
  80852c:	90c00417 	ldw	r3,16(r18)
  808530:	91000604 	addi	r4,r18,24
  808534:	ba000804 	addi	r8,r23,32
  808538:	b8c00615 	stw	r3,24(r23)
  80853c:	90800517 	ldw	r2,20(r18)
  808540:	b8800715 	stw	r2,28(r23)
  808544:	003f1206 	br	808190 <_realloc_r+0x204>
  808548:	90c00417 	ldw	r3,16(r18)
  80854c:	91000604 	addi	r4,r18,24
  808550:	ba000804 	addi	r8,r23,32
  808554:	b8c00615 	stw	r3,24(r23)
  808558:	90800517 	ldw	r2,20(r18)
  80855c:	b8800715 	stw	r2,28(r23)
  808560:	003f3206 	br	80822c <_realloc_r+0x2a0>
  808564:	90c00417 	ldw	r3,16(r18)
  808568:	91000604 	addi	r4,r18,24
  80856c:	b9c00804 	addi	r7,r23,32
  808570:	b8c00615 	stw	r3,24(r23)
  808574:	90800517 	ldw	r2,20(r18)
  808578:	b8800715 	stw	r2,28(r23)
  80857c:	003fb906 	br	808464 <_realloc_r+0x4d8>

00808580 <__isinfd>:
  808580:	200d883a 	mov	r6,r4
  808584:	0109c83a 	sub	r4,zero,r4
  808588:	2188b03a 	or	r4,r4,r6
  80858c:	2008d7fa 	srli	r4,r4,31
  808590:	00a00034 	movhi	r2,32768
  808594:	10bfffc4 	addi	r2,r2,-1
  808598:	1144703a 	and	r2,r2,r5
  80859c:	2088b03a 	or	r4,r4,r2
  8085a0:	009ffc34 	movhi	r2,32752
  8085a4:	1105c83a 	sub	r2,r2,r4
  8085a8:	0087c83a 	sub	r3,zero,r2
  8085ac:	10c4b03a 	or	r2,r2,r3
  8085b0:	1004d7fa 	srli	r2,r2,31
  8085b4:	00c00044 	movi	r3,1
  8085b8:	1885c83a 	sub	r2,r3,r2
  8085bc:	f800283a 	ret

008085c0 <__isnand>:
  8085c0:	200d883a 	mov	r6,r4
  8085c4:	0109c83a 	sub	r4,zero,r4
  8085c8:	2188b03a 	or	r4,r4,r6
  8085cc:	2008d7fa 	srli	r4,r4,31
  8085d0:	00a00034 	movhi	r2,32768
  8085d4:	10bfffc4 	addi	r2,r2,-1
  8085d8:	1144703a 	and	r2,r2,r5
  8085dc:	2088b03a 	or	r4,r4,r2
  8085e0:	009ffc34 	movhi	r2,32752
  8085e4:	1105c83a 	sub	r2,r2,r4
  8085e8:	1004d7fa 	srli	r2,r2,31
  8085ec:	f800283a 	ret

008085f0 <_raise_r>:
  8085f0:	defffd04 	addi	sp,sp,-12
  8085f4:	008007c4 	movi	r2,31
  8085f8:	dc400115 	stw	r17,4(sp)
  8085fc:	dc000015 	stw	r16,0(sp)
  808600:	dfc00215 	stw	ra,8(sp)
  808604:	2821883a 	mov	r16,r5
  808608:	2023883a 	mov	r17,r4
  80860c:	11402736 	bltu	r2,r5,8086ac <_raise_r+0xbc>
  808610:	20c0b717 	ldw	r3,732(r4)
  808614:	18001326 	beq	r3,zero,808664 <_raise_r+0x74>
  808618:	2945883a 	add	r2,r5,r5
  80861c:	1085883a 	add	r2,r2,r2
  808620:	188b883a 	add	r5,r3,r2
  808624:	28c00017 	ldw	r3,0(r5)
  808628:	18000e26 	beq	r3,zero,808664 <_raise_r+0x74>
  80862c:	01000044 	movi	r4,1
  808630:	19000526 	beq	r3,r4,808648 <_raise_r+0x58>
  808634:	00bfffc4 	movi	r2,-1
  808638:	18801326 	beq	r3,r2,808688 <_raise_r+0x98>
  80863c:	28000015 	stw	zero,0(r5)
  808640:	8009883a 	mov	r4,r16
  808644:	183ee83a 	callr	r3
  808648:	0007883a 	mov	r3,zero
  80864c:	1805883a 	mov	r2,r3
  808650:	dfc00217 	ldw	ra,8(sp)
  808654:	dc400117 	ldw	r17,4(sp)
  808658:	dc000017 	ldw	r16,0(sp)
  80865c:	dec00304 	addi	sp,sp,12
  808660:	f800283a 	ret
  808664:	08088c80 	call	8088c8 <_getpid_r>
  808668:	100b883a 	mov	r5,r2
  80866c:	8809883a 	mov	r4,r17
  808670:	800d883a 	mov	r6,r16
  808674:	dfc00217 	ldw	ra,8(sp)
  808678:	dc400117 	ldw	r17,4(sp)
  80867c:	dc000017 	ldw	r16,0(sp)
  808680:	dec00304 	addi	sp,sp,12
  808684:	08088cc1 	jmpi	8088cc <_kill_r>
  808688:	2007883a 	mov	r3,r4
  80868c:	00800584 	movi	r2,22
  808690:	88800015 	stw	r2,0(r17)
  808694:	1805883a 	mov	r2,r3
  808698:	dfc00217 	ldw	ra,8(sp)
  80869c:	dc400117 	ldw	r17,4(sp)
  8086a0:	dc000017 	ldw	r16,0(sp)
  8086a4:	dec00304 	addi	sp,sp,12
  8086a8:	f800283a 	ret
  8086ac:	00800584 	movi	r2,22
  8086b0:	00ffffc4 	movi	r3,-1
  8086b4:	20800015 	stw	r2,0(r4)
  8086b8:	003fe406 	br	80864c <_raise_r+0x5c>

008086bc <raise>:
  8086bc:	00802074 	movhi	r2,129
  8086c0:	1089eb04 	addi	r2,r2,10156
  8086c4:	200b883a 	mov	r5,r4
  8086c8:	11000017 	ldw	r4,0(r2)
  8086cc:	08085f01 	jmpi	8085f0 <_raise_r>

008086d0 <_init_signal_r>:
  8086d0:	2080b717 	ldw	r2,732(r4)
  8086d4:	defffe04 	addi	sp,sp,-8
  8086d8:	dc000015 	stw	r16,0(sp)
  8086dc:	dfc00115 	stw	ra,4(sp)
  8086e0:	2021883a 	mov	r16,r4
  8086e4:	10000526 	beq	r2,zero,8086fc <_init_signal_r+0x2c>
  8086e8:	0005883a 	mov	r2,zero
  8086ec:	dfc00117 	ldw	ra,4(sp)
  8086f0:	dc000017 	ldw	r16,0(sp)
  8086f4:	dec00204 	addi	sp,sp,8
  8086f8:	f800283a 	ret
  8086fc:	01402004 	movi	r5,128
  808700:	08016bc0 	call	8016bc <_malloc_r>
  808704:	1009883a 	mov	r4,r2
  808708:	8080b715 	stw	r2,732(r16)
  80870c:	10000726 	beq	r2,zero,80872c <_init_signal_r+0x5c>
  808710:	0007883a 	mov	r3,zero
  808714:	01402004 	movi	r5,128
  808718:	20c5883a 	add	r2,r4,r3
  80871c:	18c00104 	addi	r3,r3,4
  808720:	10000015 	stw	zero,0(r2)
  808724:	197ffc1e 	bne	r3,r5,808718 <_init_signal_r+0x48>
  808728:	003fef06 	br	8086e8 <_init_signal_r+0x18>
  80872c:	00bfffc4 	movi	r2,-1
  808730:	003fee06 	br	8086ec <_init_signal_r+0x1c>

00808734 <_init_signal>:
  808734:	00802074 	movhi	r2,129
  808738:	1089eb04 	addi	r2,r2,10156
  80873c:	11000017 	ldw	r4,0(r2)
  808740:	08086d01 	jmpi	8086d0 <_init_signal_r>

00808744 <__sigtramp_r>:
  808744:	defffd04 	addi	sp,sp,-12
  808748:	008007c4 	movi	r2,31
  80874c:	dc000115 	stw	r16,4(sp)
  808750:	dfc00215 	stw	ra,8(sp)
  808754:	2021883a 	mov	r16,r4
  808758:	11401336 	bltu	r2,r5,8087a8 <__sigtramp_r+0x64>
  80875c:	20c0b717 	ldw	r3,732(r4)
  808760:	18001f26 	beq	r3,zero,8087e0 <__sigtramp_r+0x9c>
  808764:	2945883a 	add	r2,r5,r5
  808768:	1085883a 	add	r2,r2,r2
  80876c:	10c9883a 	add	r4,r2,r3
  808770:	20c00017 	ldw	r3,0(r4)
  808774:	18001626 	beq	r3,zero,8087d0 <__sigtramp_r+0x8c>
  808778:	00bfffc4 	movi	r2,-1
  80877c:	18801626 	beq	r3,r2,8087d8 <__sigtramp_r+0x94>
  808780:	00800044 	movi	r2,1
  808784:	18800d26 	beq	r3,r2,8087bc <__sigtramp_r+0x78>
  808788:	20000015 	stw	zero,0(r4)
  80878c:	2809883a 	mov	r4,r5
  808790:	183ee83a 	callr	r3
  808794:	0005883a 	mov	r2,zero
  808798:	dfc00217 	ldw	ra,8(sp)
  80879c:	dc000117 	ldw	r16,4(sp)
  8087a0:	dec00304 	addi	sp,sp,12
  8087a4:	f800283a 	ret
  8087a8:	00bfffc4 	movi	r2,-1
  8087ac:	dfc00217 	ldw	ra,8(sp)
  8087b0:	dc000117 	ldw	r16,4(sp)
  8087b4:	dec00304 	addi	sp,sp,12
  8087b8:	f800283a 	ret
  8087bc:	008000c4 	movi	r2,3
  8087c0:	dfc00217 	ldw	ra,8(sp)
  8087c4:	dc000117 	ldw	r16,4(sp)
  8087c8:	dec00304 	addi	sp,sp,12
  8087cc:	f800283a 	ret
  8087d0:	00800044 	movi	r2,1
  8087d4:	003ff006 	br	808798 <__sigtramp_r+0x54>
  8087d8:	00800084 	movi	r2,2
  8087dc:	003fee06 	br	808798 <__sigtramp_r+0x54>
  8087e0:	d9400015 	stw	r5,0(sp)
  8087e4:	08086d00 	call	8086d0 <_init_signal_r>
  8087e8:	d9400017 	ldw	r5,0(sp)
  8087ec:	103fee1e 	bne	r2,zero,8087a8 <__sigtramp_r+0x64>
  8087f0:	80c0b717 	ldw	r3,732(r16)
  8087f4:	003fdb06 	br	808764 <__sigtramp_r+0x20>

008087f8 <__sigtramp>:
  8087f8:	00802074 	movhi	r2,129
  8087fc:	1089eb04 	addi	r2,r2,10156
  808800:	200b883a 	mov	r5,r4
  808804:	11000017 	ldw	r4,0(r2)
  808808:	08087441 	jmpi	808744 <__sigtramp_r>

0080880c <_signal_r>:
  80880c:	defffc04 	addi	sp,sp,-16
  808810:	008007c4 	movi	r2,31
  808814:	dc800215 	stw	r18,8(sp)
  808818:	dc400115 	stw	r17,4(sp)
  80881c:	dc000015 	stw	r16,0(sp)
  808820:	dfc00315 	stw	ra,12(sp)
  808824:	2823883a 	mov	r17,r5
  808828:	00ffffc4 	movi	r3,-1
  80882c:	3025883a 	mov	r18,r6
  808830:	2021883a 	mov	r16,r4
  808834:	1140092e 	bgeu	r2,r5,80885c <_signal_r+0x50>
  808838:	00800584 	movi	r2,22
  80883c:	20800015 	stw	r2,0(r4)
  808840:	1805883a 	mov	r2,r3
  808844:	dfc00317 	ldw	ra,12(sp)
  808848:	dc800217 	ldw	r18,8(sp)
  80884c:	dc400117 	ldw	r17,4(sp)
  808850:	dc000017 	ldw	r16,0(sp)
  808854:	dec00404 	addi	sp,sp,16
  808858:	f800283a 	ret
  80885c:	2140b717 	ldw	r5,732(r4)
  808860:	28000c26 	beq	r5,zero,808894 <_signal_r+0x88>
  808864:	8c45883a 	add	r2,r17,r17
  808868:	1085883a 	add	r2,r2,r2
  80886c:	1145883a 	add	r2,r2,r5
  808870:	10c00017 	ldw	r3,0(r2)
  808874:	14800015 	stw	r18,0(r2)
  808878:	1805883a 	mov	r2,r3
  80887c:	dfc00317 	ldw	ra,12(sp)
  808880:	dc800217 	ldw	r18,8(sp)
  808884:	dc400117 	ldw	r17,4(sp)
  808888:	dc000017 	ldw	r16,0(sp)
  80888c:	dec00404 	addi	sp,sp,16
  808890:	f800283a 	ret
  808894:	08086d00 	call	8086d0 <_init_signal_r>
  808898:	1000021e 	bne	r2,zero,8088a4 <_signal_r+0x98>
  80889c:	8140b717 	ldw	r5,732(r16)
  8088a0:	003ff006 	br	808864 <_signal_r+0x58>
  8088a4:	00ffffc4 	movi	r3,-1
  8088a8:	003fe506 	br	808840 <_signal_r+0x34>

008088ac <signal>:
  8088ac:	01802074 	movhi	r6,129
  8088b0:	3189eb04 	addi	r6,r6,10156
  8088b4:	2007883a 	mov	r3,r4
  8088b8:	31000017 	ldw	r4,0(r6)
  8088bc:	280d883a 	mov	r6,r5
  8088c0:	180b883a 	mov	r5,r3
  8088c4:	080880c1 	jmpi	80880c <_signal_r>

008088c8 <_getpid_r>:
  8088c8:	080ca4c1 	jmpi	80ca4c <getpid>

008088cc <_kill_r>:
  8088cc:	defffd04 	addi	sp,sp,-12
  8088d0:	dc000015 	stw	r16,0(sp)
  8088d4:	04002074 	movhi	r16,129
  8088d8:	84110404 	addi	r16,r16,17424
  8088dc:	dc400115 	stw	r17,4(sp)
  8088e0:	80000015 	stw	zero,0(r16)
  8088e4:	2023883a 	mov	r17,r4
  8088e8:	2809883a 	mov	r4,r5
  8088ec:	300b883a 	mov	r5,r6
  8088f0:	dfc00215 	stw	ra,8(sp)
  8088f4:	080cb8c0 	call	80cb8c <kill>
  8088f8:	1007883a 	mov	r3,r2
  8088fc:	00bfffc4 	movi	r2,-1
  808900:	18800626 	beq	r3,r2,80891c <_kill_r+0x50>
  808904:	1805883a 	mov	r2,r3
  808908:	dfc00217 	ldw	ra,8(sp)
  80890c:	dc400117 	ldw	r17,4(sp)
  808910:	dc000017 	ldw	r16,0(sp)
  808914:	dec00304 	addi	sp,sp,12
  808918:	f800283a 	ret
  80891c:	80800017 	ldw	r2,0(r16)
  808920:	103ff826 	beq	r2,zero,808904 <_kill_r+0x38>
  808924:	88800015 	stw	r2,0(r17)
  808928:	1805883a 	mov	r2,r3
  80892c:	dfc00217 	ldw	ra,8(sp)
  808930:	dc400117 	ldw	r17,4(sp)
  808934:	dc000017 	ldw	r16,0(sp)
  808938:	dec00304 	addi	sp,sp,12
  80893c:	f800283a 	ret

00808940 <__sclose>:
  808940:	2940038f 	ldh	r5,14(r5)
  808944:	0809d941 	jmpi	809d94 <_close_r>

00808948 <__sseek>:
  808948:	defffe04 	addi	sp,sp,-8
  80894c:	dc000015 	stw	r16,0(sp)
  808950:	2821883a 	mov	r16,r5
  808954:	2940038f 	ldh	r5,14(r5)
  808958:	dfc00115 	stw	ra,4(sp)
  80895c:	080a00c0 	call	80a00c <_lseek_r>
  808960:	1007883a 	mov	r3,r2
  808964:	00bfffc4 	movi	r2,-1
  808968:	18800926 	beq	r3,r2,808990 <__sseek+0x48>
  80896c:	8080030b 	ldhu	r2,12(r16)
  808970:	80c01415 	stw	r3,80(r16)
  808974:	10840014 	ori	r2,r2,4096
  808978:	8080030d 	sth	r2,12(r16)
  80897c:	1805883a 	mov	r2,r3
  808980:	dfc00117 	ldw	ra,4(sp)
  808984:	dc000017 	ldw	r16,0(sp)
  808988:	dec00204 	addi	sp,sp,8
  80898c:	f800283a 	ret
  808990:	8080030b 	ldhu	r2,12(r16)
  808994:	10bbffcc 	andi	r2,r2,61439
  808998:	8080030d 	sth	r2,12(r16)
  80899c:	1805883a 	mov	r2,r3
  8089a0:	dfc00117 	ldw	ra,4(sp)
  8089a4:	dc000017 	ldw	r16,0(sp)
  8089a8:	dec00204 	addi	sp,sp,8
  8089ac:	f800283a 	ret

008089b0 <__swrite>:
  8089b0:	2880030b 	ldhu	r2,12(r5)
  8089b4:	defffb04 	addi	sp,sp,-20
  8089b8:	dcc00315 	stw	r19,12(sp)
  8089bc:	1080400c 	andi	r2,r2,256
  8089c0:	dc800215 	stw	r18,8(sp)
  8089c4:	dc400115 	stw	r17,4(sp)
  8089c8:	dc000015 	stw	r16,0(sp)
  8089cc:	3027883a 	mov	r19,r6
  8089d0:	3825883a 	mov	r18,r7
  8089d4:	dfc00415 	stw	ra,16(sp)
  8089d8:	2821883a 	mov	r16,r5
  8089dc:	000d883a 	mov	r6,zero
  8089e0:	01c00084 	movi	r7,2
  8089e4:	2023883a 	mov	r17,r4
  8089e8:	10000226 	beq	r2,zero,8089f4 <__swrite+0x44>
  8089ec:	2940038f 	ldh	r5,14(r5)
  8089f0:	080a00c0 	call	80a00c <_lseek_r>
  8089f4:	8080030b 	ldhu	r2,12(r16)
  8089f8:	8140038f 	ldh	r5,14(r16)
  8089fc:	8809883a 	mov	r4,r17
  808a00:	10bbffcc 	andi	r2,r2,61439
  808a04:	980d883a 	mov	r6,r19
  808a08:	900f883a 	mov	r7,r18
  808a0c:	8080030d 	sth	r2,12(r16)
  808a10:	dfc00417 	ldw	ra,16(sp)
  808a14:	dcc00317 	ldw	r19,12(sp)
  808a18:	dc800217 	ldw	r18,8(sp)
  808a1c:	dc400117 	ldw	r17,4(sp)
  808a20:	dc000017 	ldw	r16,0(sp)
  808a24:	dec00504 	addi	sp,sp,20
  808a28:	0809c681 	jmpi	809c68 <_write_r>

00808a2c <__sread>:
  808a2c:	defffe04 	addi	sp,sp,-8
  808a30:	dc000015 	stw	r16,0(sp)
  808a34:	2821883a 	mov	r16,r5
  808a38:	2940038f 	ldh	r5,14(r5)
  808a3c:	dfc00115 	stw	ra,4(sp)
  808a40:	080a0840 	call	80a084 <_read_r>
  808a44:	1007883a 	mov	r3,r2
  808a48:	10000816 	blt	r2,zero,808a6c <__sread+0x40>
  808a4c:	80801417 	ldw	r2,80(r16)
  808a50:	10c5883a 	add	r2,r2,r3
  808a54:	80801415 	stw	r2,80(r16)
  808a58:	1805883a 	mov	r2,r3
  808a5c:	dfc00117 	ldw	ra,4(sp)
  808a60:	dc000017 	ldw	r16,0(sp)
  808a64:	dec00204 	addi	sp,sp,8
  808a68:	f800283a 	ret
  808a6c:	8080030b 	ldhu	r2,12(r16)
  808a70:	10bbffcc 	andi	r2,r2,61439
  808a74:	8080030d 	sth	r2,12(r16)
  808a78:	1805883a 	mov	r2,r3
  808a7c:	dfc00117 	ldw	ra,4(sp)
  808a80:	dc000017 	ldw	r16,0(sp)
  808a84:	dec00204 	addi	sp,sp,8
  808a88:	f800283a 	ret

00808a8c <strcmp>:
  808a8c:	2144b03a 	or	r2,r4,r5
  808a90:	108000cc 	andi	r2,r2,3
  808a94:	10001d1e 	bne	r2,zero,808b0c <strcmp+0x80>
  808a98:	200f883a 	mov	r7,r4
  808a9c:	28800017 	ldw	r2,0(r5)
  808aa0:	21000017 	ldw	r4,0(r4)
  808aa4:	280d883a 	mov	r6,r5
  808aa8:	2080161e 	bne	r4,r2,808b04 <strcmp+0x78>
  808aac:	023fbff4 	movhi	r8,65279
  808ab0:	423fbfc4 	addi	r8,r8,-257
  808ab4:	2207883a 	add	r3,r4,r8
  808ab8:	01602074 	movhi	r5,32897
  808abc:	29602004 	addi	r5,r5,-32640
  808ac0:	1946703a 	and	r3,r3,r5
  808ac4:	0104303a 	nor	r2,zero,r4
  808ac8:	10c4703a 	and	r2,r2,r3
  808acc:	10001c1e 	bne	r2,zero,808b40 <strcmp+0xb4>
  808ad0:	4013883a 	mov	r9,r8
  808ad4:	2811883a 	mov	r8,r5
  808ad8:	00000106 	br	808ae0 <strcmp+0x54>
  808adc:	1800181e 	bne	r3,zero,808b40 <strcmp+0xb4>
  808ae0:	39c00104 	addi	r7,r7,4
  808ae4:	39000017 	ldw	r4,0(r7)
  808ae8:	31800104 	addi	r6,r6,4
  808aec:	31400017 	ldw	r5,0(r6)
  808af0:	2245883a 	add	r2,r4,r9
  808af4:	1204703a 	and	r2,r2,r8
  808af8:	0106303a 	nor	r3,zero,r4
  808afc:	1886703a 	and	r3,r3,r2
  808b00:	217ff626 	beq	r4,r5,808adc <strcmp+0x50>
  808b04:	3809883a 	mov	r4,r7
  808b08:	300b883a 	mov	r5,r6
  808b0c:	20c00007 	ldb	r3,0(r4)
  808b10:	1800051e 	bne	r3,zero,808b28 <strcmp+0x9c>
  808b14:	00000606 	br	808b30 <strcmp+0xa4>
  808b18:	21000044 	addi	r4,r4,1
  808b1c:	20c00007 	ldb	r3,0(r4)
  808b20:	29400044 	addi	r5,r5,1
  808b24:	18000226 	beq	r3,zero,808b30 <strcmp+0xa4>
  808b28:	28800007 	ldb	r2,0(r5)
  808b2c:	18bffa26 	beq	r3,r2,808b18 <strcmp+0x8c>
  808b30:	20c00003 	ldbu	r3,0(r4)
  808b34:	28800003 	ldbu	r2,0(r5)
  808b38:	1885c83a 	sub	r2,r3,r2
  808b3c:	f800283a 	ret
  808b40:	0005883a 	mov	r2,zero
  808b44:	f800283a 	ret

00808b48 <__sprint_r>:
  808b48:	30800217 	ldw	r2,8(r6)
  808b4c:	defffe04 	addi	sp,sp,-8
  808b50:	dc000015 	stw	r16,0(sp)
  808b54:	dfc00115 	stw	ra,4(sp)
  808b58:	3021883a 	mov	r16,r6
  808b5c:	0007883a 	mov	r3,zero
  808b60:	1000061e 	bne	r2,zero,808b7c <__sprint_r+0x34>
  808b64:	1805883a 	mov	r2,r3
  808b68:	30000115 	stw	zero,4(r6)
  808b6c:	dfc00117 	ldw	ra,4(sp)
  808b70:	dc000017 	ldw	r16,0(sp)
  808b74:	dec00204 	addi	sp,sp,8
  808b78:	f800283a 	ret
  808b7c:	08064280 	call	806428 <__sfvwrite_r>
  808b80:	1007883a 	mov	r3,r2
  808b84:	1805883a 	mov	r2,r3
  808b88:	80000115 	stw	zero,4(r16)
  808b8c:	80000215 	stw	zero,8(r16)
  808b90:	dfc00117 	ldw	ra,4(sp)
  808b94:	dc000017 	ldw	r16,0(sp)
  808b98:	dec00204 	addi	sp,sp,8
  808b9c:	f800283a 	ret

00808ba0 <___vfiprintf_internal_r>:
  808ba0:	defeb604 	addi	sp,sp,-1320
  808ba4:	dd814615 	stw	r22,1304(sp)
  808ba8:	dd414515 	stw	r21,1300(sp)
  808bac:	dc014015 	stw	r16,1280(sp)
  808bb0:	dfc14915 	stw	ra,1316(sp)
  808bb4:	df014815 	stw	fp,1312(sp)
  808bb8:	ddc14715 	stw	r23,1308(sp)
  808bbc:	dd014415 	stw	r20,1296(sp)
  808bc0:	dcc14315 	stw	r19,1292(sp)
  808bc4:	dc814215 	stw	r18,1288(sp)
  808bc8:	dc414115 	stw	r17,1284(sp)
  808bcc:	202d883a 	mov	r22,r4
  808bd0:	282b883a 	mov	r21,r5
  808bd4:	3021883a 	mov	r16,r6
  808bd8:	20000226 	beq	r4,zero,808be4 <___vfiprintf_internal_r+0x44>
  808bdc:	20800e17 	ldw	r2,56(r4)
  808be0:	1001bc26 	beq	r2,zero,8092d4 <___vfiprintf_internal_r+0x734>
  808be4:	a880030b 	ldhu	r2,12(r21)
  808be8:	1080020c 	andi	r2,r2,8
  808bec:	1001cb26 	beq	r2,zero,80931c <___vfiprintf_internal_r+0x77c>
  808bf0:	a8800417 	ldw	r2,16(r21)
  808bf4:	1001c926 	beq	r2,zero,80931c <___vfiprintf_internal_r+0x77c>
  808bf8:	aa00030b 	ldhu	r8,12(r21)
  808bfc:	00800284 	movi	r2,10
  808c00:	40c0068c 	andi	r3,r8,26
  808c04:	18802f1e 	bne	r3,r2,808cc4 <___vfiprintf_internal_r+0x124>
  808c08:	a880038f 	ldh	r2,14(r21)
  808c0c:	10002d16 	blt	r2,zero,808cc4 <___vfiprintf_internal_r+0x124>
  808c10:	aa40038b 	ldhu	r9,14(r21)
  808c14:	aa800717 	ldw	r10,28(r21)
  808c18:	aac00917 	ldw	r11,36(r21)
  808c1c:	dc401e04 	addi	r17,sp,120
  808c20:	d8803504 	addi	r2,sp,212
  808c24:	00c10004 	movi	r3,1024
  808c28:	423fff4c 	andi	r8,r8,65533
  808c2c:	800d883a 	mov	r6,r16
  808c30:	b009883a 	mov	r4,r22
  808c34:	880b883a 	mov	r5,r17
  808c38:	da00210d 	sth	r8,132(sp)
  808c3c:	da40218d 	sth	r9,134(sp)
  808c40:	da802515 	stw	r10,148(sp)
  808c44:	dac02715 	stw	r11,156(sp)
  808c48:	d8802215 	stw	r2,136(sp)
  808c4c:	d8c02315 	stw	r3,140(sp)
  808c50:	d8801e15 	stw	r2,120(sp)
  808c54:	d8c02015 	stw	r3,128(sp)
  808c58:	d8002415 	stw	zero,144(sp)
  808c5c:	0808ba00 	call	808ba0 <___vfiprintf_internal_r>
  808c60:	d8813a15 	stw	r2,1256(sp)
  808c64:	10000416 	blt	r2,zero,808c78 <___vfiprintf_internal_r+0xd8>
  808c68:	b009883a 	mov	r4,r22
  808c6c:	880b883a 	mov	r5,r17
  808c70:	0805af80 	call	805af8 <_fflush_r>
  808c74:	1001b01e 	bne	r2,zero,809338 <___vfiprintf_internal_r+0x798>
  808c78:	d880210b 	ldhu	r2,132(sp)
  808c7c:	1080100c 	andi	r2,r2,64
  808c80:	10000326 	beq	r2,zero,808c90 <___vfiprintf_internal_r+0xf0>
  808c84:	a880030b 	ldhu	r2,12(r21)
  808c88:	10801014 	ori	r2,r2,64
  808c8c:	a880030d 	sth	r2,12(r21)
  808c90:	d8813a17 	ldw	r2,1256(sp)
  808c94:	dfc14917 	ldw	ra,1316(sp)
  808c98:	df014817 	ldw	fp,1312(sp)
  808c9c:	ddc14717 	ldw	r23,1308(sp)
  808ca0:	dd814617 	ldw	r22,1304(sp)
  808ca4:	dd414517 	ldw	r21,1300(sp)
  808ca8:	dd014417 	ldw	r20,1296(sp)
  808cac:	dcc14317 	ldw	r19,1292(sp)
  808cb0:	dc814217 	ldw	r18,1288(sp)
  808cb4:	dc414117 	ldw	r17,1284(sp)
  808cb8:	dc014017 	ldw	r16,1280(sp)
  808cbc:	dec14a04 	addi	sp,sp,1320
  808cc0:	f800283a 	ret
  808cc4:	d8c00e04 	addi	r3,sp,56
  808cc8:	8029883a 	mov	r20,r16
  808ccc:	d8c00115 	stw	r3,4(sp)
  808cd0:	d8000315 	stw	zero,12(sp)
  808cd4:	d8000215 	stw	zero,8(sp)
  808cd8:	1825883a 	mov	r18,r3
  808cdc:	d8013a15 	stw	zero,1256(sp)
  808ce0:	d8013615 	stw	zero,1240(sp)
  808ce4:	a0800007 	ldb	r2,0(r20)
  808ce8:	10001926 	beq	r2,zero,808d50 <___vfiprintf_internal_r+0x1b0>
  808cec:	00c00944 	movi	r3,37
  808cf0:	10c01726 	beq	r2,r3,808d50 <___vfiprintf_internal_r+0x1b0>
  808cf4:	a021883a 	mov	r16,r20
  808cf8:	00000106 	br	808d00 <___vfiprintf_internal_r+0x160>
  808cfc:	10c00326 	beq	r2,r3,808d0c <___vfiprintf_internal_r+0x16c>
  808d00:	84000044 	addi	r16,r16,1
  808d04:	80800007 	ldb	r2,0(r16)
  808d08:	103ffc1e 	bne	r2,zero,808cfc <___vfiprintf_internal_r+0x15c>
  808d0c:	8523c83a 	sub	r17,r16,r20
  808d10:	88000e26 	beq	r17,zero,808d4c <___vfiprintf_internal_r+0x1ac>
  808d14:	d9400317 	ldw	r5,12(sp)
  808d18:	d9000217 	ldw	r4,8(sp)
  808d1c:	008001c4 	movi	r2,7
  808d20:	2c4b883a 	add	r5,r5,r17
  808d24:	21000044 	addi	r4,r4,1
  808d28:	95000015 	stw	r20,0(r18)
  808d2c:	d9400315 	stw	r5,12(sp)
  808d30:	94400115 	stw	r17,4(r18)
  808d34:	d9000215 	stw	r4,8(sp)
  808d38:	1101e816 	blt	r2,r4,8094dc <___vfiprintf_internal_r+0x93c>
  808d3c:	94800204 	addi	r18,r18,8
  808d40:	d9013a17 	ldw	r4,1256(sp)
  808d44:	2449883a 	add	r4,r4,r17
  808d48:	d9013a15 	stw	r4,1256(sp)
  808d4c:	8029883a 	mov	r20,r16
  808d50:	a0800007 	ldb	r2,0(r20)
  808d54:	10012e26 	beq	r2,zero,809210 <___vfiprintf_internal_r+0x670>
  808d58:	a5000044 	addi	r20,r20,1
  808d5c:	d8000005 	stb	zero,0(sp)
  808d60:	a0c00007 	ldb	r3,0(r20)
  808d64:	05ffffc4 	movi	r23,-1
  808d68:	d8013915 	stw	zero,1252(sp)
  808d6c:	d8013b15 	stw	zero,1260(sp)
  808d70:	180b883a 	mov	r5,r3
  808d74:	a5000044 	addi	r20,r20,1
  808d78:	28fff804 	addi	r3,r5,-32
  808d7c:	00801604 	movi	r2,88
  808d80:	10c06036 	bltu	r2,r3,808f04 <___vfiprintf_internal_r+0x364>
  808d84:	18c5883a 	add	r2,r3,r3
  808d88:	1085883a 	add	r2,r2,r2
  808d8c:	00c02074 	movhi	r3,129
  808d90:	18e36804 	addi	r3,r3,-29280
  808d94:	10c5883a 	add	r2,r2,r3
  808d98:	11000017 	ldw	r4,0(r2)
  808d9c:	2000683a 	jmp	r4
  808da0:	00809608 	cmpgei	r2,zero,600
  808da4:	00808f04 	movi	r2,572
  808da8:	00808f04 	movi	r2,572
  808dac:	008096b0 	cmpltui	r2,zero,602
  808db0:	00808f04 	movi	r2,572
  808db4:	00808f04 	movi	r2,572
  808db8:	00808f04 	movi	r2,572
  808dbc:	00808f04 	movi	r2,572
  808dc0:	00808f04 	movi	r2,572
  808dc4:	00808f04 	movi	r2,572
  808dc8:	00809590 	cmplti	r2,zero,598
  808dcc:	008096c4 	movi	r2,603
  808dd0:	00808f04 	movi	r2,572
  808dd4:	008095a8 	cmpgeui	r2,zero,598
  808dd8:	00809660 	cmpeqi	r2,zero,601
  808ddc:	00808f04 	movi	r2,572
  808de0:	0080964c 	andi	r2,zero,601
  808de4:	00809620 	cmpeqi	r2,zero,600
  808de8:	00809620 	cmpeqi	r2,zero,600
  808dec:	00809620 	cmpeqi	r2,zero,600
  808df0:	00809620 	cmpeqi	r2,zero,600
  808df4:	00809620 	cmpeqi	r2,zero,600
  808df8:	00809620 	cmpeqi	r2,zero,600
  808dfc:	00809620 	cmpeqi	r2,zero,600
  808e00:	00809620 	cmpeqi	r2,zero,600
  808e04:	00809620 	cmpeqi	r2,zero,600
  808e08:	00808f04 	movi	r2,572
  808e0c:	00808f04 	movi	r2,572
  808e10:	00808f04 	movi	r2,572
  808e14:	00808f04 	movi	r2,572
  808e18:	00808f04 	movi	r2,572
  808e1c:	00808f04 	movi	r2,572
  808e20:	00808f04 	movi	r2,572
  808e24:	00808f04 	movi	r2,572
  808e28:	00808f04 	movi	r2,572
  808e2c:	00808f04 	movi	r2,572
  808e30:	0080936c 	andhi	r2,zero,589
  808e34:	00808f04 	movi	r2,572
  808e38:	00808f04 	movi	r2,572
  808e3c:	00808f04 	movi	r2,572
  808e40:	00808f04 	movi	r2,572
  808e44:	00808f04 	movi	r2,572
  808e48:	00808f04 	movi	r2,572
  808e4c:	00808f04 	movi	r2,572
  808e50:	00808f04 	movi	r2,572
  808e54:	00808f04 	movi	r2,572
  808e58:	00808f04 	movi	r2,572
  808e5c:	00809420 	cmpeqi	r2,zero,592
  808e60:	00808f04 	movi	r2,572
  808e64:	00808f04 	movi	r2,572
  808e68:	00808f04 	movi	r2,572
  808e6c:	00808f04 	movi	r2,572
  808e70:	00808f04 	movi	r2,572
  808e74:	0080946c 	andhi	r2,zero,593
  808e78:	00808f04 	movi	r2,572
  808e7c:	00808f04 	movi	r2,572
  808e80:	0080975c 	xori	r2,zero,605
  808e84:	00808f04 	movi	r2,572
  808e88:	00808f04 	movi	r2,572
  808e8c:	00808f04 	movi	r2,572
  808e90:	00808f04 	movi	r2,572
  808e94:	00808f04 	movi	r2,572
  808e98:	00808f04 	movi	r2,572
  808e9c:	00808f04 	movi	r2,572
  808ea0:	00808f04 	movi	r2,572
  808ea4:	00808f04 	movi	r2,572
  808ea8:	00808f04 	movi	r2,572
  808eac:	00809734 	movhi	r2,604
  808eb0:	00809378 	rdprs	r2,zero,589
  808eb4:	00808f04 	movi	r2,572
  808eb8:	00808f04 	movi	r2,572
  808ebc:	00808f04 	movi	r2,572
  808ec0:	00809840 	call	80984 <__reset-0x77f67c>
  808ec4:	00809378 	rdprs	r2,zero,589
  808ec8:	00808f04 	movi	r2,572
  808ecc:	00808f04 	movi	r2,572
  808ed0:	00809794 	movui	r2,606
  808ed4:	00808f04 	movi	r2,572
  808ed8:	0080976c 	andhi	r2,zero,605
  808edc:	0080942c 	andhi	r2,zero,592
  808ee0:	008097fc 	xorhi	r2,zero,607
  808ee4:	00809854 	movui	r2,609
  808ee8:	00808f04 	movi	r2,572
  808eec:	008097b0 	cmpltui	r2,zero,606
  808ef0:	00808f04 	movi	r2,572
  808ef4:	00809478 	rdprs	r2,zero,593
  808ef8:	00808f04 	movi	r2,572
  808efc:	00808f04 	movi	r2,572
  808f00:	008096d4 	movui	r2,603
  808f04:	2800c226 	beq	r5,zero,809210 <___vfiprintf_internal_r+0x670>
  808f08:	07000044 	movi	fp,1
  808f0c:	d9000404 	addi	r4,sp,16
  808f10:	d9c13515 	stw	r7,1236(sp)
  808f14:	d9013c15 	stw	r4,1264(sp)
  808f18:	df013715 	stw	fp,1244(sp)
  808f1c:	d9400405 	stb	r5,16(sp)
  808f20:	d8000005 	stb	zero,0(sp)
  808f24:	d8013815 	stw	zero,1248(sp)
  808f28:	d9813b17 	ldw	r6,1260(sp)
  808f2c:	3080008c 	andi	r2,r6,2
  808f30:	1005003a 	cmpeq	r2,r2,zero
  808f34:	d8813e15 	stw	r2,1272(sp)
  808f38:	1000011e 	bne	r2,zero,808f40 <___vfiprintf_internal_r+0x3a0>
  808f3c:	e7000084 	addi	fp,fp,2
  808f40:	d8813b17 	ldw	r2,1260(sp)
  808f44:	1080210c 	andi	r2,r2,132
  808f48:	d8813d15 	stw	r2,1268(sp)
  808f4c:	10002a1e 	bne	r2,zero,808ff8 <___vfiprintf_internal_r+0x458>
  808f50:	d8c13917 	ldw	r3,1252(sp)
  808f54:	1f21c83a 	sub	r16,r3,fp
  808f58:	0400270e 	bge	zero,r16,808ff8 <___vfiprintf_internal_r+0x458>
  808f5c:	00800404 	movi	r2,16
  808f60:	1402c80e 	bge	r2,r16,809a84 <___vfiprintf_internal_r+0xee4>
  808f64:	d9400317 	ldw	r5,12(sp)
  808f68:	d9000217 	ldw	r4,8(sp)
  808f6c:	1023883a 	mov	r17,r2
  808f70:	05c02074 	movhi	r23,129
  808f74:	bdc28e04 	addi	r23,r23,2616
  808f78:	04c001c4 	movi	r19,7
  808f7c:	00000306 	br	808f8c <___vfiprintf_internal_r+0x3ec>
  808f80:	843ffc04 	addi	r16,r16,-16
  808f84:	94800204 	addi	r18,r18,8
  808f88:	8c00110e 	bge	r17,r16,808fd0 <___vfiprintf_internal_r+0x430>
  808f8c:	29400404 	addi	r5,r5,16
  808f90:	21000044 	addi	r4,r4,1
  808f94:	95c00015 	stw	r23,0(r18)
  808f98:	94400115 	stw	r17,4(r18)
  808f9c:	d9400315 	stw	r5,12(sp)
  808fa0:	d9000215 	stw	r4,8(sp)
  808fa4:	993ff60e 	bge	r19,r4,808f80 <___vfiprintf_internal_r+0x3e0>
  808fa8:	b009883a 	mov	r4,r22
  808fac:	a80b883a 	mov	r5,r21
  808fb0:	d9800104 	addi	r6,sp,4
  808fb4:	0808b480 	call	808b48 <__sprint_r>
  808fb8:	1000981e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  808fbc:	843ffc04 	addi	r16,r16,-16
  808fc0:	d9400317 	ldw	r5,12(sp)
  808fc4:	d9000217 	ldw	r4,8(sp)
  808fc8:	dc800e04 	addi	r18,sp,56
  808fcc:	8c3fef16 	blt	r17,r16,808f8c <___vfiprintf_internal_r+0x3ec>
  808fd0:	2c0b883a 	add	r5,r5,r16
  808fd4:	21000044 	addi	r4,r4,1
  808fd8:	008001c4 	movi	r2,7
  808fdc:	95c00015 	stw	r23,0(r18)
  808fe0:	94000115 	stw	r16,4(r18)
  808fe4:	d9400315 	stw	r5,12(sp)
  808fe8:	d9000215 	stw	r4,8(sp)
  808fec:	11015616 	blt	r2,r4,809548 <___vfiprintf_internal_r+0x9a8>
  808ff0:	94800204 	addi	r18,r18,8
  808ff4:	00000206 	br	809000 <___vfiprintf_internal_r+0x460>
  808ff8:	d9400317 	ldw	r5,12(sp)
  808ffc:	d9000217 	ldw	r4,8(sp)
  809000:	d8800007 	ldb	r2,0(sp)
  809004:	10000a26 	beq	r2,zero,809030 <___vfiprintf_internal_r+0x490>
  809008:	00800044 	movi	r2,1
  80900c:	29400044 	addi	r5,r5,1
  809010:	21000044 	addi	r4,r4,1
  809014:	90800115 	stw	r2,4(r18)
  809018:	008001c4 	movi	r2,7
  80901c:	96c00015 	stw	sp,0(r18)
  809020:	d9400315 	stw	r5,12(sp)
  809024:	d9000215 	stw	r4,8(sp)
  809028:	11013516 	blt	r2,r4,809500 <___vfiprintf_internal_r+0x960>
  80902c:	94800204 	addi	r18,r18,8
  809030:	d9813e17 	ldw	r6,1272(sp)
  809034:	30000b1e 	bne	r6,zero,809064 <___vfiprintf_internal_r+0x4c4>
  809038:	d8800044 	addi	r2,sp,1
  80903c:	29400084 	addi	r5,r5,2
  809040:	21000044 	addi	r4,r4,1
  809044:	90800015 	stw	r2,0(r18)
  809048:	00c00084 	movi	r3,2
  80904c:	008001c4 	movi	r2,7
  809050:	90c00115 	stw	r3,4(r18)
  809054:	d9400315 	stw	r5,12(sp)
  809058:	d9000215 	stw	r4,8(sp)
  80905c:	11013116 	blt	r2,r4,809524 <___vfiprintf_internal_r+0x984>
  809060:	94800204 	addi	r18,r18,8
  809064:	d8c13d17 	ldw	r3,1268(sp)
  809068:	00802004 	movi	r2,128
  80906c:	18807126 	beq	r3,r2,809234 <___vfiprintf_internal_r+0x694>
  809070:	d8813817 	ldw	r2,1248(sp)
  809074:	d8c13717 	ldw	r3,1244(sp)
  809078:	10e1c83a 	sub	r16,r2,r3
  80907c:	0400240e 	bge	zero,r16,809110 <___vfiprintf_internal_r+0x570>
  809080:	00800404 	movi	r2,16
  809084:	1402510e 	bge	r2,r16,8099cc <___vfiprintf_internal_r+0xe2c>
  809088:	1023883a 	mov	r17,r2
  80908c:	05c02074 	movhi	r23,129
  809090:	bdc28a04 	addi	r23,r23,2600
  809094:	04c001c4 	movi	r19,7
  809098:	00000306 	br	8090a8 <___vfiprintf_internal_r+0x508>
  80909c:	843ffc04 	addi	r16,r16,-16
  8090a0:	94800204 	addi	r18,r18,8
  8090a4:	8c00110e 	bge	r17,r16,8090ec <___vfiprintf_internal_r+0x54c>
  8090a8:	29400404 	addi	r5,r5,16
  8090ac:	21000044 	addi	r4,r4,1
  8090b0:	95c00015 	stw	r23,0(r18)
  8090b4:	94400115 	stw	r17,4(r18)
  8090b8:	d9400315 	stw	r5,12(sp)
  8090bc:	d9000215 	stw	r4,8(sp)
  8090c0:	993ff60e 	bge	r19,r4,80909c <___vfiprintf_internal_r+0x4fc>
  8090c4:	b009883a 	mov	r4,r22
  8090c8:	a80b883a 	mov	r5,r21
  8090cc:	d9800104 	addi	r6,sp,4
  8090d0:	0808b480 	call	808b48 <__sprint_r>
  8090d4:	1000511e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  8090d8:	843ffc04 	addi	r16,r16,-16
  8090dc:	d9400317 	ldw	r5,12(sp)
  8090e0:	d9000217 	ldw	r4,8(sp)
  8090e4:	dc800e04 	addi	r18,sp,56
  8090e8:	8c3fef16 	blt	r17,r16,8090a8 <___vfiprintf_internal_r+0x508>
  8090ec:	2c0b883a 	add	r5,r5,r16
  8090f0:	21000044 	addi	r4,r4,1
  8090f4:	008001c4 	movi	r2,7
  8090f8:	95c00015 	stw	r23,0(r18)
  8090fc:	94000115 	stw	r16,4(r18)
  809100:	d9400315 	stw	r5,12(sp)
  809104:	d9000215 	stw	r4,8(sp)
  809108:	1100eb16 	blt	r2,r4,8094b8 <___vfiprintf_internal_r+0x918>
  80910c:	94800204 	addi	r18,r18,8
  809110:	d9813717 	ldw	r6,1244(sp)
  809114:	d8813c17 	ldw	r2,1264(sp)
  809118:	21000044 	addi	r4,r4,1
  80911c:	298b883a 	add	r5,r5,r6
  809120:	90800015 	stw	r2,0(r18)
  809124:	008001c4 	movi	r2,7
  809128:	91800115 	stw	r6,4(r18)
  80912c:	d9400315 	stw	r5,12(sp)
  809130:	d9000215 	stw	r4,8(sp)
  809134:	11006b16 	blt	r2,r4,8092e4 <___vfiprintf_internal_r+0x744>
  809138:	90c00204 	addi	r3,r18,8
  80913c:	d9013b17 	ldw	r4,1260(sp)
  809140:	2080010c 	andi	r2,r4,4
  809144:	10002726 	beq	r2,zero,8091e4 <___vfiprintf_internal_r+0x644>
  809148:	d9813917 	ldw	r6,1252(sp)
  80914c:	3721c83a 	sub	r16,r6,fp
  809150:	0400240e 	bge	zero,r16,8091e4 <___vfiprintf_internal_r+0x644>
  809154:	00800404 	movi	r2,16
  809158:	1402720e 	bge	r2,r16,809b24 <___vfiprintf_internal_r+0xf84>
  80915c:	d9000217 	ldw	r4,8(sp)
  809160:	1023883a 	mov	r17,r2
  809164:	05c02074 	movhi	r23,129
  809168:	bdc28e04 	addi	r23,r23,2616
  80916c:	048001c4 	movi	r18,7
  809170:	00000306 	br	809180 <___vfiprintf_internal_r+0x5e0>
  809174:	843ffc04 	addi	r16,r16,-16
  809178:	18c00204 	addi	r3,r3,8
  80917c:	8c00110e 	bge	r17,r16,8091c4 <___vfiprintf_internal_r+0x624>
  809180:	29400404 	addi	r5,r5,16
  809184:	21000044 	addi	r4,r4,1
  809188:	1dc00015 	stw	r23,0(r3)
  80918c:	1c400115 	stw	r17,4(r3)
  809190:	d9400315 	stw	r5,12(sp)
  809194:	d9000215 	stw	r4,8(sp)
  809198:	913ff60e 	bge	r18,r4,809174 <___vfiprintf_internal_r+0x5d4>
  80919c:	b009883a 	mov	r4,r22
  8091a0:	a80b883a 	mov	r5,r21
  8091a4:	d9800104 	addi	r6,sp,4
  8091a8:	0808b480 	call	808b48 <__sprint_r>
  8091ac:	10001b1e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  8091b0:	843ffc04 	addi	r16,r16,-16
  8091b4:	d9400317 	ldw	r5,12(sp)
  8091b8:	d9000217 	ldw	r4,8(sp)
  8091bc:	d8c00e04 	addi	r3,sp,56
  8091c0:	8c3fef16 	blt	r17,r16,809180 <___vfiprintf_internal_r+0x5e0>
  8091c4:	2c0b883a 	add	r5,r5,r16
  8091c8:	21000044 	addi	r4,r4,1
  8091cc:	008001c4 	movi	r2,7
  8091d0:	1dc00015 	stw	r23,0(r3)
  8091d4:	1c000115 	stw	r16,4(r3)
  8091d8:	d9400315 	stw	r5,12(sp)
  8091dc:	d9000215 	stw	r4,8(sp)
  8091e0:	11005b16 	blt	r2,r4,809350 <___vfiprintf_internal_r+0x7b0>
  8091e4:	d8813917 	ldw	r2,1252(sp)
  8091e8:	1700010e 	bge	r2,fp,8091f0 <___vfiprintf_internal_r+0x650>
  8091ec:	e005883a 	mov	r2,fp
  8091f0:	d8c13a17 	ldw	r3,1256(sp)
  8091f4:	1887883a 	add	r3,r3,r2
  8091f8:	d8c13a15 	stw	r3,1256(sp)
  8091fc:	2800411e 	bne	r5,zero,809304 <___vfiprintf_internal_r+0x764>
  809200:	d9c13517 	ldw	r7,1236(sp)
  809204:	dc800e04 	addi	r18,sp,56
  809208:	d8000215 	stw	zero,8(sp)
  80920c:	003eb506 	br	808ce4 <___vfiprintf_internal_r+0x144>
  809210:	d8800317 	ldw	r2,12(sp)
  809214:	1002521e 	bne	r2,zero,809b60 <___vfiprintf_internal_r+0xfc0>
  809218:	d8000215 	stw	zero,8(sp)
  80921c:	a880030b 	ldhu	r2,12(r21)
  809220:	1080100c 	andi	r2,r2,64
  809224:	103e9a26 	beq	r2,zero,808c90 <___vfiprintf_internal_r+0xf0>
  809228:	013fffc4 	movi	r4,-1
  80922c:	d9013a15 	stw	r4,1256(sp)
  809230:	003e9706 	br	808c90 <___vfiprintf_internal_r+0xf0>
  809234:	d9813917 	ldw	r6,1252(sp)
  809238:	3721c83a 	sub	r16,r6,fp
  80923c:	043f8c0e 	bge	zero,r16,809070 <___vfiprintf_internal_r+0x4d0>
  809240:	00800404 	movi	r2,16
  809244:	14024c0e 	bge	r2,r16,809b78 <___vfiprintf_internal_r+0xfd8>
  809248:	1023883a 	mov	r17,r2
  80924c:	05c02074 	movhi	r23,129
  809250:	bdc28a04 	addi	r23,r23,2600
  809254:	04c001c4 	movi	r19,7
  809258:	00000306 	br	809268 <___vfiprintf_internal_r+0x6c8>
  80925c:	843ffc04 	addi	r16,r16,-16
  809260:	94800204 	addi	r18,r18,8
  809264:	8c00110e 	bge	r17,r16,8092ac <___vfiprintf_internal_r+0x70c>
  809268:	29400404 	addi	r5,r5,16
  80926c:	21000044 	addi	r4,r4,1
  809270:	95c00015 	stw	r23,0(r18)
  809274:	94400115 	stw	r17,4(r18)
  809278:	d9400315 	stw	r5,12(sp)
  80927c:	d9000215 	stw	r4,8(sp)
  809280:	993ff60e 	bge	r19,r4,80925c <___vfiprintf_internal_r+0x6bc>
  809284:	b009883a 	mov	r4,r22
  809288:	a80b883a 	mov	r5,r21
  80928c:	d9800104 	addi	r6,sp,4
  809290:	0808b480 	call	808b48 <__sprint_r>
  809294:	103fe11e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  809298:	843ffc04 	addi	r16,r16,-16
  80929c:	d9400317 	ldw	r5,12(sp)
  8092a0:	d9000217 	ldw	r4,8(sp)
  8092a4:	dc800e04 	addi	r18,sp,56
  8092a8:	8c3fef16 	blt	r17,r16,809268 <___vfiprintf_internal_r+0x6c8>
  8092ac:	2c0b883a 	add	r5,r5,r16
  8092b0:	21000044 	addi	r4,r4,1
  8092b4:	008001c4 	movi	r2,7
  8092b8:	95c00015 	stw	r23,0(r18)
  8092bc:	94000115 	stw	r16,4(r18)
  8092c0:	d9400315 	stw	r5,12(sp)
  8092c4:	d9000215 	stw	r4,8(sp)
  8092c8:	1100a816 	blt	r2,r4,80956c <___vfiprintf_internal_r+0x9cc>
  8092cc:	94800204 	addi	r18,r18,8
  8092d0:	003f6706 	br	809070 <___vfiprintf_internal_r+0x4d0>
  8092d4:	d9c13f15 	stw	r7,1276(sp)
  8092d8:	0805d900 	call	805d90 <__sinit>
  8092dc:	d9c13f17 	ldw	r7,1276(sp)
  8092e0:	003e4006 	br	808be4 <___vfiprintf_internal_r+0x44>
  8092e4:	b009883a 	mov	r4,r22
  8092e8:	a80b883a 	mov	r5,r21
  8092ec:	d9800104 	addi	r6,sp,4
  8092f0:	0808b480 	call	808b48 <__sprint_r>
  8092f4:	103fc91e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  8092f8:	d9400317 	ldw	r5,12(sp)
  8092fc:	d8c00e04 	addi	r3,sp,56
  809300:	003f8e06 	br	80913c <___vfiprintf_internal_r+0x59c>
  809304:	b009883a 	mov	r4,r22
  809308:	a80b883a 	mov	r5,r21
  80930c:	d9800104 	addi	r6,sp,4
  809310:	0808b480 	call	808b48 <__sprint_r>
  809314:	103fba26 	beq	r2,zero,809200 <___vfiprintf_internal_r+0x660>
  809318:	003fc006 	br	80921c <___vfiprintf_internal_r+0x67c>
  80931c:	b009883a 	mov	r4,r22
  809320:	a80b883a 	mov	r5,r21
  809324:	d9c13f15 	stw	r7,1276(sp)
  809328:	08040240 	call	804024 <__swsetup_r>
  80932c:	d9c13f17 	ldw	r7,1276(sp)
  809330:	103e3126 	beq	r2,zero,808bf8 <___vfiprintf_internal_r+0x58>
  809334:	003fbc06 	br	809228 <___vfiprintf_internal_r+0x688>
  809338:	00bfffc4 	movi	r2,-1
  80933c:	d8813a15 	stw	r2,1256(sp)
  809340:	d880210b 	ldhu	r2,132(sp)
  809344:	1080100c 	andi	r2,r2,64
  809348:	103e4e1e 	bne	r2,zero,808c84 <___vfiprintf_internal_r+0xe4>
  80934c:	003e5006 	br	808c90 <___vfiprintf_internal_r+0xf0>
  809350:	b009883a 	mov	r4,r22
  809354:	a80b883a 	mov	r5,r21
  809358:	d9800104 	addi	r6,sp,4
  80935c:	0808b480 	call	808b48 <__sprint_r>
  809360:	103fae1e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  809364:	d9400317 	ldw	r5,12(sp)
  809368:	003f9e06 	br	8091e4 <___vfiprintf_internal_r+0x644>
  80936c:	d8813b17 	ldw	r2,1260(sp)
  809370:	10800414 	ori	r2,r2,16
  809374:	d8813b15 	stw	r2,1260(sp)
  809378:	d8c13b17 	ldw	r3,1260(sp)
  80937c:	1880080c 	andi	r2,r3,32
  809380:	10009c1e 	bne	r2,zero,8095f4 <___vfiprintf_internal_r+0xa54>
  809384:	d9413b17 	ldw	r5,1260(sp)
  809388:	2880040c 	andi	r2,r5,16
  80938c:	1001b21e 	bne	r2,zero,809a58 <___vfiprintf_internal_r+0xeb8>
  809390:	d9813b17 	ldw	r6,1260(sp)
  809394:	3080100c 	andi	r2,r6,64
  809398:	1001af26 	beq	r2,zero,809a58 <___vfiprintf_internal_r+0xeb8>
  80939c:	3880000f 	ldh	r2,0(r7)
  8093a0:	39c00104 	addi	r7,r7,4
  8093a4:	d9c13515 	stw	r7,1236(sp)
  8093a8:	1023d7fa 	srai	r17,r2,31
  8093ac:	1021883a 	mov	r16,r2
  8093b0:	8801e016 	blt	r17,zero,809b34 <___vfiprintf_internal_r+0xf94>
  8093b4:	01000044 	movi	r4,1
  8093b8:	b8000416 	blt	r23,zero,8093cc <___vfiprintf_internal_r+0x82c>
  8093bc:	d9413b17 	ldw	r5,1260(sp)
  8093c0:	00bfdfc4 	movi	r2,-129
  8093c4:	288a703a 	and	r5,r5,r2
  8093c8:	d9413b15 	stw	r5,1260(sp)
  8093cc:	8444b03a 	or	r2,r16,r17
  8093d0:	1001271e 	bne	r2,zero,809870 <___vfiprintf_internal_r+0xcd0>
  8093d4:	b801261e 	bne	r23,zero,809870 <___vfiprintf_internal_r+0xcd0>
  8093d8:	20803fcc 	andi	r2,r4,255
  8093dc:	10017e26 	beq	r2,zero,8099d8 <___vfiprintf_internal_r+0xe38>
  8093e0:	d8c00e04 	addi	r3,sp,56
  8093e4:	df000404 	addi	fp,sp,16
  8093e8:	d8c13c15 	stw	r3,1264(sp)
  8093ec:	d8c13c17 	ldw	r3,1264(sp)
  8093f0:	ddc13815 	stw	r23,1248(sp)
  8093f4:	e0c5c83a 	sub	r2,fp,r3
  8093f8:	10800a04 	addi	r2,r2,40
  8093fc:	d8813715 	stw	r2,1244(sp)
  809400:	df013817 	ldw	fp,1248(sp)
  809404:	d9413717 	ldw	r5,1244(sp)
  809408:	e140010e 	bge	fp,r5,809410 <___vfiprintf_internal_r+0x870>
  80940c:	2839883a 	mov	fp,r5
  809410:	d8800007 	ldb	r2,0(sp)
  809414:	103ec426 	beq	r2,zero,808f28 <___vfiprintf_internal_r+0x388>
  809418:	e7000044 	addi	fp,fp,1
  80941c:	003ec206 	br	808f28 <___vfiprintf_internal_r+0x388>
  809420:	d9813b17 	ldw	r6,1260(sp)
  809424:	31800414 	ori	r6,r6,16
  809428:	d9813b15 	stw	r6,1260(sp)
  80942c:	d8c13b17 	ldw	r3,1260(sp)
  809430:	1880080c 	andi	r2,r3,32
  809434:	1000681e 	bne	r2,zero,8095d8 <___vfiprintf_internal_r+0xa38>
  809438:	d9413b17 	ldw	r5,1260(sp)
  80943c:	2880040c 	andi	r2,r5,16
  809440:	1001771e 	bne	r2,zero,809a20 <___vfiprintf_internal_r+0xe80>
  809444:	d9813b17 	ldw	r6,1260(sp)
  809448:	3080100c 	andi	r2,r6,64
  80944c:	10017426 	beq	r2,zero,809a20 <___vfiprintf_internal_r+0xe80>
  809450:	3c00000b 	ldhu	r16,0(r7)
  809454:	0009883a 	mov	r4,zero
  809458:	39c00104 	addi	r7,r7,4
  80945c:	0023883a 	mov	r17,zero
  809460:	d9c13515 	stw	r7,1236(sp)
  809464:	d8000005 	stb	zero,0(sp)
  809468:	003fd306 	br	8093b8 <___vfiprintf_internal_r+0x818>
  80946c:	d8813b17 	ldw	r2,1260(sp)
  809470:	10800414 	ori	r2,r2,16
  809474:	d8813b15 	stw	r2,1260(sp)
  809478:	d8c13b17 	ldw	r3,1260(sp)
  80947c:	1880080c 	andi	r2,r3,32
  809480:	10004e1e 	bne	r2,zero,8095bc <___vfiprintf_internal_r+0xa1c>
  809484:	d9413b17 	ldw	r5,1260(sp)
  809488:	2880040c 	andi	r2,r5,16
  80948c:	10016b1e 	bne	r2,zero,809a3c <___vfiprintf_internal_r+0xe9c>
  809490:	d9813b17 	ldw	r6,1260(sp)
  809494:	3080100c 	andi	r2,r6,64
  809498:	10016826 	beq	r2,zero,809a3c <___vfiprintf_internal_r+0xe9c>
  80949c:	3c00000b 	ldhu	r16,0(r7)
  8094a0:	01000044 	movi	r4,1
  8094a4:	39c00104 	addi	r7,r7,4
  8094a8:	0023883a 	mov	r17,zero
  8094ac:	d9c13515 	stw	r7,1236(sp)
  8094b0:	d8000005 	stb	zero,0(sp)
  8094b4:	003fc006 	br	8093b8 <___vfiprintf_internal_r+0x818>
  8094b8:	b009883a 	mov	r4,r22
  8094bc:	a80b883a 	mov	r5,r21
  8094c0:	d9800104 	addi	r6,sp,4
  8094c4:	0808b480 	call	808b48 <__sprint_r>
  8094c8:	103f541e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  8094cc:	d9400317 	ldw	r5,12(sp)
  8094d0:	d9000217 	ldw	r4,8(sp)
  8094d4:	dc800e04 	addi	r18,sp,56
  8094d8:	003f0d06 	br	809110 <___vfiprintf_internal_r+0x570>
  8094dc:	b009883a 	mov	r4,r22
  8094e0:	a80b883a 	mov	r5,r21
  8094e4:	d9800104 	addi	r6,sp,4
  8094e8:	d9c13f15 	stw	r7,1276(sp)
  8094ec:	0808b480 	call	808b48 <__sprint_r>
  8094f0:	d9c13f17 	ldw	r7,1276(sp)
  8094f4:	103f491e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  8094f8:	dc800e04 	addi	r18,sp,56
  8094fc:	003e1006 	br	808d40 <___vfiprintf_internal_r+0x1a0>
  809500:	b009883a 	mov	r4,r22
  809504:	a80b883a 	mov	r5,r21
  809508:	d9800104 	addi	r6,sp,4
  80950c:	0808b480 	call	808b48 <__sprint_r>
  809510:	103f421e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  809514:	d9400317 	ldw	r5,12(sp)
  809518:	d9000217 	ldw	r4,8(sp)
  80951c:	dc800e04 	addi	r18,sp,56
  809520:	003ec306 	br	809030 <___vfiprintf_internal_r+0x490>
  809524:	b009883a 	mov	r4,r22
  809528:	a80b883a 	mov	r5,r21
  80952c:	d9800104 	addi	r6,sp,4
  809530:	0808b480 	call	808b48 <__sprint_r>
  809534:	103f391e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  809538:	d9400317 	ldw	r5,12(sp)
  80953c:	d9000217 	ldw	r4,8(sp)
  809540:	dc800e04 	addi	r18,sp,56
  809544:	003ec706 	br	809064 <___vfiprintf_internal_r+0x4c4>
  809548:	b009883a 	mov	r4,r22
  80954c:	a80b883a 	mov	r5,r21
  809550:	d9800104 	addi	r6,sp,4
  809554:	0808b480 	call	808b48 <__sprint_r>
  809558:	103f301e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  80955c:	d9400317 	ldw	r5,12(sp)
  809560:	d9000217 	ldw	r4,8(sp)
  809564:	dc800e04 	addi	r18,sp,56
  809568:	003ea506 	br	809000 <___vfiprintf_internal_r+0x460>
  80956c:	b009883a 	mov	r4,r22
  809570:	a80b883a 	mov	r5,r21
  809574:	d9800104 	addi	r6,sp,4
  809578:	0808b480 	call	808b48 <__sprint_r>
  80957c:	103f271e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  809580:	d9400317 	ldw	r5,12(sp)
  809584:	d9000217 	ldw	r4,8(sp)
  809588:	dc800e04 	addi	r18,sp,56
  80958c:	003eb806 	br	809070 <___vfiprintf_internal_r+0x4d0>
  809590:	38c00017 	ldw	r3,0(r7)
  809594:	39c00104 	addi	r7,r7,4
  809598:	d8c13915 	stw	r3,1252(sp)
  80959c:	1800b20e 	bge	r3,zero,809868 <___vfiprintf_internal_r+0xcc8>
  8095a0:	00c7c83a 	sub	r3,zero,r3
  8095a4:	d8c13915 	stw	r3,1252(sp)
  8095a8:	d9013b17 	ldw	r4,1260(sp)
  8095ac:	a0c00007 	ldb	r3,0(r20)
  8095b0:	21000114 	ori	r4,r4,4
  8095b4:	d9013b15 	stw	r4,1260(sp)
  8095b8:	003ded06 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  8095bc:	3c000017 	ldw	r16,0(r7)
  8095c0:	3c400117 	ldw	r17,4(r7)
  8095c4:	39000204 	addi	r4,r7,8
  8095c8:	d9013515 	stw	r4,1236(sp)
  8095cc:	01000044 	movi	r4,1
  8095d0:	d8000005 	stb	zero,0(sp)
  8095d4:	003f7806 	br	8093b8 <___vfiprintf_internal_r+0x818>
  8095d8:	3c000017 	ldw	r16,0(r7)
  8095dc:	3c400117 	ldw	r17,4(r7)
  8095e0:	39000204 	addi	r4,r7,8
  8095e4:	d9013515 	stw	r4,1236(sp)
  8095e8:	0009883a 	mov	r4,zero
  8095ec:	d8000005 	stb	zero,0(sp)
  8095f0:	003f7106 	br	8093b8 <___vfiprintf_internal_r+0x818>
  8095f4:	3c000017 	ldw	r16,0(r7)
  8095f8:	3c400117 	ldw	r17,4(r7)
  8095fc:	39000204 	addi	r4,r7,8
  809600:	d9013515 	stw	r4,1236(sp)
  809604:	003f6a06 	br	8093b0 <___vfiprintf_internal_r+0x810>
  809608:	d8800007 	ldb	r2,0(sp)
  80960c:	1000961e 	bne	r2,zero,809868 <___vfiprintf_internal_r+0xcc8>
  809610:	00800804 	movi	r2,32
  809614:	d8800005 	stb	r2,0(sp)
  809618:	a0c00007 	ldb	r3,0(r20)
  80961c:	003dd406 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  809620:	0007883a 	mov	r3,zero
  809624:	01000244 	movi	r4,9
  809628:	188002a4 	muli	r2,r3,10
  80962c:	2885883a 	add	r2,r5,r2
  809630:	a1400007 	ldb	r5,0(r20)
  809634:	10fff404 	addi	r3,r2,-48
  809638:	a5000044 	addi	r20,r20,1
  80963c:	28bff404 	addi	r2,r5,-48
  809640:	20bff92e 	bgeu	r4,r2,809628 <___vfiprintf_internal_r+0xa88>
  809644:	d8c13915 	stw	r3,1252(sp)
  809648:	003dcb06 	br	808d78 <___vfiprintf_internal_r+0x1d8>
  80964c:	d9413b17 	ldw	r5,1260(sp)
  809650:	a0c00007 	ldb	r3,0(r20)
  809654:	29402014 	ori	r5,r5,128
  809658:	d9413b15 	stw	r5,1260(sp)
  80965c:	003dc406 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  809660:	a0c00007 	ldb	r3,0(r20)
  809664:	00800a84 	movi	r2,42
  809668:	a5000044 	addi	r20,r20,1
  80966c:	18816f26 	beq	r3,r2,809c2c <___vfiprintf_internal_r+0x108c>
  809670:	180b883a 	mov	r5,r3
  809674:	18bff404 	addi	r2,r3,-48
  809678:	00c00244 	movi	r3,9
  80967c:	18816936 	bltu	r3,r2,809c24 <___vfiprintf_internal_r+0x1084>
  809680:	000d883a 	mov	r6,zero
  809684:	308002a4 	muli	r2,r6,10
  809688:	1145883a 	add	r2,r2,r5
  80968c:	a1400007 	ldb	r5,0(r20)
  809690:	11bff404 	addi	r6,r2,-48
  809694:	a5000044 	addi	r20,r20,1
  809698:	28bff404 	addi	r2,r5,-48
  80969c:	18bff92e 	bgeu	r3,r2,809684 <___vfiprintf_internal_r+0xae4>
  8096a0:	302f883a 	mov	r23,r6
  8096a4:	303db40e 	bge	r6,zero,808d78 <___vfiprintf_internal_r+0x1d8>
  8096a8:	05ffffc4 	movi	r23,-1
  8096ac:	003db206 	br	808d78 <___vfiprintf_internal_r+0x1d8>
  8096b0:	d8813b17 	ldw	r2,1260(sp)
  8096b4:	a0c00007 	ldb	r3,0(r20)
  8096b8:	10800054 	ori	r2,r2,1
  8096bc:	d8813b15 	stw	r2,1260(sp)
  8096c0:	003dab06 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  8096c4:	00800ac4 	movi	r2,43
  8096c8:	d8800005 	stb	r2,0(sp)
  8096cc:	a0c00007 	ldb	r3,0(r20)
  8096d0:	003da706 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  8096d4:	01802074 	movhi	r6,129
  8096d8:	31820d04 	addi	r6,r6,2100
  8096dc:	d9813615 	stw	r6,1240(sp)
  8096e0:	d8c13b17 	ldw	r3,1260(sp)
  8096e4:	1880080c 	andi	r2,r3,32
  8096e8:	1000c226 	beq	r2,zero,8099f4 <___vfiprintf_internal_r+0xe54>
  8096ec:	3c000017 	ldw	r16,0(r7)
  8096f0:	3c400117 	ldw	r17,4(r7)
  8096f4:	39000204 	addi	r4,r7,8
  8096f8:	d9013515 	stw	r4,1236(sp)
  8096fc:	d9013b17 	ldw	r4,1260(sp)
  809700:	2080004c 	andi	r2,r4,1
  809704:	1005003a 	cmpeq	r2,r2,zero
  809708:	1000931e 	bne	r2,zero,809958 <___vfiprintf_internal_r+0xdb8>
  80970c:	8444b03a 	or	r2,r16,r17
  809710:	10009126 	beq	r2,zero,809958 <___vfiprintf_internal_r+0xdb8>
  809714:	21000094 	ori	r4,r4,2
  809718:	d9013b15 	stw	r4,1260(sp)
  80971c:	00800c04 	movi	r2,48
  809720:	01000084 	movi	r4,2
  809724:	d8800045 	stb	r2,1(sp)
  809728:	d9400085 	stb	r5,2(sp)
  80972c:	d8000005 	stb	zero,0(sp)
  809730:	003f2106 	br	8093b8 <___vfiprintf_internal_r+0x818>
  809734:	38800017 	ldw	r2,0(r7)
  809738:	07000044 	movi	fp,1
  80973c:	39c00104 	addi	r7,r7,4
  809740:	d9800404 	addi	r6,sp,16
  809744:	d9c13515 	stw	r7,1236(sp)
  809748:	d9813c15 	stw	r6,1264(sp)
  80974c:	df013715 	stw	fp,1244(sp)
  809750:	d8800405 	stb	r2,16(sp)
  809754:	d8000005 	stb	zero,0(sp)
  809758:	003df206 	br	808f24 <___vfiprintf_internal_r+0x384>
  80975c:	00802074 	movhi	r2,129
  809760:	10821804 	addi	r2,r2,2144
  809764:	d8813615 	stw	r2,1240(sp)
  809768:	003fdd06 	br	8096e0 <___vfiprintf_internal_r+0xb40>
  80976c:	d8c13b17 	ldw	r3,1260(sp)
  809770:	1880080c 	andi	r2,r3,32
  809774:	1000e326 	beq	r2,zero,809b04 <___vfiprintf_internal_r+0xf64>
  809778:	d9013a17 	ldw	r4,1256(sp)
  80977c:	38800017 	ldw	r2,0(r7)
  809780:	39c00104 	addi	r7,r7,4
  809784:	2007d7fa 	srai	r3,r4,31
  809788:	11000015 	stw	r4,0(r2)
  80978c:	10c00115 	stw	r3,4(r2)
  809790:	003d5406 	br	808ce4 <___vfiprintf_internal_r+0x144>
  809794:	a0c00007 	ldb	r3,0(r20)
  809798:	00801b04 	movi	r2,108
  80979c:	1880f926 	beq	r3,r2,809b84 <___vfiprintf_internal_r+0xfe4>
  8097a0:	d9013b17 	ldw	r4,1260(sp)
  8097a4:	21000414 	ori	r4,r4,16
  8097a8:	d9013b15 	stw	r4,1260(sp)
  8097ac:	003d7006 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  8097b0:	d8000005 	stb	zero,0(sp)
  8097b4:	39000017 	ldw	r4,0(r7)
  8097b8:	39c00104 	addi	r7,r7,4
  8097bc:	d9c13515 	stw	r7,1236(sp)
  8097c0:	d9013c15 	stw	r4,1264(sp)
  8097c4:	20010226 	beq	r4,zero,809bd0 <___vfiprintf_internal_r+0x1030>
  8097c8:	b800fc16 	blt	r23,zero,809bbc <___vfiprintf_internal_r+0x101c>
  8097cc:	d9013c17 	ldw	r4,1264(sp)
  8097d0:	000b883a 	mov	r5,zero
  8097d4:	b80d883a 	mov	r6,r23
  8097d8:	0806c9c0 	call	806c9c <memchr>
  8097dc:	10000426 	beq	r2,zero,8097f0 <___vfiprintf_internal_r+0xc50>
  8097e0:	d9813c17 	ldw	r6,1264(sp)
  8097e4:	1185c83a 	sub	r2,r2,r6
  8097e8:	d8813715 	stw	r2,1244(sp)
  8097ec:	b880010e 	bge	r23,r2,8097f4 <___vfiprintf_internal_r+0xc54>
  8097f0:	ddc13715 	stw	r23,1244(sp)
  8097f4:	d8013815 	stw	zero,1248(sp)
  8097f8:	003f0106 	br	809400 <___vfiprintf_internal_r+0x860>
  8097fc:	d8813b17 	ldw	r2,1260(sp)
  809800:	3c000017 	ldw	r16,0(r7)
  809804:	00c02074 	movhi	r3,129
  809808:	18c20d04 	addi	r3,r3,2100
  80980c:	10800094 	ori	r2,r2,2
  809810:	d8813b15 	stw	r2,1260(sp)
  809814:	39c00104 	addi	r7,r7,4
  809818:	d8c13615 	stw	r3,1240(sp)
  80981c:	00800c04 	movi	r2,48
  809820:	00c01e04 	movi	r3,120
  809824:	0023883a 	mov	r17,zero
  809828:	01000084 	movi	r4,2
  80982c:	d9c13515 	stw	r7,1236(sp)
  809830:	d8800045 	stb	r2,1(sp)
  809834:	d8c00085 	stb	r3,2(sp)
  809838:	d8000005 	stb	zero,0(sp)
  80983c:	003ede06 	br	8093b8 <___vfiprintf_internal_r+0x818>
  809840:	d9813b17 	ldw	r6,1260(sp)
  809844:	a0c00007 	ldb	r3,0(r20)
  809848:	31801014 	ori	r6,r6,64
  80984c:	d9813b15 	stw	r6,1260(sp)
  809850:	003d4706 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  809854:	d9413b17 	ldw	r5,1260(sp)
  809858:	a0c00007 	ldb	r3,0(r20)
  80985c:	29400814 	ori	r5,r5,32
  809860:	d9413b15 	stw	r5,1260(sp)
  809864:	003d4206 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  809868:	a0c00007 	ldb	r3,0(r20)
  80986c:	003d4006 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  809870:	20c03fcc 	andi	r3,r4,255
  809874:	00800044 	movi	r2,1
  809878:	18802b26 	beq	r3,r2,809928 <___vfiprintf_internal_r+0xd88>
  80987c:	18800b36 	bltu	r3,r2,8098ac <___vfiprintf_internal_r+0xd0c>
  809880:	00800084 	movi	r2,2
  809884:	18808426 	beq	r3,r2,809a98 <___vfiprintf_internal_r+0xef8>
  809888:	01002074 	movhi	r4,129
  80988c:	21021d04 	addi	r4,r4,2164
  809890:	ddc13815 	stw	r23,1248(sp)
  809894:	080206c0 	call	80206c <strlen>
  809898:	d8813715 	stw	r2,1244(sp)
  80989c:	00802074 	movhi	r2,129
  8098a0:	10821d04 	addi	r2,r2,2164
  8098a4:	d8813c15 	stw	r2,1264(sp)
  8098a8:	003ed506 	br	809400 <___vfiprintf_internal_r+0x860>
  8098ac:	d8800e04 	addi	r2,sp,56
  8098b0:	df000404 	addi	fp,sp,16
  8098b4:	d8813c15 	stw	r2,1264(sp)
  8098b8:	880a977a 	slli	r5,r17,29
  8098bc:	8004d0fa 	srli	r2,r16,3
  8098c0:	8806d0fa 	srli	r3,r17,3
  8098c4:	810001cc 	andi	r4,r16,7
  8098c8:	2884b03a 	or	r2,r5,r2
  8098cc:	d9413c17 	ldw	r5,1264(sp)
  8098d0:	21000c04 	addi	r4,r4,48
  8098d4:	1021883a 	mov	r16,r2
  8098d8:	297fffc4 	addi	r5,r5,-1
  8098dc:	d9413c15 	stw	r5,1264(sp)
  8098e0:	29000005 	stb	r4,0(r5)
  8098e4:	10cab03a 	or	r5,r2,r3
  8098e8:	1823883a 	mov	r17,r3
  8098ec:	283ff21e 	bne	r5,zero,8098b8 <___vfiprintf_internal_r+0xd18>
  8098f0:	d9813b17 	ldw	r6,1260(sp)
  8098f4:	3080004c 	andi	r2,r6,1
  8098f8:	1005003a 	cmpeq	r2,r2,zero
  8098fc:	103ebb1e 	bne	r2,zero,8093ec <___vfiprintf_internal_r+0x84c>
  809900:	20803fcc 	andi	r2,r4,255
  809904:	1080201c 	xori	r2,r2,128
  809908:	10bfe004 	addi	r2,r2,-128
  80990c:	00c00c04 	movi	r3,48
  809910:	10feb626 	beq	r2,r3,8093ec <___vfiprintf_internal_r+0x84c>
  809914:	d8813c17 	ldw	r2,1264(sp)
  809918:	10bfffc4 	addi	r2,r2,-1
  80991c:	d8813c15 	stw	r2,1264(sp)
  809920:	10c00005 	stb	r3,0(r2)
  809924:	003eb106 	br	8093ec <___vfiprintf_internal_r+0x84c>
  809928:	88800068 	cmpgeui	r2,r17,1
  80992c:	10000d1e 	bne	r2,zero,809964 <___vfiprintf_internal_r+0xdc4>
  809930:	8800021e 	bne	r17,zero,80993c <___vfiprintf_internal_r+0xd9c>
  809934:	00800244 	movi	r2,9
  809938:	14000a36 	bltu	r2,r16,809964 <___vfiprintf_internal_r+0xdc4>
  80993c:	d9800dc4 	addi	r6,sp,55
  809940:	df000404 	addi	fp,sp,16
  809944:	d9813c15 	stw	r6,1264(sp)
  809948:	d8c13c17 	ldw	r3,1264(sp)
  80994c:	80800c04 	addi	r2,r16,48
  809950:	18800005 	stb	r2,0(r3)
  809954:	003ea506 	br	8093ec <___vfiprintf_internal_r+0x84c>
  809958:	01000084 	movi	r4,2
  80995c:	d8000005 	stb	zero,0(sp)
  809960:	003e9506 	br	8093b8 <___vfiprintf_internal_r+0x818>
  809964:	df000404 	addi	fp,sp,16
  809968:	dcc00e04 	addi	r19,sp,56
  80996c:	8009883a 	mov	r4,r16
  809970:	880b883a 	mov	r5,r17
  809974:	01800284 	movi	r6,10
  809978:	000f883a 	mov	r7,zero
  80997c:	080a6d80 	call	80a6d8 <__umoddi3>
  809980:	12000c04 	addi	r8,r2,48
  809984:	9cffffc4 	addi	r19,r19,-1
  809988:	8009883a 	mov	r4,r16
  80998c:	880b883a 	mov	r5,r17
  809990:	01800284 	movi	r6,10
  809994:	000f883a 	mov	r7,zero
  809998:	9a000005 	stb	r8,0(r19)
  80999c:	080a0fc0 	call	80a0fc <__udivdi3>
  8099a0:	1009883a 	mov	r4,r2
  8099a4:	1021883a 	mov	r16,r2
  8099a8:	18800068 	cmpgeui	r2,r3,1
  8099ac:	1823883a 	mov	r17,r3
  8099b0:	103fee1e 	bne	r2,zero,80996c <___vfiprintf_internal_r+0xdcc>
  8099b4:	1800021e 	bne	r3,zero,8099c0 <___vfiprintf_internal_r+0xe20>
  8099b8:	00800244 	movi	r2,9
  8099bc:	113feb36 	bltu	r2,r4,80996c <___vfiprintf_internal_r+0xdcc>
  8099c0:	9cffffc4 	addi	r19,r19,-1
  8099c4:	dcc13c15 	stw	r19,1264(sp)
  8099c8:	003fdf06 	br	809948 <___vfiprintf_internal_r+0xda8>
  8099cc:	05c02074 	movhi	r23,129
  8099d0:	bdc28a04 	addi	r23,r23,2600
  8099d4:	003dc506 	br	8090ec <___vfiprintf_internal_r+0x54c>
  8099d8:	d9013b17 	ldw	r4,1260(sp)
  8099dc:	2080004c 	andi	r2,r4,1
  8099e0:	1000421e 	bne	r2,zero,809aec <___vfiprintf_internal_r+0xf4c>
  8099e4:	d9400e04 	addi	r5,sp,56
  8099e8:	df000404 	addi	fp,sp,16
  8099ec:	d9413c15 	stw	r5,1264(sp)
  8099f0:	003e7e06 	br	8093ec <___vfiprintf_internal_r+0x84c>
  8099f4:	d9813b17 	ldw	r6,1260(sp)
  8099f8:	3080040c 	andi	r2,r6,16
  8099fc:	10001c1e 	bne	r2,zero,809a70 <___vfiprintf_internal_r+0xed0>
  809a00:	d8c13b17 	ldw	r3,1260(sp)
  809a04:	1880100c 	andi	r2,r3,64
  809a08:	10001926 	beq	r2,zero,809a70 <___vfiprintf_internal_r+0xed0>
  809a0c:	3c00000b 	ldhu	r16,0(r7)
  809a10:	0023883a 	mov	r17,zero
  809a14:	39c00104 	addi	r7,r7,4
  809a18:	d9c13515 	stw	r7,1236(sp)
  809a1c:	003f3706 	br	8096fc <___vfiprintf_internal_r+0xb5c>
  809a20:	3c000017 	ldw	r16,0(r7)
  809a24:	0009883a 	mov	r4,zero
  809a28:	39c00104 	addi	r7,r7,4
  809a2c:	0023883a 	mov	r17,zero
  809a30:	d9c13515 	stw	r7,1236(sp)
  809a34:	d8000005 	stb	zero,0(sp)
  809a38:	003e5f06 	br	8093b8 <___vfiprintf_internal_r+0x818>
  809a3c:	3c000017 	ldw	r16,0(r7)
  809a40:	01000044 	movi	r4,1
  809a44:	39c00104 	addi	r7,r7,4
  809a48:	0023883a 	mov	r17,zero
  809a4c:	d9c13515 	stw	r7,1236(sp)
  809a50:	d8000005 	stb	zero,0(sp)
  809a54:	003e5806 	br	8093b8 <___vfiprintf_internal_r+0x818>
  809a58:	38800017 	ldw	r2,0(r7)
  809a5c:	39c00104 	addi	r7,r7,4
  809a60:	d9c13515 	stw	r7,1236(sp)
  809a64:	1023d7fa 	srai	r17,r2,31
  809a68:	1021883a 	mov	r16,r2
  809a6c:	003e5006 	br	8093b0 <___vfiprintf_internal_r+0x810>
  809a70:	3c000017 	ldw	r16,0(r7)
  809a74:	0023883a 	mov	r17,zero
  809a78:	39c00104 	addi	r7,r7,4
  809a7c:	d9c13515 	stw	r7,1236(sp)
  809a80:	003f1e06 	br	8096fc <___vfiprintf_internal_r+0xb5c>
  809a84:	d9400317 	ldw	r5,12(sp)
  809a88:	d9000217 	ldw	r4,8(sp)
  809a8c:	05c02074 	movhi	r23,129
  809a90:	bdc28e04 	addi	r23,r23,2616
  809a94:	003d4e06 	br	808fd0 <___vfiprintf_internal_r+0x430>
  809a98:	d9000e04 	addi	r4,sp,56
  809a9c:	df000404 	addi	fp,sp,16
  809aa0:	d9013c15 	stw	r4,1264(sp)
  809aa4:	d9813617 	ldw	r6,1240(sp)
  809aa8:	880a973a 	slli	r5,r17,28
  809aac:	8004d13a 	srli	r2,r16,4
  809ab0:	810003cc 	andi	r4,r16,15
  809ab4:	3109883a 	add	r4,r6,r4
  809ab8:	2884b03a 	or	r2,r5,r2
  809abc:	21400003 	ldbu	r5,0(r4)
  809ac0:	d9013c17 	ldw	r4,1264(sp)
  809ac4:	8806d13a 	srli	r3,r17,4
  809ac8:	1021883a 	mov	r16,r2
  809acc:	213fffc4 	addi	r4,r4,-1
  809ad0:	d9013c15 	stw	r4,1264(sp)
  809ad4:	d9813c17 	ldw	r6,1264(sp)
  809ad8:	10c8b03a 	or	r4,r2,r3
  809adc:	1823883a 	mov	r17,r3
  809ae0:	31400005 	stb	r5,0(r6)
  809ae4:	203fef1e 	bne	r4,zero,809aa4 <___vfiprintf_internal_r+0xf04>
  809ae8:	003e4006 	br	8093ec <___vfiprintf_internal_r+0x84c>
  809aec:	00800c04 	movi	r2,48
  809af0:	d9800dc4 	addi	r6,sp,55
  809af4:	df000404 	addi	fp,sp,16
  809af8:	d8800dc5 	stb	r2,55(sp)
  809afc:	d9813c15 	stw	r6,1264(sp)
  809b00:	003e3a06 	br	8093ec <___vfiprintf_internal_r+0x84c>
  809b04:	d9413b17 	ldw	r5,1260(sp)
  809b08:	2880040c 	andi	r2,r5,16
  809b0c:	10002326 	beq	r2,zero,809b9c <___vfiprintf_internal_r+0xffc>
  809b10:	38800017 	ldw	r2,0(r7)
  809b14:	d9813a17 	ldw	r6,1256(sp)
  809b18:	39c00104 	addi	r7,r7,4
  809b1c:	11800015 	stw	r6,0(r2)
  809b20:	003c7006 	br	808ce4 <___vfiprintf_internal_r+0x144>
  809b24:	d9000217 	ldw	r4,8(sp)
  809b28:	05c02074 	movhi	r23,129
  809b2c:	bdc28e04 	addi	r23,r23,2616
  809b30:	003da406 	br	8091c4 <___vfiprintf_internal_r+0x624>
  809b34:	0005883a 	mov	r2,zero
  809b38:	1409c83a 	sub	r4,r2,r16
  809b3c:	1105803a 	cmpltu	r2,r2,r4
  809b40:	044bc83a 	sub	r5,zero,r17
  809b44:	2885c83a 	sub	r2,r5,r2
  809b48:	2021883a 	mov	r16,r4
  809b4c:	1023883a 	mov	r17,r2
  809b50:	01000044 	movi	r4,1
  809b54:	00800b44 	movi	r2,45
  809b58:	d8800005 	stb	r2,0(sp)
  809b5c:	003e1606 	br	8093b8 <___vfiprintf_internal_r+0x818>
  809b60:	b009883a 	mov	r4,r22
  809b64:	a80b883a 	mov	r5,r21
  809b68:	d9800104 	addi	r6,sp,4
  809b6c:	0808b480 	call	808b48 <__sprint_r>
  809b70:	103daa1e 	bne	r2,zero,80921c <___vfiprintf_internal_r+0x67c>
  809b74:	003da806 	br	809218 <___vfiprintf_internal_r+0x678>
  809b78:	05c02074 	movhi	r23,129
  809b7c:	bdc28a04 	addi	r23,r23,2600
  809b80:	003dca06 	br	8092ac <___vfiprintf_internal_r+0x70c>
  809b84:	d8813b17 	ldw	r2,1260(sp)
  809b88:	a5000044 	addi	r20,r20,1
  809b8c:	a0c00007 	ldb	r3,0(r20)
  809b90:	10800814 	ori	r2,r2,32
  809b94:	d8813b15 	stw	r2,1260(sp)
  809b98:	003c7506 	br	808d70 <___vfiprintf_internal_r+0x1d0>
  809b9c:	d8c13b17 	ldw	r3,1260(sp)
  809ba0:	1880100c 	andi	r2,r3,64
  809ba4:	10001a26 	beq	r2,zero,809c10 <___vfiprintf_internal_r+0x1070>
  809ba8:	38800017 	ldw	r2,0(r7)
  809bac:	d9013a17 	ldw	r4,1256(sp)
  809bb0:	39c00104 	addi	r7,r7,4
  809bb4:	1100000d 	sth	r4,0(r2)
  809bb8:	003c4a06 	br	808ce4 <___vfiprintf_internal_r+0x144>
  809bbc:	d9013c17 	ldw	r4,1264(sp)
  809bc0:	080206c0 	call	80206c <strlen>
  809bc4:	d8813715 	stw	r2,1244(sp)
  809bc8:	d8013815 	stw	zero,1248(sp)
  809bcc:	003e0c06 	br	809400 <___vfiprintf_internal_r+0x860>
  809bd0:	00800184 	movi	r2,6
  809bd4:	15c00836 	bltu	r2,r23,809bf8 <___vfiprintf_internal_r+0x1058>
  809bd8:	b839883a 	mov	fp,r23
  809bdc:	b800010e 	bge	r23,zero,809be4 <___vfiprintf_internal_r+0x1044>
  809be0:	0039883a 	mov	fp,zero
  809be4:	01402074 	movhi	r5,129
  809be8:	29421604 	addi	r5,r5,2136
  809bec:	ddc13715 	stw	r23,1244(sp)
  809bf0:	d9413c15 	stw	r5,1264(sp)
  809bf4:	003ccb06 	br	808f24 <___vfiprintf_internal_r+0x384>
  809bf8:	01402074 	movhi	r5,129
  809bfc:	29421604 	addi	r5,r5,2136
  809c00:	1039883a 	mov	fp,r2
  809c04:	d9413c15 	stw	r5,1264(sp)
  809c08:	d8813715 	stw	r2,1244(sp)
  809c0c:	003cc506 	br	808f24 <___vfiprintf_internal_r+0x384>
  809c10:	38800017 	ldw	r2,0(r7)
  809c14:	d9413a17 	ldw	r5,1256(sp)
  809c18:	39c00104 	addi	r7,r7,4
  809c1c:	11400015 	stw	r5,0(r2)
  809c20:	003c3006 	br	808ce4 <___vfiprintf_internal_r+0x144>
  809c24:	002f883a 	mov	r23,zero
  809c28:	003c5306 	br	808d78 <___vfiprintf_internal_r+0x1d8>
  809c2c:	3dc00017 	ldw	r23,0(r7)
  809c30:	39c00104 	addi	r7,r7,4
  809c34:	b83f0c0e 	bge	r23,zero,809868 <___vfiprintf_internal_r+0xcc8>
  809c38:	a0c00007 	ldb	r3,0(r20)
  809c3c:	05ffffc4 	movi	r23,-1
  809c40:	003c4b06 	br	808d70 <___vfiprintf_internal_r+0x1d0>

00809c44 <__vfiprintf_internal>:
  809c44:	00802074 	movhi	r2,129
  809c48:	1089eb04 	addi	r2,r2,10156
  809c4c:	2013883a 	mov	r9,r4
  809c50:	11000017 	ldw	r4,0(r2)
  809c54:	2805883a 	mov	r2,r5
  809c58:	300f883a 	mov	r7,r6
  809c5c:	480b883a 	mov	r5,r9
  809c60:	100d883a 	mov	r6,r2
  809c64:	0808ba01 	jmpi	808ba0 <___vfiprintf_internal_r>

00809c68 <_write_r>:
  809c68:	defffd04 	addi	sp,sp,-12
  809c6c:	dc000015 	stw	r16,0(sp)
  809c70:	04002074 	movhi	r16,129
  809c74:	84110404 	addi	r16,r16,17424
  809c78:	dc400115 	stw	r17,4(sp)
  809c7c:	80000015 	stw	zero,0(r16)
  809c80:	2023883a 	mov	r17,r4
  809c84:	2809883a 	mov	r4,r5
  809c88:	300b883a 	mov	r5,r6
  809c8c:	380d883a 	mov	r6,r7
  809c90:	dfc00215 	stw	ra,8(sp)
  809c94:	080d2e00 	call	80d2e0 <write>
  809c98:	1007883a 	mov	r3,r2
  809c9c:	00bfffc4 	movi	r2,-1
  809ca0:	18800626 	beq	r3,r2,809cbc <_write_r+0x54>
  809ca4:	1805883a 	mov	r2,r3
  809ca8:	dfc00217 	ldw	ra,8(sp)
  809cac:	dc400117 	ldw	r17,4(sp)
  809cb0:	dc000017 	ldw	r16,0(sp)
  809cb4:	dec00304 	addi	sp,sp,12
  809cb8:	f800283a 	ret
  809cbc:	80800017 	ldw	r2,0(r16)
  809cc0:	103ff826 	beq	r2,zero,809ca4 <_write_r+0x3c>
  809cc4:	88800015 	stw	r2,0(r17)
  809cc8:	1805883a 	mov	r2,r3
  809ccc:	dfc00217 	ldw	ra,8(sp)
  809cd0:	dc400117 	ldw	r17,4(sp)
  809cd4:	dc000017 	ldw	r16,0(sp)
  809cd8:	dec00304 	addi	sp,sp,12
  809cdc:	f800283a 	ret

00809ce0 <_calloc_r>:
  809ce0:	298b383a 	mul	r5,r5,r6
  809ce4:	defffe04 	addi	sp,sp,-8
  809ce8:	dc000015 	stw	r16,0(sp)
  809cec:	dfc00115 	stw	ra,4(sp)
  809cf0:	08016bc0 	call	8016bc <_malloc_r>
  809cf4:	1021883a 	mov	r16,r2
  809cf8:	01c00904 	movi	r7,36
  809cfc:	10000d26 	beq	r2,zero,809d34 <_calloc_r+0x54>
  809d00:	10ffff17 	ldw	r3,-4(r2)
  809d04:	1009883a 	mov	r4,r2
  809d08:	00bfff04 	movi	r2,-4
  809d0c:	1886703a 	and	r3,r3,r2
  809d10:	1887883a 	add	r3,r3,r2
  809d14:	180d883a 	mov	r6,r3
  809d18:	000b883a 	mov	r5,zero
  809d1c:	38c01736 	bltu	r7,r3,809d7c <_calloc_r+0x9c>
  809d20:	008004c4 	movi	r2,19
  809d24:	10c00836 	bltu	r2,r3,809d48 <_calloc_r+0x68>
  809d28:	20000215 	stw	zero,8(r4)
  809d2c:	20000015 	stw	zero,0(r4)
  809d30:	20000115 	stw	zero,4(r4)
  809d34:	8005883a 	mov	r2,r16
  809d38:	dfc00117 	ldw	ra,4(sp)
  809d3c:	dc000017 	ldw	r16,0(sp)
  809d40:	dec00204 	addi	sp,sp,8
  809d44:	f800283a 	ret
  809d48:	008006c4 	movi	r2,27
  809d4c:	80000015 	stw	zero,0(r16)
  809d50:	80000115 	stw	zero,4(r16)
  809d54:	81000204 	addi	r4,r16,8
  809d58:	10fff32e 	bgeu	r2,r3,809d28 <_calloc_r+0x48>
  809d5c:	80000215 	stw	zero,8(r16)
  809d60:	80000315 	stw	zero,12(r16)
  809d64:	81000404 	addi	r4,r16,16
  809d68:	19ffef1e 	bne	r3,r7,809d28 <_calloc_r+0x48>
  809d6c:	81000604 	addi	r4,r16,24
  809d70:	80000415 	stw	zero,16(r16)
  809d74:	80000515 	stw	zero,20(r16)
  809d78:	003feb06 	br	809d28 <_calloc_r+0x48>
  809d7c:	0806f000 	call	806f00 <memset>
  809d80:	8005883a 	mov	r2,r16
  809d84:	dfc00117 	ldw	ra,4(sp)
  809d88:	dc000017 	ldw	r16,0(sp)
  809d8c:	dec00204 	addi	sp,sp,8
  809d90:	f800283a 	ret

00809d94 <_close_r>:
  809d94:	defffd04 	addi	sp,sp,-12
  809d98:	dc000015 	stw	r16,0(sp)
  809d9c:	04002074 	movhi	r16,129
  809da0:	84110404 	addi	r16,r16,17424
  809da4:	dc400115 	stw	r17,4(sp)
  809da8:	80000015 	stw	zero,0(r16)
  809dac:	2023883a 	mov	r17,r4
  809db0:	2809883a 	mov	r4,r5
  809db4:	dfc00215 	stw	ra,8(sp)
  809db8:	080c52c0 	call	80c52c <close>
  809dbc:	1007883a 	mov	r3,r2
  809dc0:	00bfffc4 	movi	r2,-1
  809dc4:	18800626 	beq	r3,r2,809de0 <_close_r+0x4c>
  809dc8:	1805883a 	mov	r2,r3
  809dcc:	dfc00217 	ldw	ra,8(sp)
  809dd0:	dc400117 	ldw	r17,4(sp)
  809dd4:	dc000017 	ldw	r16,0(sp)
  809dd8:	dec00304 	addi	sp,sp,12
  809ddc:	f800283a 	ret
  809de0:	80800017 	ldw	r2,0(r16)
  809de4:	103ff826 	beq	r2,zero,809dc8 <_close_r+0x34>
  809de8:	88800015 	stw	r2,0(r17)
  809dec:	1805883a 	mov	r2,r3
  809df0:	dfc00217 	ldw	ra,8(sp)
  809df4:	dc400117 	ldw	r17,4(sp)
  809df8:	dc000017 	ldw	r16,0(sp)
  809dfc:	dec00304 	addi	sp,sp,12
  809e00:	f800283a 	ret

00809e04 <_fclose_r>:
  809e04:	defffc04 	addi	sp,sp,-16
  809e08:	dc400115 	stw	r17,4(sp)
  809e0c:	dc000015 	stw	r16,0(sp)
  809e10:	dfc00315 	stw	ra,12(sp)
  809e14:	dc800215 	stw	r18,8(sp)
  809e18:	2821883a 	mov	r16,r5
  809e1c:	2023883a 	mov	r17,r4
  809e20:	28002926 	beq	r5,zero,809ec8 <_fclose_r+0xc4>
  809e24:	0805d800 	call	805d80 <__sfp_lock_acquire>
  809e28:	88000226 	beq	r17,zero,809e34 <_fclose_r+0x30>
  809e2c:	88800e17 	ldw	r2,56(r17)
  809e30:	10002d26 	beq	r2,zero,809ee8 <_fclose_r+0xe4>
  809e34:	8080030f 	ldh	r2,12(r16)
  809e38:	10002226 	beq	r2,zero,809ec4 <_fclose_r+0xc0>
  809e3c:	8809883a 	mov	r4,r17
  809e40:	800b883a 	mov	r5,r16
  809e44:	0805af80 	call	805af8 <_fflush_r>
  809e48:	1025883a 	mov	r18,r2
  809e4c:	80800b17 	ldw	r2,44(r16)
  809e50:	10000426 	beq	r2,zero,809e64 <_fclose_r+0x60>
  809e54:	81400717 	ldw	r5,28(r16)
  809e58:	8809883a 	mov	r4,r17
  809e5c:	103ee83a 	callr	r2
  809e60:	10002a16 	blt	r2,zero,809f0c <_fclose_r+0x108>
  809e64:	8080030b 	ldhu	r2,12(r16)
  809e68:	1080200c 	andi	r2,r2,128
  809e6c:	1000231e 	bne	r2,zero,809efc <_fclose_r+0xf8>
  809e70:	81400c17 	ldw	r5,48(r16)
  809e74:	28000526 	beq	r5,zero,809e8c <_fclose_r+0x88>
  809e78:	80801004 	addi	r2,r16,64
  809e7c:	28800226 	beq	r5,r2,809e88 <_fclose_r+0x84>
  809e80:	8809883a 	mov	r4,r17
  809e84:	08061140 	call	806114 <_free_r>
  809e88:	80000c15 	stw	zero,48(r16)
  809e8c:	81401117 	ldw	r5,68(r16)
  809e90:	28000326 	beq	r5,zero,809ea0 <_fclose_r+0x9c>
  809e94:	8809883a 	mov	r4,r17
  809e98:	08061140 	call	806114 <_free_r>
  809e9c:	80001115 	stw	zero,68(r16)
  809ea0:	8000030d 	sth	zero,12(r16)
  809ea4:	0805d840 	call	805d84 <__sfp_lock_release>
  809ea8:	9005883a 	mov	r2,r18
  809eac:	dfc00317 	ldw	ra,12(sp)
  809eb0:	dc800217 	ldw	r18,8(sp)
  809eb4:	dc400117 	ldw	r17,4(sp)
  809eb8:	dc000017 	ldw	r16,0(sp)
  809ebc:	dec00404 	addi	sp,sp,16
  809ec0:	f800283a 	ret
  809ec4:	0805d840 	call	805d84 <__sfp_lock_release>
  809ec8:	0025883a 	mov	r18,zero
  809ecc:	9005883a 	mov	r2,r18
  809ed0:	dfc00317 	ldw	ra,12(sp)
  809ed4:	dc800217 	ldw	r18,8(sp)
  809ed8:	dc400117 	ldw	r17,4(sp)
  809edc:	dc000017 	ldw	r16,0(sp)
  809ee0:	dec00404 	addi	sp,sp,16
  809ee4:	f800283a 	ret
  809ee8:	8809883a 	mov	r4,r17
  809eec:	0805d900 	call	805d90 <__sinit>
  809ef0:	8080030f 	ldh	r2,12(r16)
  809ef4:	103fd11e 	bne	r2,zero,809e3c <_fclose_r+0x38>
  809ef8:	003ff206 	br	809ec4 <_fclose_r+0xc0>
  809efc:	81400417 	ldw	r5,16(r16)
  809f00:	8809883a 	mov	r4,r17
  809f04:	08061140 	call	806114 <_free_r>
  809f08:	003fd906 	br	809e70 <_fclose_r+0x6c>
  809f0c:	04bfffc4 	movi	r18,-1
  809f10:	003fd406 	br	809e64 <_fclose_r+0x60>

00809f14 <fclose>:
  809f14:	00802074 	movhi	r2,129
  809f18:	1089eb04 	addi	r2,r2,10156
  809f1c:	200b883a 	mov	r5,r4
  809f20:	11000017 	ldw	r4,0(r2)
  809f24:	0809e041 	jmpi	809e04 <_fclose_r>

00809f28 <_fstat_r>:
  809f28:	defffd04 	addi	sp,sp,-12
  809f2c:	dc000015 	stw	r16,0(sp)
  809f30:	04002074 	movhi	r16,129
  809f34:	84110404 	addi	r16,r16,17424
  809f38:	dc400115 	stw	r17,4(sp)
  809f3c:	80000015 	stw	zero,0(r16)
  809f40:	2023883a 	mov	r17,r4
  809f44:	2809883a 	mov	r4,r5
  809f48:	300b883a 	mov	r5,r6
  809f4c:	dfc00215 	stw	ra,8(sp)
  809f50:	080c9180 	call	80c918 <fstat>
  809f54:	1007883a 	mov	r3,r2
  809f58:	00bfffc4 	movi	r2,-1
  809f5c:	18800626 	beq	r3,r2,809f78 <_fstat_r+0x50>
  809f60:	1805883a 	mov	r2,r3
  809f64:	dfc00217 	ldw	ra,8(sp)
  809f68:	dc400117 	ldw	r17,4(sp)
  809f6c:	dc000017 	ldw	r16,0(sp)
  809f70:	dec00304 	addi	sp,sp,12
  809f74:	f800283a 	ret
  809f78:	80800017 	ldw	r2,0(r16)
  809f7c:	103ff826 	beq	r2,zero,809f60 <_fstat_r+0x38>
  809f80:	88800015 	stw	r2,0(r17)
  809f84:	1805883a 	mov	r2,r3
  809f88:	dfc00217 	ldw	ra,8(sp)
  809f8c:	dc400117 	ldw	r17,4(sp)
  809f90:	dc000017 	ldw	r16,0(sp)
  809f94:	dec00304 	addi	sp,sp,12
  809f98:	f800283a 	ret

00809f9c <_isatty_r>:
  809f9c:	defffd04 	addi	sp,sp,-12
  809fa0:	dc000015 	stw	r16,0(sp)
  809fa4:	04002074 	movhi	r16,129
  809fa8:	84110404 	addi	r16,r16,17424
  809fac:	dc400115 	stw	r17,4(sp)
  809fb0:	80000015 	stw	zero,0(r16)
  809fb4:	2023883a 	mov	r17,r4
  809fb8:	2809883a 	mov	r4,r5
  809fbc:	dfc00215 	stw	ra,8(sp)
  809fc0:	080ca6c0 	call	80ca6c <isatty>
  809fc4:	1007883a 	mov	r3,r2
  809fc8:	00bfffc4 	movi	r2,-1
  809fcc:	18800626 	beq	r3,r2,809fe8 <_isatty_r+0x4c>
  809fd0:	1805883a 	mov	r2,r3
  809fd4:	dfc00217 	ldw	ra,8(sp)
  809fd8:	dc400117 	ldw	r17,4(sp)
  809fdc:	dc000017 	ldw	r16,0(sp)
  809fe0:	dec00304 	addi	sp,sp,12
  809fe4:	f800283a 	ret
  809fe8:	80800017 	ldw	r2,0(r16)
  809fec:	103ff826 	beq	r2,zero,809fd0 <_isatty_r+0x34>
  809ff0:	88800015 	stw	r2,0(r17)
  809ff4:	1805883a 	mov	r2,r3
  809ff8:	dfc00217 	ldw	ra,8(sp)
  809ffc:	dc400117 	ldw	r17,4(sp)
  80a000:	dc000017 	ldw	r16,0(sp)
  80a004:	dec00304 	addi	sp,sp,12
  80a008:	f800283a 	ret

0080a00c <_lseek_r>:
  80a00c:	defffd04 	addi	sp,sp,-12
  80a010:	dc000015 	stw	r16,0(sp)
  80a014:	04002074 	movhi	r16,129
  80a018:	84110404 	addi	r16,r16,17424
  80a01c:	dc400115 	stw	r17,4(sp)
  80a020:	80000015 	stw	zero,0(r16)
  80a024:	2023883a 	mov	r17,r4
  80a028:	2809883a 	mov	r4,r5
  80a02c:	300b883a 	mov	r5,r6
  80a030:	380d883a 	mov	r6,r7
  80a034:	dfc00215 	stw	ra,8(sp)
  80a038:	080ce180 	call	80ce18 <lseek>
  80a03c:	1007883a 	mov	r3,r2
  80a040:	00bfffc4 	movi	r2,-1
  80a044:	18800626 	beq	r3,r2,80a060 <_lseek_r+0x54>
  80a048:	1805883a 	mov	r2,r3
  80a04c:	dfc00217 	ldw	ra,8(sp)
  80a050:	dc400117 	ldw	r17,4(sp)
  80a054:	dc000017 	ldw	r16,0(sp)
  80a058:	dec00304 	addi	sp,sp,12
  80a05c:	f800283a 	ret
  80a060:	80800017 	ldw	r2,0(r16)
  80a064:	103ff826 	beq	r2,zero,80a048 <_lseek_r+0x3c>
  80a068:	88800015 	stw	r2,0(r17)
  80a06c:	1805883a 	mov	r2,r3
  80a070:	dfc00217 	ldw	ra,8(sp)
  80a074:	dc400117 	ldw	r17,4(sp)
  80a078:	dc000017 	ldw	r16,0(sp)
  80a07c:	dec00304 	addi	sp,sp,12
  80a080:	f800283a 	ret

0080a084 <_read_r>:
  80a084:	defffd04 	addi	sp,sp,-12
  80a088:	dc000015 	stw	r16,0(sp)
  80a08c:	04002074 	movhi	r16,129
  80a090:	84110404 	addi	r16,r16,17424
  80a094:	dc400115 	stw	r17,4(sp)
  80a098:	80000015 	stw	zero,0(r16)
  80a09c:	2023883a 	mov	r17,r4
  80a0a0:	2809883a 	mov	r4,r5
  80a0a4:	300b883a 	mov	r5,r6
  80a0a8:	380d883a 	mov	r6,r7
  80a0ac:	dfc00215 	stw	ra,8(sp)
  80a0b0:	080d0140 	call	80d014 <read>
  80a0b4:	1007883a 	mov	r3,r2
  80a0b8:	00bfffc4 	movi	r2,-1
  80a0bc:	18800626 	beq	r3,r2,80a0d8 <_read_r+0x54>
  80a0c0:	1805883a 	mov	r2,r3
  80a0c4:	dfc00217 	ldw	ra,8(sp)
  80a0c8:	dc400117 	ldw	r17,4(sp)
  80a0cc:	dc000017 	ldw	r16,0(sp)
  80a0d0:	dec00304 	addi	sp,sp,12
  80a0d4:	f800283a 	ret
  80a0d8:	80800017 	ldw	r2,0(r16)
  80a0dc:	103ff826 	beq	r2,zero,80a0c0 <_read_r+0x3c>
  80a0e0:	88800015 	stw	r2,0(r17)
  80a0e4:	1805883a 	mov	r2,r3
  80a0e8:	dfc00217 	ldw	ra,8(sp)
  80a0ec:	dc400117 	ldw	r17,4(sp)
  80a0f0:	dc000017 	ldw	r16,0(sp)
  80a0f4:	dec00304 	addi	sp,sp,12
  80a0f8:	f800283a 	ret

0080a0fc <__udivdi3>:
  80a0fc:	defff004 	addi	sp,sp,-64
  80a100:	2005883a 	mov	r2,r4
  80a104:	3011883a 	mov	r8,r6
  80a108:	df000e15 	stw	fp,56(sp)
  80a10c:	dd000a15 	stw	r20,40(sp)
  80a110:	dc000615 	stw	r16,24(sp)
  80a114:	dfc00f15 	stw	ra,60(sp)
  80a118:	ddc00d15 	stw	r23,52(sp)
  80a11c:	dd800c15 	stw	r22,48(sp)
  80a120:	dd400b15 	stw	r21,44(sp)
  80a124:	dcc00915 	stw	r19,36(sp)
  80a128:	dc800815 	stw	r18,32(sp)
  80a12c:	dc400715 	stw	r17,28(sp)
  80a130:	4021883a 	mov	r16,r8
  80a134:	1039883a 	mov	fp,r2
  80a138:	2829883a 	mov	r20,r5
  80a13c:	38003b1e 	bne	r7,zero,80a22c <__udivdi3+0x130>
  80a140:	2a005c36 	bltu	r5,r8,80a2b4 <__udivdi3+0x1b8>
  80a144:	4000a626 	beq	r8,zero,80a3e0 <__udivdi3+0x2e4>
  80a148:	00bfffd4 	movui	r2,65535
  80a14c:	14009e36 	bltu	r2,r16,80a3c8 <__udivdi3+0x2cc>
  80a150:	00803fc4 	movi	r2,255
  80a154:	14013d36 	bltu	r2,r16,80a64c <__udivdi3+0x550>
  80a158:	000b883a 	mov	r5,zero
  80a15c:	0005883a 	mov	r2,zero
  80a160:	8084d83a 	srl	r2,r16,r2
  80a164:	01002074 	movhi	r4,129
  80a168:	21029704 	addi	r4,r4,2652
  80a16c:	01800804 	movi	r6,32
  80a170:	1105883a 	add	r2,r2,r4
  80a174:	10c00003 	ldbu	r3,0(r2)
  80a178:	28c7883a 	add	r3,r5,r3
  80a17c:	30edc83a 	sub	r22,r6,r3
  80a180:	b000ee1e 	bne	r22,zero,80a53c <__udivdi3+0x440>
  80a184:	802ad43a 	srli	r21,r16,16
  80a188:	00800044 	movi	r2,1
  80a18c:	a423c83a 	sub	r17,r20,r16
  80a190:	85ffffcc 	andi	r23,r16,65535
  80a194:	d8800315 	stw	r2,12(sp)
  80a198:	8809883a 	mov	r4,r17
  80a19c:	a80b883a 	mov	r5,r21
  80a1a0:	080bef00 	call	80bef0 <__udivsi3>
  80a1a4:	8809883a 	mov	r4,r17
  80a1a8:	a80b883a 	mov	r5,r21
  80a1ac:	102d883a 	mov	r22,r2
  80a1b0:	080bef80 	call	80bef8 <__umodsi3>
  80a1b4:	1004943a 	slli	r2,r2,16
  80a1b8:	e006d43a 	srli	r3,fp,16
  80a1bc:	bda3383a 	mul	r17,r23,r22
  80a1c0:	10c4b03a 	or	r2,r2,r3
  80a1c4:	1440042e 	bgeu	r2,r17,80a1d8 <__udivdi3+0xdc>
  80a1c8:	1405883a 	add	r2,r2,r16
  80a1cc:	b5bfffc4 	addi	r22,r22,-1
  80a1d0:	14000136 	bltu	r2,r16,80a1d8 <__udivdi3+0xdc>
  80a1d4:	14413d36 	bltu	r2,r17,80a6cc <__udivdi3+0x5d0>
  80a1d8:	1463c83a 	sub	r17,r2,r17
  80a1dc:	8809883a 	mov	r4,r17
  80a1e0:	a80b883a 	mov	r5,r21
  80a1e4:	080bef00 	call	80bef0 <__udivsi3>
  80a1e8:	8809883a 	mov	r4,r17
  80a1ec:	a80b883a 	mov	r5,r21
  80a1f0:	1029883a 	mov	r20,r2
  80a1f4:	080bef80 	call	80bef8 <__umodsi3>
  80a1f8:	1004943a 	slli	r2,r2,16
  80a1fc:	bd09383a 	mul	r4,r23,r20
  80a200:	e0ffffcc 	andi	r3,fp,65535
  80a204:	10c4b03a 	or	r2,r2,r3
  80a208:	1100042e 	bgeu	r2,r4,80a21c <__udivdi3+0x120>
  80a20c:	8085883a 	add	r2,r16,r2
  80a210:	a53fffc4 	addi	r20,r20,-1
  80a214:	14000136 	bltu	r2,r16,80a21c <__udivdi3+0x120>
  80a218:	11012036 	bltu	r2,r4,80a69c <__udivdi3+0x5a0>
  80a21c:	b004943a 	slli	r2,r22,16
  80a220:	d9000317 	ldw	r4,12(sp)
  80a224:	a084b03a 	or	r2,r20,r2
  80a228:	00001506 	br	80a280 <__udivdi3+0x184>
  80a22c:	380d883a 	mov	r6,r7
  80a230:	29c06236 	bltu	r5,r7,80a3bc <__udivdi3+0x2c0>
  80a234:	00bfffd4 	movui	r2,65535
  80a238:	11c05a36 	bltu	r2,r7,80a3a4 <__udivdi3+0x2a8>
  80a23c:	00803fc4 	movi	r2,255
  80a240:	11c0fc36 	bltu	r2,r7,80a634 <__udivdi3+0x538>
  80a244:	000b883a 	mov	r5,zero
  80a248:	0005883a 	mov	r2,zero
  80a24c:	3084d83a 	srl	r2,r6,r2
  80a250:	01002074 	movhi	r4,129
  80a254:	21029704 	addi	r4,r4,2652
  80a258:	01c00804 	movi	r7,32
  80a25c:	1105883a 	add	r2,r2,r4
  80a260:	10c00003 	ldbu	r3,0(r2)
  80a264:	28c7883a 	add	r3,r5,r3
  80a268:	38efc83a 	sub	r23,r7,r3
  80a26c:	b800691e 	bne	r23,zero,80a414 <__udivdi3+0x318>
  80a270:	35000136 	bltu	r6,r20,80a278 <__udivdi3+0x17c>
  80a274:	e4005136 	bltu	fp,r16,80a3bc <__udivdi3+0x2c0>
  80a278:	00800044 	movi	r2,1
  80a27c:	0009883a 	mov	r4,zero
  80a280:	2007883a 	mov	r3,r4
  80a284:	dfc00f17 	ldw	ra,60(sp)
  80a288:	df000e17 	ldw	fp,56(sp)
  80a28c:	ddc00d17 	ldw	r23,52(sp)
  80a290:	dd800c17 	ldw	r22,48(sp)
  80a294:	dd400b17 	ldw	r21,44(sp)
  80a298:	dd000a17 	ldw	r20,40(sp)
  80a29c:	dcc00917 	ldw	r19,36(sp)
  80a2a0:	dc800817 	ldw	r18,32(sp)
  80a2a4:	dc400717 	ldw	r17,28(sp)
  80a2a8:	dc000617 	ldw	r16,24(sp)
  80a2ac:	dec01004 	addi	sp,sp,64
  80a2b0:	f800283a 	ret
  80a2b4:	00bfffd4 	movui	r2,65535
  80a2b8:	12005036 	bltu	r2,r8,80a3fc <__udivdi3+0x300>
  80a2bc:	00803fc4 	movi	r2,255
  80a2c0:	1200e836 	bltu	r2,r8,80a664 <__udivdi3+0x568>
  80a2c4:	000b883a 	mov	r5,zero
  80a2c8:	0005883a 	mov	r2,zero
  80a2cc:	8084d83a 	srl	r2,r16,r2
  80a2d0:	01002074 	movhi	r4,129
  80a2d4:	21029704 	addi	r4,r4,2652
  80a2d8:	01800804 	movi	r6,32
  80a2dc:	1105883a 	add	r2,r2,r4
  80a2e0:	10c00003 	ldbu	r3,0(r2)
  80a2e4:	28c7883a 	add	r3,r5,r3
  80a2e8:	30cbc83a 	sub	r5,r6,r3
  80a2ec:	28000626 	beq	r5,zero,80a308 <__udivdi3+0x20c>
  80a2f0:	3145c83a 	sub	r2,r6,r5
  80a2f4:	e084d83a 	srl	r2,fp,r2
  80a2f8:	a146983a 	sll	r3,r20,r5
  80a2fc:	e178983a 	sll	fp,fp,r5
  80a300:	8160983a 	sll	r16,r16,r5
  80a304:	18a8b03a 	or	r20,r3,r2
  80a308:	802ad43a 	srli	r21,r16,16
  80a30c:	a009883a 	mov	r4,r20
  80a310:	85ffffcc 	andi	r23,r16,65535
  80a314:	a80b883a 	mov	r5,r21
  80a318:	080bef00 	call	80bef0 <__udivsi3>
  80a31c:	a009883a 	mov	r4,r20
  80a320:	a80b883a 	mov	r5,r21
  80a324:	102d883a 	mov	r22,r2
  80a328:	080bef80 	call	80bef8 <__umodsi3>
  80a32c:	1004943a 	slli	r2,r2,16
  80a330:	e006d43a 	srli	r3,fp,16
  80a334:	bda3383a 	mul	r17,r23,r22
  80a338:	10c4b03a 	or	r2,r2,r3
  80a33c:	1440042e 	bgeu	r2,r17,80a350 <__udivdi3+0x254>
  80a340:	1405883a 	add	r2,r2,r16
  80a344:	b5bfffc4 	addi	r22,r22,-1
  80a348:	14000136 	bltu	r2,r16,80a350 <__udivdi3+0x254>
  80a34c:	1440d536 	bltu	r2,r17,80a6a4 <__udivdi3+0x5a8>
  80a350:	1463c83a 	sub	r17,r2,r17
  80a354:	8809883a 	mov	r4,r17
  80a358:	a80b883a 	mov	r5,r21
  80a35c:	080bef00 	call	80bef0 <__udivsi3>
  80a360:	8809883a 	mov	r4,r17
  80a364:	a80b883a 	mov	r5,r21
  80a368:	1029883a 	mov	r20,r2
  80a36c:	080bef80 	call	80bef8 <__umodsi3>
  80a370:	1004943a 	slli	r2,r2,16
  80a374:	bd09383a 	mul	r4,r23,r20
  80a378:	e0ffffcc 	andi	r3,fp,65535
  80a37c:	10c4b03a 	or	r2,r2,r3
  80a380:	1100042e 	bgeu	r2,r4,80a394 <__udivdi3+0x298>
  80a384:	8085883a 	add	r2,r16,r2
  80a388:	a53fffc4 	addi	r20,r20,-1
  80a38c:	14000136 	bltu	r2,r16,80a394 <__udivdi3+0x298>
  80a390:	1100c736 	bltu	r2,r4,80a6b0 <__udivdi3+0x5b4>
  80a394:	b004943a 	slli	r2,r22,16
  80a398:	0009883a 	mov	r4,zero
  80a39c:	a084b03a 	or	r2,r20,r2
  80a3a0:	003fb706 	br	80a280 <__udivdi3+0x184>
  80a3a4:	00804034 	movhi	r2,256
  80a3a8:	10bfffc4 	addi	r2,r2,-1
  80a3ac:	11c0a436 	bltu	r2,r7,80a640 <__udivdi3+0x544>
  80a3b0:	01400404 	movi	r5,16
  80a3b4:	2805883a 	mov	r2,r5
  80a3b8:	003fa406 	br	80a24c <__udivdi3+0x150>
  80a3bc:	0005883a 	mov	r2,zero
  80a3c0:	0009883a 	mov	r4,zero
  80a3c4:	003fae06 	br	80a280 <__udivdi3+0x184>
  80a3c8:	00804034 	movhi	r2,256
  80a3cc:	10bfffc4 	addi	r2,r2,-1
  80a3d0:	1400a136 	bltu	r2,r16,80a658 <__udivdi3+0x55c>
  80a3d4:	01400404 	movi	r5,16
  80a3d8:	2805883a 	mov	r2,r5
  80a3dc:	003f6006 	br	80a160 <__udivdi3+0x64>
  80a3e0:	01000044 	movi	r4,1
  80a3e4:	000b883a 	mov	r5,zero
  80a3e8:	080bef00 	call	80bef0 <__udivsi3>
  80a3ec:	1021883a 	mov	r16,r2
  80a3f0:	00bfffd4 	movui	r2,65535
  80a3f4:	143ff436 	bltu	r2,r16,80a3c8 <__udivdi3+0x2cc>
  80a3f8:	003f5506 	br	80a150 <__udivdi3+0x54>
  80a3fc:	00804034 	movhi	r2,256
  80a400:	10bfffc4 	addi	r2,r2,-1
  80a404:	12009a36 	bltu	r2,r8,80a670 <__udivdi3+0x574>
  80a408:	01400404 	movi	r5,16
  80a40c:	2805883a 	mov	r2,r5
  80a410:	003fae06 	br	80a2cc <__udivdi3+0x1d0>
  80a414:	3dc5c83a 	sub	r2,r7,r23
  80a418:	35c8983a 	sll	r4,r6,r23
  80a41c:	8086d83a 	srl	r3,r16,r2
  80a420:	a0a2d83a 	srl	r17,r20,r2
  80a424:	e084d83a 	srl	r2,fp,r2
  80a428:	20eab03a 	or	r21,r4,r3
  80a42c:	a82cd43a 	srli	r22,r21,16
  80a430:	a5c6983a 	sll	r3,r20,r23
  80a434:	8809883a 	mov	r4,r17
  80a438:	b00b883a 	mov	r5,r22
  80a43c:	1886b03a 	or	r3,r3,r2
  80a440:	d8c00215 	stw	r3,8(sp)
  80a444:	080bef00 	call	80bef0 <__udivsi3>
  80a448:	8809883a 	mov	r4,r17
  80a44c:	b00b883a 	mov	r5,r22
  80a450:	1029883a 	mov	r20,r2
  80a454:	080bef80 	call	80bef8 <__umodsi3>
  80a458:	a8ffffcc 	andi	r3,r21,65535
  80a45c:	d8c00515 	stw	r3,20(sp)
  80a460:	d9000217 	ldw	r4,8(sp)
  80a464:	d9400517 	ldw	r5,20(sp)
  80a468:	1004943a 	slli	r2,r2,16
  80a46c:	2006d43a 	srli	r3,r4,16
  80a470:	85e0983a 	sll	r16,r16,r23
  80a474:	2d23383a 	mul	r17,r5,r20
  80a478:	10c4b03a 	or	r2,r2,r3
  80a47c:	dc000015 	stw	r16,0(sp)
  80a480:	1440032e 	bgeu	r2,r17,80a490 <__udivdi3+0x394>
  80a484:	1545883a 	add	r2,r2,r21
  80a488:	a53fffc4 	addi	r20,r20,-1
  80a48c:	15407f2e 	bgeu	r2,r21,80a68c <__udivdi3+0x590>
  80a490:	1463c83a 	sub	r17,r2,r17
  80a494:	8809883a 	mov	r4,r17
  80a498:	b00b883a 	mov	r5,r22
  80a49c:	080bef00 	call	80bef0 <__udivsi3>
  80a4a0:	8809883a 	mov	r4,r17
  80a4a4:	b00b883a 	mov	r5,r22
  80a4a8:	1021883a 	mov	r16,r2
  80a4ac:	080bef80 	call	80bef8 <__umodsi3>
  80a4b0:	d8c00517 	ldw	r3,20(sp)
  80a4b4:	d9000217 	ldw	r4,8(sp)
  80a4b8:	1004943a 	slli	r2,r2,16
  80a4bc:	1c0f383a 	mul	r7,r3,r16
  80a4c0:	20ffffcc 	andi	r3,r4,65535
  80a4c4:	10e2b03a 	or	r17,r2,r3
  80a4c8:	89c0032e 	bgeu	r17,r7,80a4d8 <__udivdi3+0x3dc>
  80a4cc:	8d63883a 	add	r17,r17,r21
  80a4d0:	843fffc4 	addi	r16,r16,-1
  80a4d4:	8d40692e 	bgeu	r17,r21,80a67c <__udivdi3+0x580>
  80a4d8:	a008943a 	slli	r4,r20,16
  80a4dc:	d9400017 	ldw	r5,0(sp)
  80a4e0:	89e3c83a 	sub	r17,r17,r7
  80a4e4:	8110b03a 	or	r8,r16,r4
  80a4e8:	280cd43a 	srli	r6,r5,16
  80a4ec:	28ffffcc 	andi	r3,r5,65535
  80a4f0:	40bfffcc 	andi	r2,r8,65535
  80a4f4:	400ad43a 	srli	r5,r8,16
  80a4f8:	10d3383a 	mul	r9,r2,r3
  80a4fc:	1185383a 	mul	r2,r2,r6
  80a500:	28c7383a 	mul	r3,r5,r3
  80a504:	4808d43a 	srli	r4,r9,16
  80a508:	298b383a 	mul	r5,r5,r6
  80a50c:	10c5883a 	add	r2,r2,r3
  80a510:	2089883a 	add	r4,r4,r2
  80a514:	20c0022e 	bgeu	r4,r3,80a520 <__udivdi3+0x424>
  80a518:	00800074 	movhi	r2,1
  80a51c:	288b883a 	add	r5,r5,r2
  80a520:	2004d43a 	srli	r2,r4,16
  80a524:	288b883a 	add	r5,r5,r2
  80a528:	89403f36 	bltu	r17,r5,80a628 <__udivdi3+0x52c>
  80a52c:	89403926 	beq	r17,r5,80a614 <__udivdi3+0x518>
  80a530:	4005883a 	mov	r2,r8
  80a534:	0009883a 	mov	r4,zero
  80a538:	003f5106 	br	80a280 <__udivdi3+0x184>
  80a53c:	85a0983a 	sll	r16,r16,r22
  80a540:	3585c83a 	sub	r2,r6,r22
  80a544:	a0a2d83a 	srl	r17,r20,r2
  80a548:	802ad43a 	srli	r21,r16,16
  80a54c:	e084d83a 	srl	r2,fp,r2
  80a550:	a586983a 	sll	r3,r20,r22
  80a554:	8809883a 	mov	r4,r17
  80a558:	a80b883a 	mov	r5,r21
  80a55c:	1886b03a 	or	r3,r3,r2
  80a560:	d8c00115 	stw	r3,4(sp)
  80a564:	080bef00 	call	80bef0 <__udivsi3>
  80a568:	8809883a 	mov	r4,r17
  80a56c:	a80b883a 	mov	r5,r21
  80a570:	d8800415 	stw	r2,16(sp)
  80a574:	080bef80 	call	80bef8 <__umodsi3>
  80a578:	d9000117 	ldw	r4,4(sp)
  80a57c:	d9400417 	ldw	r5,16(sp)
  80a580:	1004943a 	slli	r2,r2,16
  80a584:	85ffffcc 	andi	r23,r16,65535
  80a588:	2006d43a 	srli	r3,r4,16
  80a58c:	b963383a 	mul	r17,r23,r5
  80a590:	10c4b03a 	or	r2,r2,r3
  80a594:	1440042e 	bgeu	r2,r17,80a5a8 <__udivdi3+0x4ac>
  80a598:	297fffc4 	addi	r5,r5,-1
  80a59c:	1405883a 	add	r2,r2,r16
  80a5a0:	d9400415 	stw	r5,16(sp)
  80a5a4:	1400442e 	bgeu	r2,r16,80a6b8 <__udivdi3+0x5bc>
  80a5a8:	1463c83a 	sub	r17,r2,r17
  80a5ac:	8809883a 	mov	r4,r17
  80a5b0:	a80b883a 	mov	r5,r21
  80a5b4:	080bef00 	call	80bef0 <__udivsi3>
  80a5b8:	8809883a 	mov	r4,r17
  80a5bc:	a80b883a 	mov	r5,r21
  80a5c0:	1029883a 	mov	r20,r2
  80a5c4:	080bef80 	call	80bef8 <__umodsi3>
  80a5c8:	d9400117 	ldw	r5,4(sp)
  80a5cc:	1004943a 	slli	r2,r2,16
  80a5d0:	bd09383a 	mul	r4,r23,r20
  80a5d4:	28ffffcc 	andi	r3,r5,65535
  80a5d8:	10c6b03a 	or	r3,r2,r3
  80a5dc:	1900062e 	bgeu	r3,r4,80a5f8 <__udivdi3+0x4fc>
  80a5e0:	1c07883a 	add	r3,r3,r16
  80a5e4:	a53fffc4 	addi	r20,r20,-1
  80a5e8:	1c000336 	bltu	r3,r16,80a5f8 <__udivdi3+0x4fc>
  80a5ec:	1900022e 	bgeu	r3,r4,80a5f8 <__udivdi3+0x4fc>
  80a5f0:	a53fffc4 	addi	r20,r20,-1
  80a5f4:	1c07883a 	add	r3,r3,r16
  80a5f8:	d9400417 	ldw	r5,16(sp)
  80a5fc:	e5b8983a 	sll	fp,fp,r22
  80a600:	1923c83a 	sub	r17,r3,r4
  80a604:	2804943a 	slli	r2,r5,16
  80a608:	a0a8b03a 	or	r20,r20,r2
  80a60c:	dd000315 	stw	r20,12(sp)
  80a610:	003ee106 	br	80a198 <__udivdi3+0x9c>
  80a614:	2004943a 	slli	r2,r4,16
  80a618:	e5c8983a 	sll	r4,fp,r23
  80a61c:	48ffffcc 	andi	r3,r9,65535
  80a620:	10c5883a 	add	r2,r2,r3
  80a624:	20bfc22e 	bgeu	r4,r2,80a530 <__udivdi3+0x434>
  80a628:	40bfffc4 	addi	r2,r8,-1
  80a62c:	0009883a 	mov	r4,zero
  80a630:	003f1306 	br	80a280 <__udivdi3+0x184>
  80a634:	01400204 	movi	r5,8
  80a638:	2805883a 	mov	r2,r5
  80a63c:	003f0306 	br	80a24c <__udivdi3+0x150>
  80a640:	01400604 	movi	r5,24
  80a644:	2805883a 	mov	r2,r5
  80a648:	003f0006 	br	80a24c <__udivdi3+0x150>
  80a64c:	01400204 	movi	r5,8
  80a650:	2805883a 	mov	r2,r5
  80a654:	003ec206 	br	80a160 <__udivdi3+0x64>
  80a658:	01400604 	movi	r5,24
  80a65c:	2805883a 	mov	r2,r5
  80a660:	003ebf06 	br	80a160 <__udivdi3+0x64>
  80a664:	01400204 	movi	r5,8
  80a668:	2805883a 	mov	r2,r5
  80a66c:	003f1706 	br	80a2cc <__udivdi3+0x1d0>
  80a670:	01400604 	movi	r5,24
  80a674:	2805883a 	mov	r2,r5
  80a678:	003f1406 	br	80a2cc <__udivdi3+0x1d0>
  80a67c:	89ff962e 	bgeu	r17,r7,80a4d8 <__udivdi3+0x3dc>
  80a680:	8d63883a 	add	r17,r17,r21
  80a684:	843fffc4 	addi	r16,r16,-1
  80a688:	003f9306 	br	80a4d8 <__udivdi3+0x3dc>
  80a68c:	147f802e 	bgeu	r2,r17,80a490 <__udivdi3+0x394>
  80a690:	a53fffc4 	addi	r20,r20,-1
  80a694:	1545883a 	add	r2,r2,r21
  80a698:	003f7d06 	br	80a490 <__udivdi3+0x394>
  80a69c:	a53fffc4 	addi	r20,r20,-1
  80a6a0:	003ede06 	br	80a21c <__udivdi3+0x120>
  80a6a4:	b5bfffc4 	addi	r22,r22,-1
  80a6a8:	1405883a 	add	r2,r2,r16
  80a6ac:	003f2806 	br	80a350 <__udivdi3+0x254>
  80a6b0:	a53fffc4 	addi	r20,r20,-1
  80a6b4:	003f3706 	br	80a394 <__udivdi3+0x298>
  80a6b8:	147fbb2e 	bgeu	r2,r17,80a5a8 <__udivdi3+0x4ac>
  80a6bc:	297fffc4 	addi	r5,r5,-1
  80a6c0:	1405883a 	add	r2,r2,r16
  80a6c4:	d9400415 	stw	r5,16(sp)
  80a6c8:	003fb706 	br	80a5a8 <__udivdi3+0x4ac>
  80a6cc:	b5bfffc4 	addi	r22,r22,-1
  80a6d0:	1405883a 	add	r2,r2,r16
  80a6d4:	003ec006 	br	80a1d8 <__udivdi3+0xdc>

0080a6d8 <__umoddi3>:
  80a6d8:	defff104 	addi	sp,sp,-60
  80a6dc:	dd800b15 	stw	r22,44(sp)
  80a6e0:	dd000915 	stw	r20,36(sp)
  80a6e4:	dc000515 	stw	r16,20(sp)
  80a6e8:	dfc00e15 	stw	ra,56(sp)
  80a6ec:	df000d15 	stw	fp,52(sp)
  80a6f0:	ddc00c15 	stw	r23,48(sp)
  80a6f4:	dd400a15 	stw	r21,40(sp)
  80a6f8:	dcc00815 	stw	r19,32(sp)
  80a6fc:	dc800715 	stw	r18,28(sp)
  80a700:	dc400615 	stw	r17,24(sp)
  80a704:	3021883a 	mov	r16,r6
  80a708:	202d883a 	mov	r22,r4
  80a70c:	2829883a 	mov	r20,r5
  80a710:	38002b1e 	bne	r7,zero,80a7c0 <__umoddi3+0xe8>
  80a714:	29805036 	bltu	r5,r6,80a858 <__umoddi3+0x180>
  80a718:	30008a26 	beq	r6,zero,80a944 <__umoddi3+0x26c>
  80a71c:	00bfffd4 	movui	r2,65535
  80a720:	14008236 	bltu	r2,r16,80a92c <__umoddi3+0x254>
  80a724:	00803fc4 	movi	r2,255
  80a728:	14013636 	bltu	r2,r16,80ac04 <__umoddi3+0x52c>
  80a72c:	000b883a 	mov	r5,zero
  80a730:	0005883a 	mov	r2,zero
  80a734:	8084d83a 	srl	r2,r16,r2
  80a738:	01002074 	movhi	r4,129
  80a73c:	21029704 	addi	r4,r4,2652
  80a740:	01800804 	movi	r6,32
  80a744:	1105883a 	add	r2,r2,r4
  80a748:	10c00003 	ldbu	r3,0(r2)
  80a74c:	28c7883a 	add	r3,r5,r3
  80a750:	30efc83a 	sub	r23,r6,r3
  80a754:	b800941e 	bne	r23,zero,80a9a8 <__umoddi3+0x2d0>
  80a758:	802ad43a 	srli	r21,r16,16
  80a75c:	a423c83a 	sub	r17,r20,r16
  80a760:	0039883a 	mov	fp,zero
  80a764:	853fffcc 	andi	r20,r16,65535
  80a768:	8809883a 	mov	r4,r17
  80a76c:	a80b883a 	mov	r5,r21
  80a770:	080bef00 	call	80bef0 <__udivsi3>
  80a774:	8809883a 	mov	r4,r17
  80a778:	a80b883a 	mov	r5,r21
  80a77c:	a0a3383a 	mul	r17,r20,r2
  80a780:	080bef80 	call	80bef8 <__umodsi3>
  80a784:	1004943a 	slli	r2,r2,16
  80a788:	b006d43a 	srli	r3,r22,16
  80a78c:	10c4b03a 	or	r2,r2,r3
  80a790:	1440032e 	bgeu	r2,r17,80a7a0 <__umoddi3+0xc8>
  80a794:	1405883a 	add	r2,r2,r16
  80a798:	14000136 	bltu	r2,r16,80a7a0 <__umoddi3+0xc8>
  80a79c:	14413536 	bltu	r2,r17,80ac74 <__umoddi3+0x59c>
  80a7a0:	1463c83a 	sub	r17,r2,r17
  80a7a4:	8809883a 	mov	r4,r17
  80a7a8:	a80b883a 	mov	r5,r21
  80a7ac:	080bef00 	call	80bef0 <__udivsi3>
  80a7b0:	8809883a 	mov	r4,r17
  80a7b4:	a0a3383a 	mul	r17,r20,r2
  80a7b8:	a80b883a 	mov	r5,r21
  80a7bc:	00004d06 	br	80a8f4 <__umoddi3+0x21c>
  80a7c0:	380d883a 	mov	r6,r7
  80a7c4:	29c0102e 	bgeu	r5,r7,80a808 <__umoddi3+0x130>
  80a7c8:	2011883a 	mov	r8,r4
  80a7cc:	2813883a 	mov	r9,r5
  80a7d0:	4005883a 	mov	r2,r8
  80a7d4:	4807883a 	mov	r3,r9
  80a7d8:	dfc00e17 	ldw	ra,56(sp)
  80a7dc:	df000d17 	ldw	fp,52(sp)
  80a7e0:	ddc00c17 	ldw	r23,48(sp)
  80a7e4:	dd800b17 	ldw	r22,44(sp)
  80a7e8:	dd400a17 	ldw	r21,40(sp)
  80a7ec:	dd000917 	ldw	r20,36(sp)
  80a7f0:	dcc00817 	ldw	r19,32(sp)
  80a7f4:	dc800717 	ldw	r18,28(sp)
  80a7f8:	dc400617 	ldw	r17,24(sp)
  80a7fc:	dc000517 	ldw	r16,20(sp)
  80a800:	dec00f04 	addi	sp,sp,60
  80a804:	f800283a 	ret
  80a808:	00bfffd4 	movui	r2,65535
  80a80c:	11c05a36 	bltu	r2,r7,80a978 <__umoddi3+0x2a0>
  80a810:	00803fc4 	movi	r2,255
  80a814:	11c0fe36 	bltu	r2,r7,80ac10 <__umoddi3+0x538>
  80a818:	000b883a 	mov	r5,zero
  80a81c:	0005883a 	mov	r2,zero
  80a820:	3084d83a 	srl	r2,r6,r2
  80a824:	01002074 	movhi	r4,129
  80a828:	21029704 	addi	r4,r4,2652
  80a82c:	01c00804 	movi	r7,32
  80a830:	1105883a 	add	r2,r2,r4
  80a834:	10c00003 	ldbu	r3,0(r2)
  80a838:	28c7883a 	add	r3,r5,r3
  80a83c:	38ebc83a 	sub	r21,r7,r3
  80a840:	a800851e 	bne	r21,zero,80aa58 <__umoddi3+0x380>
  80a844:	35005236 	bltu	r6,r20,80a990 <__umoddi3+0x2b8>
  80a848:	b400512e 	bgeu	r22,r16,80a990 <__umoddi3+0x2b8>
  80a84c:	b011883a 	mov	r8,r22
  80a850:	a013883a 	mov	r9,r20
  80a854:	003fde06 	br	80a7d0 <__umoddi3+0xf8>
  80a858:	00bfffd4 	movui	r2,65535
  80a85c:	11804036 	bltu	r2,r6,80a960 <__umoddi3+0x288>
  80a860:	00803fc4 	movi	r2,255
  80a864:	1180ed36 	bltu	r2,r6,80ac1c <__umoddi3+0x544>
  80a868:	000b883a 	mov	r5,zero
  80a86c:	0005883a 	mov	r2,zero
  80a870:	8084d83a 	srl	r2,r16,r2
  80a874:	01002074 	movhi	r4,129
  80a878:	21029704 	addi	r4,r4,2652
  80a87c:	01800804 	movi	r6,32
  80a880:	1105883a 	add	r2,r2,r4
  80a884:	10c00003 	ldbu	r3,0(r2)
  80a888:	28c7883a 	add	r3,r5,r3
  80a88c:	30c7c83a 	sub	r3,r6,r3
  80a890:	1800bf1e 	bne	r3,zero,80ab90 <__umoddi3+0x4b8>
  80a894:	0039883a 	mov	fp,zero
  80a898:	802ad43a 	srli	r21,r16,16
  80a89c:	a009883a 	mov	r4,r20
  80a8a0:	85ffffcc 	andi	r23,r16,65535
  80a8a4:	a80b883a 	mov	r5,r21
  80a8a8:	080bef00 	call	80bef0 <__udivsi3>
  80a8ac:	a009883a 	mov	r4,r20
  80a8b0:	a80b883a 	mov	r5,r21
  80a8b4:	b8a3383a 	mul	r17,r23,r2
  80a8b8:	080bef80 	call	80bef8 <__umodsi3>
  80a8bc:	1004943a 	slli	r2,r2,16
  80a8c0:	b006d43a 	srli	r3,r22,16
  80a8c4:	10c4b03a 	or	r2,r2,r3
  80a8c8:	1440032e 	bgeu	r2,r17,80a8d8 <__umoddi3+0x200>
  80a8cc:	1405883a 	add	r2,r2,r16
  80a8d0:	14000136 	bltu	r2,r16,80a8d8 <__umoddi3+0x200>
  80a8d4:	1440e536 	bltu	r2,r17,80ac6c <__umoddi3+0x594>
  80a8d8:	1463c83a 	sub	r17,r2,r17
  80a8dc:	8809883a 	mov	r4,r17
  80a8e0:	a80b883a 	mov	r5,r21
  80a8e4:	080bef00 	call	80bef0 <__udivsi3>
  80a8e8:	8809883a 	mov	r4,r17
  80a8ec:	b8a3383a 	mul	r17,r23,r2
  80a8f0:	a80b883a 	mov	r5,r21
  80a8f4:	080bef80 	call	80bef8 <__umodsi3>
  80a8f8:	1004943a 	slli	r2,r2,16
  80a8fc:	b0ffffcc 	andi	r3,r22,65535
  80a900:	10c4b03a 	or	r2,r2,r3
  80a904:	1440042e 	bgeu	r2,r17,80a918 <__umoddi3+0x240>
  80a908:	1405883a 	add	r2,r2,r16
  80a90c:	14000236 	bltu	r2,r16,80a918 <__umoddi3+0x240>
  80a910:	1440012e 	bgeu	r2,r17,80a918 <__umoddi3+0x240>
  80a914:	1405883a 	add	r2,r2,r16
  80a918:	1445c83a 	sub	r2,r2,r17
  80a91c:	1724d83a 	srl	r18,r2,fp
  80a920:	0013883a 	mov	r9,zero
  80a924:	9011883a 	mov	r8,r18
  80a928:	003fa906 	br	80a7d0 <__umoddi3+0xf8>
  80a92c:	00804034 	movhi	r2,256
  80a930:	10bfffc4 	addi	r2,r2,-1
  80a934:	1400b036 	bltu	r2,r16,80abf8 <__umoddi3+0x520>
  80a938:	01400404 	movi	r5,16
  80a93c:	2805883a 	mov	r2,r5
  80a940:	003f7c06 	br	80a734 <__umoddi3+0x5c>
  80a944:	01000044 	movi	r4,1
  80a948:	000b883a 	mov	r5,zero
  80a94c:	080bef00 	call	80bef0 <__udivsi3>
  80a950:	1021883a 	mov	r16,r2
  80a954:	00bfffd4 	movui	r2,65535
  80a958:	143ff436 	bltu	r2,r16,80a92c <__umoddi3+0x254>
  80a95c:	003f7106 	br	80a724 <__umoddi3+0x4c>
  80a960:	00804034 	movhi	r2,256
  80a964:	10bfffc4 	addi	r2,r2,-1
  80a968:	1180af36 	bltu	r2,r6,80ac28 <__umoddi3+0x550>
  80a96c:	01400404 	movi	r5,16
  80a970:	2805883a 	mov	r2,r5
  80a974:	003fbe06 	br	80a870 <__umoddi3+0x198>
  80a978:	00804034 	movhi	r2,256
  80a97c:	10bfffc4 	addi	r2,r2,-1
  80a980:	11c0ac36 	bltu	r2,r7,80ac34 <__umoddi3+0x55c>
  80a984:	01400404 	movi	r5,16
  80a988:	2805883a 	mov	r2,r5
  80a98c:	003fa406 	br	80a820 <__umoddi3+0x148>
  80a990:	b409c83a 	sub	r4,r22,r16
  80a994:	b105803a 	cmpltu	r2,r22,r4
  80a998:	a187c83a 	sub	r3,r20,r6
  80a99c:	18a9c83a 	sub	r20,r3,r2
  80a9a0:	202d883a 	mov	r22,r4
  80a9a4:	003fa906 	br	80a84c <__umoddi3+0x174>
  80a9a8:	85e0983a 	sll	r16,r16,r23
  80a9ac:	35c5c83a 	sub	r2,r6,r23
  80a9b0:	a0a2d83a 	srl	r17,r20,r2
  80a9b4:	802ad43a 	srli	r21,r16,16
  80a9b8:	b084d83a 	srl	r2,r22,r2
  80a9bc:	a5c6983a 	sll	r3,r20,r23
  80a9c0:	8809883a 	mov	r4,r17
  80a9c4:	a80b883a 	mov	r5,r21
  80a9c8:	1886b03a 	or	r3,r3,r2
  80a9cc:	d8c00115 	stw	r3,4(sp)
  80a9d0:	853fffcc 	andi	r20,r16,65535
  80a9d4:	080bef00 	call	80bef0 <__udivsi3>
  80a9d8:	8809883a 	mov	r4,r17
  80a9dc:	a80b883a 	mov	r5,r21
  80a9e0:	a0a3383a 	mul	r17,r20,r2
  80a9e4:	080bef80 	call	80bef8 <__umodsi3>
  80a9e8:	d9000117 	ldw	r4,4(sp)
  80a9ec:	1004943a 	slli	r2,r2,16
  80a9f0:	b839883a 	mov	fp,r23
  80a9f4:	2006d43a 	srli	r3,r4,16
  80a9f8:	10c4b03a 	or	r2,r2,r3
  80a9fc:	1440022e 	bgeu	r2,r17,80aa08 <__umoddi3+0x330>
  80aa00:	1405883a 	add	r2,r2,r16
  80aa04:	1400962e 	bgeu	r2,r16,80ac60 <__umoddi3+0x588>
  80aa08:	1463c83a 	sub	r17,r2,r17
  80aa0c:	8809883a 	mov	r4,r17
  80aa10:	a80b883a 	mov	r5,r21
  80aa14:	080bef00 	call	80bef0 <__udivsi3>
  80aa18:	8809883a 	mov	r4,r17
  80aa1c:	a80b883a 	mov	r5,r21
  80aa20:	a0a3383a 	mul	r17,r20,r2
  80aa24:	080bef80 	call	80bef8 <__umodsi3>
  80aa28:	d9400117 	ldw	r5,4(sp)
  80aa2c:	1004943a 	slli	r2,r2,16
  80aa30:	28ffffcc 	andi	r3,r5,65535
  80aa34:	10c4b03a 	or	r2,r2,r3
  80aa38:	1440042e 	bgeu	r2,r17,80aa4c <__umoddi3+0x374>
  80aa3c:	1405883a 	add	r2,r2,r16
  80aa40:	14000236 	bltu	r2,r16,80aa4c <__umoddi3+0x374>
  80aa44:	1440012e 	bgeu	r2,r17,80aa4c <__umoddi3+0x374>
  80aa48:	1405883a 	add	r2,r2,r16
  80aa4c:	b5ec983a 	sll	r22,r22,r23
  80aa50:	1463c83a 	sub	r17,r2,r17
  80aa54:	003f4406 	br	80a768 <__umoddi3+0x90>
  80aa58:	3d4fc83a 	sub	r7,r7,r21
  80aa5c:	3546983a 	sll	r3,r6,r21
  80aa60:	81c4d83a 	srl	r2,r16,r7
  80aa64:	a1e2d83a 	srl	r17,r20,r7
  80aa68:	a54c983a 	sll	r6,r20,r21
  80aa6c:	18aeb03a 	or	r23,r3,r2
  80aa70:	b828d43a 	srli	r20,r23,16
  80aa74:	b1c4d83a 	srl	r2,r22,r7
  80aa78:	8809883a 	mov	r4,r17
  80aa7c:	a00b883a 	mov	r5,r20
  80aa80:	308cb03a 	or	r6,r6,r2
  80aa84:	d9c00315 	stw	r7,12(sp)
  80aa88:	d9800215 	stw	r6,8(sp)
  80aa8c:	080bef00 	call	80bef0 <__udivsi3>
  80aa90:	8809883a 	mov	r4,r17
  80aa94:	a00b883a 	mov	r5,r20
  80aa98:	1039883a 	mov	fp,r2
  80aa9c:	080bef80 	call	80bef8 <__umodsi3>
  80aaa0:	b8ffffcc 	andi	r3,r23,65535
  80aaa4:	d8c00415 	stw	r3,16(sp)
  80aaa8:	d9000217 	ldw	r4,8(sp)
  80aaac:	d9400417 	ldw	r5,16(sp)
  80aab0:	1004943a 	slli	r2,r2,16
  80aab4:	2006d43a 	srli	r3,r4,16
  80aab8:	8560983a 	sll	r16,r16,r21
  80aabc:	2f23383a 	mul	r17,r5,fp
  80aac0:	10c4b03a 	or	r2,r2,r3
  80aac4:	dc000015 	stw	r16,0(sp)
  80aac8:	b56c983a 	sll	r22,r22,r21
  80aacc:	1440032e 	bgeu	r2,r17,80aadc <__umoddi3+0x404>
  80aad0:	15c5883a 	add	r2,r2,r23
  80aad4:	e73fffc4 	addi	fp,fp,-1
  80aad8:	15c05d2e 	bgeu	r2,r23,80ac50 <__umoddi3+0x578>
  80aadc:	1463c83a 	sub	r17,r2,r17
  80aae0:	8809883a 	mov	r4,r17
  80aae4:	a00b883a 	mov	r5,r20
  80aae8:	080bef00 	call	80bef0 <__udivsi3>
  80aaec:	8809883a 	mov	r4,r17
  80aaf0:	a00b883a 	mov	r5,r20
  80aaf4:	1021883a 	mov	r16,r2
  80aaf8:	080bef80 	call	80bef8 <__umodsi3>
  80aafc:	d8c00417 	ldw	r3,16(sp)
  80ab00:	d9000217 	ldw	r4,8(sp)
  80ab04:	1004943a 	slli	r2,r2,16
  80ab08:	1c23383a 	mul	r17,r3,r16
  80ab0c:	20ffffcc 	andi	r3,r4,65535
  80ab10:	10ceb03a 	or	r7,r2,r3
  80ab14:	3c40032e 	bgeu	r7,r17,80ab24 <__umoddi3+0x44c>
  80ab18:	3dcf883a 	add	r7,r7,r23
  80ab1c:	843fffc4 	addi	r16,r16,-1
  80ab20:	3dc0472e 	bgeu	r7,r23,80ac40 <__umoddi3+0x568>
  80ab24:	e004943a 	slli	r2,fp,16
  80ab28:	d9400017 	ldw	r5,0(sp)
  80ab2c:	3c4fc83a 	sub	r7,r7,r17
  80ab30:	8084b03a 	or	r2,r16,r2
  80ab34:	28ffffcc 	andi	r3,r5,65535
  80ab38:	280cd43a 	srli	r6,r5,16
  80ab3c:	100ad43a 	srli	r5,r2,16
  80ab40:	10bfffcc 	andi	r2,r2,65535
  80ab44:	10d1383a 	mul	r8,r2,r3
  80ab48:	28c7383a 	mul	r3,r5,r3
  80ab4c:	1185383a 	mul	r2,r2,r6
  80ab50:	4008d43a 	srli	r4,r8,16
  80ab54:	298b383a 	mul	r5,r5,r6
  80ab58:	10c5883a 	add	r2,r2,r3
  80ab5c:	2089883a 	add	r4,r4,r2
  80ab60:	20c0022e 	bgeu	r4,r3,80ab6c <__umoddi3+0x494>
  80ab64:	00800074 	movhi	r2,1
  80ab68:	288b883a 	add	r5,r5,r2
  80ab6c:	2004d43a 	srli	r2,r4,16
  80ab70:	2008943a 	slli	r4,r4,16
  80ab74:	40ffffcc 	andi	r3,r8,65535
  80ab78:	288b883a 	add	r5,r5,r2
  80ab7c:	20c9883a 	add	r4,r4,r3
  80ab80:	39400b36 	bltu	r7,r5,80abb0 <__umoddi3+0x4d8>
  80ab84:	39403d26 	beq	r7,r5,80ac7c <__umoddi3+0x5a4>
  80ab88:	394bc83a 	sub	r5,r7,r5
  80ab8c:	00000f06 	br	80abcc <__umoddi3+0x4f4>
  80ab90:	30c5c83a 	sub	r2,r6,r3
  80ab94:	1839883a 	mov	fp,r3
  80ab98:	b084d83a 	srl	r2,r22,r2
  80ab9c:	a0c6983a 	sll	r3,r20,r3
  80aba0:	8720983a 	sll	r16,r16,fp
  80aba4:	b72c983a 	sll	r22,r22,fp
  80aba8:	18a8b03a 	or	r20,r3,r2
  80abac:	003f3a06 	br	80a898 <__umoddi3+0x1c0>
  80abb0:	d8c00017 	ldw	r3,0(sp)
  80abb4:	20c5c83a 	sub	r2,r4,r3
  80abb8:	2089803a 	cmpltu	r4,r4,r2
  80abbc:	2dc7c83a 	sub	r3,r5,r23
  80abc0:	1907c83a 	sub	r3,r3,r4
  80abc4:	38cbc83a 	sub	r5,r7,r3
  80abc8:	1009883a 	mov	r4,r2
  80abcc:	b105c83a 	sub	r2,r22,r4
  80abd0:	b087803a 	cmpltu	r3,r22,r2
  80abd4:	28c7c83a 	sub	r3,r5,r3
  80abd8:	d9400317 	ldw	r5,12(sp)
  80abdc:	1544d83a 	srl	r2,r2,r21
  80abe0:	1948983a 	sll	r4,r3,r5
  80abe4:	1d46d83a 	srl	r3,r3,r21
  80abe8:	20a4b03a 	or	r18,r4,r2
  80abec:	9011883a 	mov	r8,r18
  80abf0:	1813883a 	mov	r9,r3
  80abf4:	003ef606 	br	80a7d0 <__umoddi3+0xf8>
  80abf8:	01400604 	movi	r5,24
  80abfc:	2805883a 	mov	r2,r5
  80ac00:	003ecc06 	br	80a734 <__umoddi3+0x5c>
  80ac04:	01400204 	movi	r5,8
  80ac08:	2805883a 	mov	r2,r5
  80ac0c:	003ec906 	br	80a734 <__umoddi3+0x5c>
  80ac10:	01400204 	movi	r5,8
  80ac14:	2805883a 	mov	r2,r5
  80ac18:	003f0106 	br	80a820 <__umoddi3+0x148>
  80ac1c:	01400204 	movi	r5,8
  80ac20:	2805883a 	mov	r2,r5
  80ac24:	003f1206 	br	80a870 <__umoddi3+0x198>
  80ac28:	01400604 	movi	r5,24
  80ac2c:	2805883a 	mov	r2,r5
  80ac30:	003f0f06 	br	80a870 <__umoddi3+0x198>
  80ac34:	01400604 	movi	r5,24
  80ac38:	2805883a 	mov	r2,r5
  80ac3c:	003ef806 	br	80a820 <__umoddi3+0x148>
  80ac40:	3c7fb82e 	bgeu	r7,r17,80ab24 <__umoddi3+0x44c>
  80ac44:	843fffc4 	addi	r16,r16,-1
  80ac48:	3dcf883a 	add	r7,r7,r23
  80ac4c:	003fb506 	br	80ab24 <__umoddi3+0x44c>
  80ac50:	147fa22e 	bgeu	r2,r17,80aadc <__umoddi3+0x404>
  80ac54:	e73fffc4 	addi	fp,fp,-1
  80ac58:	15c5883a 	add	r2,r2,r23
  80ac5c:	003f9f06 	br	80aadc <__umoddi3+0x404>
  80ac60:	147f692e 	bgeu	r2,r17,80aa08 <__umoddi3+0x330>
  80ac64:	1405883a 	add	r2,r2,r16
  80ac68:	003f6706 	br	80aa08 <__umoddi3+0x330>
  80ac6c:	1405883a 	add	r2,r2,r16
  80ac70:	003f1906 	br	80a8d8 <__umoddi3+0x200>
  80ac74:	1405883a 	add	r2,r2,r16
  80ac78:	003ec906 	br	80a7a0 <__umoddi3+0xc8>
  80ac7c:	b13fcc36 	bltu	r22,r4,80abb0 <__umoddi3+0x4d8>
  80ac80:	000b883a 	mov	r5,zero
  80ac84:	003fd106 	br	80abcc <__umoddi3+0x4f4>

0080ac88 <_fpadd_parts>:
  80ac88:	defff804 	addi	sp,sp,-32
  80ac8c:	dcc00315 	stw	r19,12(sp)
  80ac90:	2027883a 	mov	r19,r4
  80ac94:	21000017 	ldw	r4,0(r4)
  80ac98:	00c00044 	movi	r3,1
  80ac9c:	dd400515 	stw	r21,20(sp)
  80aca0:	dd000415 	stw	r20,16(sp)
  80aca4:	ddc00715 	stw	r23,28(sp)
  80aca8:	dd800615 	stw	r22,24(sp)
  80acac:	dc800215 	stw	r18,8(sp)
  80acb0:	dc400115 	stw	r17,4(sp)
  80acb4:	dc000015 	stw	r16,0(sp)
  80acb8:	282b883a 	mov	r21,r5
  80acbc:	3029883a 	mov	r20,r6
  80acc0:	1900632e 	bgeu	r3,r4,80ae50 <_fpadd_parts+0x1c8>
  80acc4:	28800017 	ldw	r2,0(r5)
  80acc8:	1880812e 	bgeu	r3,r2,80aed0 <_fpadd_parts+0x248>
  80accc:	00c00104 	movi	r3,4
  80acd0:	20c0dc26 	beq	r4,r3,80b044 <_fpadd_parts+0x3bc>
  80acd4:	10c07e26 	beq	r2,r3,80aed0 <_fpadd_parts+0x248>
  80acd8:	00c00084 	movi	r3,2
  80acdc:	10c06726 	beq	r2,r3,80ae7c <_fpadd_parts+0x1f4>
  80ace0:	20c07b26 	beq	r4,r3,80aed0 <_fpadd_parts+0x248>
  80ace4:	9dc00217 	ldw	r23,8(r19)
  80ace8:	28c00217 	ldw	r3,8(r5)
  80acec:	9c400317 	ldw	r17,12(r19)
  80acf0:	2bc00317 	ldw	r15,12(r5)
  80acf4:	b8cdc83a 	sub	r6,r23,r3
  80acf8:	9c800417 	ldw	r18,16(r19)
  80acfc:	2c000417 	ldw	r16,16(r5)
  80ad00:	3009883a 	mov	r4,r6
  80ad04:	30009716 	blt	r6,zero,80af64 <_fpadd_parts+0x2dc>
  80ad08:	00800fc4 	movi	r2,63
  80ad0c:	11806b16 	blt	r2,r6,80aebc <_fpadd_parts+0x234>
  80ad10:	0100a40e 	bge	zero,r4,80afa4 <_fpadd_parts+0x31c>
  80ad14:	35bff804 	addi	r22,r6,-32
  80ad18:	b000bc16 	blt	r22,zero,80b00c <_fpadd_parts+0x384>
  80ad1c:	8596d83a 	srl	r11,r16,r22
  80ad20:	0019883a 	mov	r12,zero
  80ad24:	0013883a 	mov	r9,zero
  80ad28:	01000044 	movi	r4,1
  80ad2c:	0015883a 	mov	r10,zero
  80ad30:	b000be16 	blt	r22,zero,80b02c <_fpadd_parts+0x3a4>
  80ad34:	2590983a 	sll	r8,r4,r22
  80ad38:	000f883a 	mov	r7,zero
  80ad3c:	00bfffc4 	movi	r2,-1
  80ad40:	3889883a 	add	r4,r7,r2
  80ad44:	408b883a 	add	r5,r8,r2
  80ad48:	21cd803a 	cmpltu	r6,r4,r7
  80ad4c:	314b883a 	add	r5,r6,r5
  80ad50:	7904703a 	and	r2,r15,r4
  80ad54:	8146703a 	and	r3,r16,r5
  80ad58:	10c4b03a 	or	r2,r2,r3
  80ad5c:	10000226 	beq	r2,zero,80ad68 <_fpadd_parts+0xe0>
  80ad60:	02400044 	movi	r9,1
  80ad64:	0015883a 	mov	r10,zero
  80ad68:	5a5eb03a 	or	r15,r11,r9
  80ad6c:	62a0b03a 	or	r16,r12,r10
  80ad70:	99400117 	ldw	r5,4(r19)
  80ad74:	a8800117 	ldw	r2,4(r21)
  80ad78:	28806e26 	beq	r5,r2,80af34 <_fpadd_parts+0x2ac>
  80ad7c:	28006626 	beq	r5,zero,80af18 <_fpadd_parts+0x290>
  80ad80:	7c45c83a 	sub	r2,r15,r17
  80ad84:	7889803a 	cmpltu	r4,r15,r2
  80ad88:	8487c83a 	sub	r3,r16,r18
  80ad8c:	1909c83a 	sub	r4,r3,r4
  80ad90:	100d883a 	mov	r6,r2
  80ad94:	200f883a 	mov	r7,r4
  80ad98:	38007716 	blt	r7,zero,80af78 <_fpadd_parts+0x2f0>
  80ad9c:	a5c00215 	stw	r23,8(r20)
  80ada0:	a1c00415 	stw	r7,16(r20)
  80ada4:	a0000115 	stw	zero,4(r20)
  80ada8:	a1800315 	stw	r6,12(r20)
  80adac:	a2000317 	ldw	r8,12(r20)
  80adb0:	a2400417 	ldw	r9,16(r20)
  80adb4:	00bfffc4 	movi	r2,-1
  80adb8:	408b883a 	add	r5,r8,r2
  80adbc:	2a09803a 	cmpltu	r4,r5,r8
  80adc0:	488d883a 	add	r6,r9,r2
  80adc4:	01c40034 	movhi	r7,4096
  80adc8:	39ffffc4 	addi	r7,r7,-1
  80adcc:	218d883a 	add	r6,r4,r6
  80add0:	39801736 	bltu	r7,r6,80ae30 <_fpadd_parts+0x1a8>
  80add4:	31c06526 	beq	r6,r7,80af6c <_fpadd_parts+0x2e4>
  80add8:	a3000217 	ldw	r12,8(r20)
  80addc:	4209883a 	add	r4,r8,r8
  80ade0:	00bfffc4 	movi	r2,-1
  80ade4:	220f803a 	cmpltu	r7,r4,r8
  80ade8:	4a4b883a 	add	r5,r9,r9
  80adec:	394f883a 	add	r7,r7,r5
  80adf0:	2095883a 	add	r10,r4,r2
  80adf4:	3897883a 	add	r11,r7,r2
  80adf8:	510d803a 	cmpltu	r6,r10,r4
  80adfc:	6099883a 	add	r12,r12,r2
  80ae00:	32d7883a 	add	r11,r6,r11
  80ae04:	00840034 	movhi	r2,4096
  80ae08:	10bfffc4 	addi	r2,r2,-1
  80ae0c:	2011883a 	mov	r8,r4
  80ae10:	3813883a 	mov	r9,r7
  80ae14:	a1000315 	stw	r4,12(r20)
  80ae18:	a1c00415 	stw	r7,16(r20)
  80ae1c:	a3000215 	stw	r12,8(r20)
  80ae20:	12c00336 	bltu	r2,r11,80ae30 <_fpadd_parts+0x1a8>
  80ae24:	58bfed1e 	bne	r11,r2,80addc <_fpadd_parts+0x154>
  80ae28:	00bfff84 	movi	r2,-2
  80ae2c:	12bfeb2e 	bgeu	r2,r10,80addc <_fpadd_parts+0x154>
  80ae30:	a2800417 	ldw	r10,16(r20)
  80ae34:	008000c4 	movi	r2,3
  80ae38:	00c80034 	movhi	r3,8192
  80ae3c:	18ffffc4 	addi	r3,r3,-1
  80ae40:	a2400317 	ldw	r9,12(r20)
  80ae44:	a0800015 	stw	r2,0(r20)
  80ae48:	1a802336 	bltu	r3,r10,80aed8 <_fpadd_parts+0x250>
  80ae4c:	a027883a 	mov	r19,r20
  80ae50:	9805883a 	mov	r2,r19
  80ae54:	ddc00717 	ldw	r23,28(sp)
  80ae58:	dd800617 	ldw	r22,24(sp)
  80ae5c:	dd400517 	ldw	r21,20(sp)
  80ae60:	dd000417 	ldw	r20,16(sp)
  80ae64:	dcc00317 	ldw	r19,12(sp)
  80ae68:	dc800217 	ldw	r18,8(sp)
  80ae6c:	dc400117 	ldw	r17,4(sp)
  80ae70:	dc000017 	ldw	r16,0(sp)
  80ae74:	dec00804 	addi	sp,sp,32
  80ae78:	f800283a 	ret
  80ae7c:	20fff41e 	bne	r4,r3,80ae50 <_fpadd_parts+0x1c8>
  80ae80:	31000015 	stw	r4,0(r6)
  80ae84:	98800117 	ldw	r2,4(r19)
  80ae88:	30800115 	stw	r2,4(r6)
  80ae8c:	98c00217 	ldw	r3,8(r19)
  80ae90:	30c00215 	stw	r3,8(r6)
  80ae94:	98800317 	ldw	r2,12(r19)
  80ae98:	30800315 	stw	r2,12(r6)
  80ae9c:	98c00417 	ldw	r3,16(r19)
  80aea0:	30c00415 	stw	r3,16(r6)
  80aea4:	98800117 	ldw	r2,4(r19)
  80aea8:	28c00117 	ldw	r3,4(r5)
  80aeac:	3027883a 	mov	r19,r6
  80aeb0:	10c4703a 	and	r2,r2,r3
  80aeb4:	30800115 	stw	r2,4(r6)
  80aeb8:	003fe506 	br	80ae50 <_fpadd_parts+0x1c8>
  80aebc:	1dc02616 	blt	r3,r23,80af58 <_fpadd_parts+0x2d0>
  80aec0:	0023883a 	mov	r17,zero
  80aec4:	182f883a 	mov	r23,r3
  80aec8:	0025883a 	mov	r18,zero
  80aecc:	003fa806 	br	80ad70 <_fpadd_parts+0xe8>
  80aed0:	a827883a 	mov	r19,r21
  80aed4:	003fde06 	br	80ae50 <_fpadd_parts+0x1c8>
  80aed8:	01800044 	movi	r6,1
  80aedc:	500497fa 	slli	r2,r10,31
  80aee0:	4808d07a 	srli	r4,r9,1
  80aee4:	518ad83a 	srl	r5,r10,r6
  80aee8:	a2000217 	ldw	r8,8(r20)
  80aeec:	1108b03a 	or	r4,r2,r4
  80aef0:	0007883a 	mov	r3,zero
  80aef4:	4984703a 	and	r2,r9,r6
  80aef8:	208cb03a 	or	r6,r4,r2
  80aefc:	28ceb03a 	or	r7,r5,r3
  80af00:	42000044 	addi	r8,r8,1
  80af04:	a027883a 	mov	r19,r20
  80af08:	a1c00415 	stw	r7,16(r20)
  80af0c:	a2000215 	stw	r8,8(r20)
  80af10:	a1800315 	stw	r6,12(r20)
  80af14:	003fce06 	br	80ae50 <_fpadd_parts+0x1c8>
  80af18:	8bc5c83a 	sub	r2,r17,r15
  80af1c:	8889803a 	cmpltu	r4,r17,r2
  80af20:	9407c83a 	sub	r3,r18,r16
  80af24:	1909c83a 	sub	r4,r3,r4
  80af28:	100d883a 	mov	r6,r2
  80af2c:	200f883a 	mov	r7,r4
  80af30:	003f9906 	br	80ad98 <_fpadd_parts+0x110>
  80af34:	7c45883a 	add	r2,r15,r17
  80af38:	13c9803a 	cmpltu	r4,r2,r15
  80af3c:	8487883a 	add	r3,r16,r18
  80af40:	20c9883a 	add	r4,r4,r3
  80af44:	a1400115 	stw	r5,4(r20)
  80af48:	a5c00215 	stw	r23,8(r20)
  80af4c:	a0800315 	stw	r2,12(r20)
  80af50:	a1000415 	stw	r4,16(r20)
  80af54:	003fb606 	br	80ae30 <_fpadd_parts+0x1a8>
  80af58:	001f883a 	mov	r15,zero
  80af5c:	0021883a 	mov	r16,zero
  80af60:	003f8306 	br	80ad70 <_fpadd_parts+0xe8>
  80af64:	018dc83a 	sub	r6,zero,r6
  80af68:	003f6706 	br	80ad08 <_fpadd_parts+0x80>
  80af6c:	00bfff84 	movi	r2,-2
  80af70:	117faf36 	bltu	r2,r5,80ae30 <_fpadd_parts+0x1a8>
  80af74:	003f9806 	br	80add8 <_fpadd_parts+0x150>
  80af78:	0005883a 	mov	r2,zero
  80af7c:	1189c83a 	sub	r4,r2,r6
  80af80:	1105803a 	cmpltu	r2,r2,r4
  80af84:	01cbc83a 	sub	r5,zero,r7
  80af88:	2885c83a 	sub	r2,r5,r2
  80af8c:	01800044 	movi	r6,1
  80af90:	a1800115 	stw	r6,4(r20)
  80af94:	a5c00215 	stw	r23,8(r20)
  80af98:	a1000315 	stw	r4,12(r20)
  80af9c:	a0800415 	stw	r2,16(r20)
  80afa0:	003f8206 	br	80adac <_fpadd_parts+0x124>
  80afa4:	203f7226 	beq	r4,zero,80ad70 <_fpadd_parts+0xe8>
  80afa8:	35bff804 	addi	r22,r6,-32
  80afac:	b9af883a 	add	r23,r23,r6
  80afb0:	b0003116 	blt	r22,zero,80b078 <_fpadd_parts+0x3f0>
  80afb4:	959ad83a 	srl	r13,r18,r22
  80afb8:	001d883a 	mov	r14,zero
  80afbc:	000f883a 	mov	r7,zero
  80afc0:	01000044 	movi	r4,1
  80afc4:	0011883a 	mov	r8,zero
  80afc8:	b0002516 	blt	r22,zero,80b060 <_fpadd_parts+0x3d8>
  80afcc:	2594983a 	sll	r10,r4,r22
  80afd0:	0013883a 	mov	r9,zero
  80afd4:	00bfffc4 	movi	r2,-1
  80afd8:	4889883a 	add	r4,r9,r2
  80afdc:	508b883a 	add	r5,r10,r2
  80afe0:	224d803a 	cmpltu	r6,r4,r9
  80afe4:	314b883a 	add	r5,r6,r5
  80afe8:	8904703a 	and	r2,r17,r4
  80afec:	9146703a 	and	r3,r18,r5
  80aff0:	10c4b03a 	or	r2,r2,r3
  80aff4:	10000226 	beq	r2,zero,80b000 <_fpadd_parts+0x378>
  80aff8:	01c00044 	movi	r7,1
  80affc:	0011883a 	mov	r8,zero
  80b000:	69e2b03a 	or	r17,r13,r7
  80b004:	7224b03a 	or	r18,r14,r8
  80b008:	003f5906 	br	80ad70 <_fpadd_parts+0xe8>
  80b00c:	8407883a 	add	r3,r16,r16
  80b010:	008007c4 	movi	r2,31
  80b014:	1185c83a 	sub	r2,r2,r6
  80b018:	1886983a 	sll	r3,r3,r2
  80b01c:	7996d83a 	srl	r11,r15,r6
  80b020:	8198d83a 	srl	r12,r16,r6
  80b024:	1ad6b03a 	or	r11,r3,r11
  80b028:	003f3e06 	br	80ad24 <_fpadd_parts+0x9c>
  80b02c:	2006d07a 	srli	r3,r4,1
  80b030:	008007c4 	movi	r2,31
  80b034:	1185c83a 	sub	r2,r2,r6
  80b038:	1890d83a 	srl	r8,r3,r2
  80b03c:	218e983a 	sll	r7,r4,r6
  80b040:	003f3e06 	br	80ad3c <_fpadd_parts+0xb4>
  80b044:	113f821e 	bne	r2,r4,80ae50 <_fpadd_parts+0x1c8>
  80b048:	28c00117 	ldw	r3,4(r5)
  80b04c:	98800117 	ldw	r2,4(r19)
  80b050:	10ff7f26 	beq	r2,r3,80ae50 <_fpadd_parts+0x1c8>
  80b054:	04c02074 	movhi	r19,129
  80b058:	9cc29204 	addi	r19,r19,2632
  80b05c:	003f7c06 	br	80ae50 <_fpadd_parts+0x1c8>
  80b060:	2006d07a 	srli	r3,r4,1
  80b064:	008007c4 	movi	r2,31
  80b068:	1185c83a 	sub	r2,r2,r6
  80b06c:	1894d83a 	srl	r10,r3,r2
  80b070:	2192983a 	sll	r9,r4,r6
  80b074:	003fd706 	br	80afd4 <_fpadd_parts+0x34c>
  80b078:	9487883a 	add	r3,r18,r18
  80b07c:	008007c4 	movi	r2,31
  80b080:	1185c83a 	sub	r2,r2,r6
  80b084:	1886983a 	sll	r3,r3,r2
  80b088:	899ad83a 	srl	r13,r17,r6
  80b08c:	919cd83a 	srl	r14,r18,r6
  80b090:	1b5ab03a 	or	r13,r3,r13
  80b094:	003fc906 	br	80afbc <_fpadd_parts+0x334>

0080b098 <__subdf3>:
  80b098:	deffea04 	addi	sp,sp,-88
  80b09c:	dcc01415 	stw	r19,80(sp)
  80b0a0:	dcc00404 	addi	r19,sp,16
  80b0a4:	2011883a 	mov	r8,r4
  80b0a8:	2813883a 	mov	r9,r5
  80b0ac:	dc401315 	stw	r17,76(sp)
  80b0b0:	d809883a 	mov	r4,sp
  80b0b4:	980b883a 	mov	r5,r19
  80b0b8:	dc400904 	addi	r17,sp,36
  80b0bc:	dfc01515 	stw	ra,84(sp)
  80b0c0:	da400115 	stw	r9,4(sp)
  80b0c4:	d9c00315 	stw	r7,12(sp)
  80b0c8:	da000015 	stw	r8,0(sp)
  80b0cc:	d9800215 	stw	r6,8(sp)
  80b0d0:	080c32c0 	call	80c32c <__unpack_d>
  80b0d4:	d9000204 	addi	r4,sp,8
  80b0d8:	880b883a 	mov	r5,r17
  80b0dc:	080c32c0 	call	80c32c <__unpack_d>
  80b0e0:	d8800a17 	ldw	r2,40(sp)
  80b0e4:	880b883a 	mov	r5,r17
  80b0e8:	9809883a 	mov	r4,r19
  80b0ec:	d9800e04 	addi	r6,sp,56
  80b0f0:	1080005c 	xori	r2,r2,1
  80b0f4:	d8800a15 	stw	r2,40(sp)
  80b0f8:	080ac880 	call	80ac88 <_fpadd_parts>
  80b0fc:	1009883a 	mov	r4,r2
  80b100:	080c0180 	call	80c018 <__pack_d>
  80b104:	dfc01517 	ldw	ra,84(sp)
  80b108:	dcc01417 	ldw	r19,80(sp)
  80b10c:	dc401317 	ldw	r17,76(sp)
  80b110:	dec01604 	addi	sp,sp,88
  80b114:	f800283a 	ret

0080b118 <__adddf3>:
  80b118:	deffea04 	addi	sp,sp,-88
  80b11c:	dcc01415 	stw	r19,80(sp)
  80b120:	dcc00404 	addi	r19,sp,16
  80b124:	2011883a 	mov	r8,r4
  80b128:	2813883a 	mov	r9,r5
  80b12c:	dc401315 	stw	r17,76(sp)
  80b130:	d809883a 	mov	r4,sp
  80b134:	980b883a 	mov	r5,r19
  80b138:	dc400904 	addi	r17,sp,36
  80b13c:	dfc01515 	stw	ra,84(sp)
  80b140:	da400115 	stw	r9,4(sp)
  80b144:	d9c00315 	stw	r7,12(sp)
  80b148:	da000015 	stw	r8,0(sp)
  80b14c:	d9800215 	stw	r6,8(sp)
  80b150:	080c32c0 	call	80c32c <__unpack_d>
  80b154:	d9000204 	addi	r4,sp,8
  80b158:	880b883a 	mov	r5,r17
  80b15c:	080c32c0 	call	80c32c <__unpack_d>
  80b160:	d9800e04 	addi	r6,sp,56
  80b164:	9809883a 	mov	r4,r19
  80b168:	880b883a 	mov	r5,r17
  80b16c:	080ac880 	call	80ac88 <_fpadd_parts>
  80b170:	1009883a 	mov	r4,r2
  80b174:	080c0180 	call	80c018 <__pack_d>
  80b178:	dfc01517 	ldw	ra,84(sp)
  80b17c:	dcc01417 	ldw	r19,80(sp)
  80b180:	dc401317 	ldw	r17,76(sp)
  80b184:	dec01604 	addi	sp,sp,88
  80b188:	f800283a 	ret

0080b18c <__muldf3>:
  80b18c:	deffe004 	addi	sp,sp,-128
  80b190:	dc401815 	stw	r17,96(sp)
  80b194:	dc400404 	addi	r17,sp,16
  80b198:	2011883a 	mov	r8,r4
  80b19c:	2813883a 	mov	r9,r5
  80b1a0:	dc001715 	stw	r16,92(sp)
  80b1a4:	d809883a 	mov	r4,sp
  80b1a8:	880b883a 	mov	r5,r17
  80b1ac:	dc000904 	addi	r16,sp,36
  80b1b0:	dfc01f15 	stw	ra,124(sp)
  80b1b4:	da400115 	stw	r9,4(sp)
  80b1b8:	d9c00315 	stw	r7,12(sp)
  80b1bc:	da000015 	stw	r8,0(sp)
  80b1c0:	d9800215 	stw	r6,8(sp)
  80b1c4:	ddc01e15 	stw	r23,120(sp)
  80b1c8:	dd801d15 	stw	r22,116(sp)
  80b1cc:	dd401c15 	stw	r21,112(sp)
  80b1d0:	dd001b15 	stw	r20,108(sp)
  80b1d4:	dcc01a15 	stw	r19,104(sp)
  80b1d8:	dc801915 	stw	r18,100(sp)
  80b1dc:	080c32c0 	call	80c32c <__unpack_d>
  80b1e0:	d9000204 	addi	r4,sp,8
  80b1e4:	800b883a 	mov	r5,r16
  80b1e8:	080c32c0 	call	80c32c <__unpack_d>
  80b1ec:	d9000417 	ldw	r4,16(sp)
  80b1f0:	00800044 	movi	r2,1
  80b1f4:	1100102e 	bgeu	r2,r4,80b238 <__muldf3+0xac>
  80b1f8:	d8c00917 	ldw	r3,36(sp)
  80b1fc:	10c0062e 	bgeu	r2,r3,80b218 <__muldf3+0x8c>
  80b200:	00800104 	movi	r2,4
  80b204:	20800a26 	beq	r4,r2,80b230 <__muldf3+0xa4>
  80b208:	1880cc26 	beq	r3,r2,80b53c <__muldf3+0x3b0>
  80b20c:	00800084 	movi	r2,2
  80b210:	20800926 	beq	r4,r2,80b238 <__muldf3+0xac>
  80b214:	1880191e 	bne	r3,r2,80b27c <__muldf3+0xf0>
  80b218:	d8c00a17 	ldw	r3,40(sp)
  80b21c:	d8800517 	ldw	r2,20(sp)
  80b220:	8009883a 	mov	r4,r16
  80b224:	10c4c03a 	cmpne	r2,r2,r3
  80b228:	d8800a15 	stw	r2,40(sp)
  80b22c:	00000706 	br	80b24c <__muldf3+0xc0>
  80b230:	00800084 	movi	r2,2
  80b234:	1880c326 	beq	r3,r2,80b544 <__muldf3+0x3b8>
  80b238:	d8800517 	ldw	r2,20(sp)
  80b23c:	d8c00a17 	ldw	r3,40(sp)
  80b240:	8809883a 	mov	r4,r17
  80b244:	10c4c03a 	cmpne	r2,r2,r3
  80b248:	d8800515 	stw	r2,20(sp)
  80b24c:	080c0180 	call	80c018 <__pack_d>
  80b250:	dfc01f17 	ldw	ra,124(sp)
  80b254:	ddc01e17 	ldw	r23,120(sp)
  80b258:	dd801d17 	ldw	r22,116(sp)
  80b25c:	dd401c17 	ldw	r21,112(sp)
  80b260:	dd001b17 	ldw	r20,108(sp)
  80b264:	dcc01a17 	ldw	r19,104(sp)
  80b268:	dc801917 	ldw	r18,100(sp)
  80b26c:	dc401817 	ldw	r17,96(sp)
  80b270:	dc001717 	ldw	r16,92(sp)
  80b274:	dec02004 	addi	sp,sp,128
  80b278:	f800283a 	ret
  80b27c:	dd800717 	ldw	r22,28(sp)
  80b280:	dc800c17 	ldw	r18,48(sp)
  80b284:	002b883a 	mov	r21,zero
  80b288:	0023883a 	mov	r17,zero
  80b28c:	a80b883a 	mov	r5,r21
  80b290:	b00d883a 	mov	r6,r22
  80b294:	880f883a 	mov	r7,r17
  80b298:	ddc00817 	ldw	r23,32(sp)
  80b29c:	dcc00d17 	ldw	r19,52(sp)
  80b2a0:	9009883a 	mov	r4,r18
  80b2a4:	080bf000 	call	80bf00 <__muldi3>
  80b2a8:	001b883a 	mov	r13,zero
  80b2ac:	680f883a 	mov	r7,r13
  80b2b0:	b009883a 	mov	r4,r22
  80b2b4:	000b883a 	mov	r5,zero
  80b2b8:	980d883a 	mov	r6,r19
  80b2bc:	b82d883a 	mov	r22,r23
  80b2c0:	002f883a 	mov	r23,zero
  80b2c4:	db401615 	stw	r13,88(sp)
  80b2c8:	d8801315 	stw	r2,76(sp)
  80b2cc:	d8c01415 	stw	r3,80(sp)
  80b2d0:	dcc01515 	stw	r19,84(sp)
  80b2d4:	080bf000 	call	80bf00 <__muldi3>
  80b2d8:	b00d883a 	mov	r6,r22
  80b2dc:	000b883a 	mov	r5,zero
  80b2e0:	9009883a 	mov	r4,r18
  80b2e4:	b80f883a 	mov	r7,r23
  80b2e8:	1021883a 	mov	r16,r2
  80b2ec:	1823883a 	mov	r17,r3
  80b2f0:	080bf000 	call	80bf00 <__muldi3>
  80b2f4:	8085883a 	add	r2,r16,r2
  80b2f8:	140d803a 	cmpltu	r6,r2,r16
  80b2fc:	88c7883a 	add	r3,r17,r3
  80b300:	30cd883a 	add	r6,r6,r3
  80b304:	1029883a 	mov	r20,r2
  80b308:	302b883a 	mov	r21,r6
  80b30c:	da801317 	ldw	r10,76(sp)
  80b310:	dac01417 	ldw	r11,80(sp)
  80b314:	db001517 	ldw	r12,84(sp)
  80b318:	db401617 	ldw	r13,88(sp)
  80b31c:	3440612e 	bgeu	r6,r17,80b4a4 <__muldf3+0x318>
  80b320:	0009883a 	mov	r4,zero
  80b324:	5105883a 	add	r2,r10,r4
  80b328:	128d803a 	cmpltu	r6,r2,r10
  80b32c:	5d07883a 	add	r3,r11,r20
  80b330:	30cd883a 	add	r6,r6,r3
  80b334:	0021883a 	mov	r16,zero
  80b338:	04400044 	movi	r17,1
  80b33c:	1025883a 	mov	r18,r2
  80b340:	3027883a 	mov	r19,r6
  80b344:	32c06236 	bltu	r6,r11,80b4d0 <__muldf3+0x344>
  80b348:	59807a26 	beq	r11,r6,80b534 <__muldf3+0x3a8>
  80b34c:	680b883a 	mov	r5,r13
  80b350:	b80f883a 	mov	r7,r23
  80b354:	6009883a 	mov	r4,r12
  80b358:	b00d883a 	mov	r6,r22
  80b35c:	080bf000 	call	80bf00 <__muldi3>
  80b360:	1009883a 	mov	r4,r2
  80b364:	000f883a 	mov	r7,zero
  80b368:	1545883a 	add	r2,r2,r21
  80b36c:	1111803a 	cmpltu	r8,r2,r4
  80b370:	19c7883a 	add	r3,r3,r7
  80b374:	40c7883a 	add	r3,r8,r3
  80b378:	88cb883a 	add	r5,r17,r3
  80b37c:	d8c00617 	ldw	r3,24(sp)
  80b380:	8089883a 	add	r4,r16,r2
  80b384:	d8800b17 	ldw	r2,44(sp)
  80b388:	18c00104 	addi	r3,r3,4
  80b38c:	240d803a 	cmpltu	r6,r4,r16
  80b390:	10c7883a 	add	r3,r2,r3
  80b394:	2013883a 	mov	r9,r4
  80b398:	d8800a17 	ldw	r2,40(sp)
  80b39c:	d9000517 	ldw	r4,20(sp)
  80b3a0:	314d883a 	add	r6,r6,r5
  80b3a4:	3015883a 	mov	r10,r6
  80b3a8:	2088c03a 	cmpne	r4,r4,r2
  80b3ac:	00880034 	movhi	r2,8192
  80b3b0:	10bfffc4 	addi	r2,r2,-1
  80b3b4:	d9000f15 	stw	r4,60(sp)
  80b3b8:	d8c01015 	stw	r3,64(sp)
  80b3bc:	1180162e 	bgeu	r2,r6,80b418 <__muldf3+0x28c>
  80b3c0:	1811883a 	mov	r8,r3
  80b3c4:	101f883a 	mov	r15,r2
  80b3c8:	980497fa 	slli	r2,r19,31
  80b3cc:	9016d07a 	srli	r11,r18,1
  80b3d0:	500697fa 	slli	r3,r10,31
  80b3d4:	480cd07a 	srli	r6,r9,1
  80b3d8:	500ed07a 	srli	r7,r10,1
  80b3dc:	12d6b03a 	or	r11,r2,r11
  80b3e0:	00800044 	movi	r2,1
  80b3e4:	198cb03a 	or	r6,r3,r6
  80b3e8:	4888703a 	and	r4,r9,r2
  80b3ec:	9818d07a 	srli	r12,r19,1
  80b3f0:	001b883a 	mov	r13,zero
  80b3f4:	03a00034 	movhi	r14,32768
  80b3f8:	3013883a 	mov	r9,r6
  80b3fc:	3815883a 	mov	r10,r7
  80b400:	4091883a 	add	r8,r8,r2
  80b404:	20000226 	beq	r4,zero,80b410 <__muldf3+0x284>
  80b408:	5b64b03a 	or	r18,r11,r13
  80b40c:	63a6b03a 	or	r19,r12,r14
  80b410:	7abfed36 	bltu	r15,r10,80b3c8 <__muldf3+0x23c>
  80b414:	da001015 	stw	r8,64(sp)
  80b418:	00840034 	movhi	r2,4096
  80b41c:	10bfffc4 	addi	r2,r2,-1
  80b420:	12801436 	bltu	r2,r10,80b474 <__muldf3+0x2e8>
  80b424:	da001017 	ldw	r8,64(sp)
  80b428:	101f883a 	mov	r15,r2
  80b42c:	4a45883a 	add	r2,r9,r9
  80b430:	124d803a 	cmpltu	r6,r2,r9
  80b434:	5287883a 	add	r3,r10,r10
  80b438:	9497883a 	add	r11,r18,r18
  80b43c:	5c8f803a 	cmpltu	r7,r11,r18
  80b440:	9cd9883a 	add	r12,r19,r19
  80b444:	01000044 	movi	r4,1
  80b448:	30cd883a 	add	r6,r6,r3
  80b44c:	3b0f883a 	add	r7,r7,r12
  80b450:	423fffc4 	addi	r8,r8,-1
  80b454:	1013883a 	mov	r9,r2
  80b458:	3015883a 	mov	r10,r6
  80b45c:	111ab03a 	or	r13,r2,r4
  80b460:	98003016 	blt	r19,zero,80b524 <__muldf3+0x398>
  80b464:	5825883a 	mov	r18,r11
  80b468:	3827883a 	mov	r19,r7
  80b46c:	7abfef2e 	bgeu	r15,r10,80b42c <__muldf3+0x2a0>
  80b470:	da001015 	stw	r8,64(sp)
  80b474:	00803fc4 	movi	r2,255
  80b478:	488e703a 	and	r7,r9,r2
  80b47c:	00802004 	movi	r2,128
  80b480:	0007883a 	mov	r3,zero
  80b484:	0011883a 	mov	r8,zero
  80b488:	38801826 	beq	r7,r2,80b4ec <__muldf3+0x360>
  80b48c:	008000c4 	movi	r2,3
  80b490:	d9000e04 	addi	r4,sp,56
  80b494:	da801215 	stw	r10,72(sp)
  80b498:	d8800e15 	stw	r2,56(sp)
  80b49c:	da401115 	stw	r9,68(sp)
  80b4a0:	003f6a06 	br	80b24c <__muldf3+0xc0>
  80b4a4:	89802126 	beq	r17,r6,80b52c <__muldf3+0x3a0>
  80b4a8:	0009883a 	mov	r4,zero
  80b4ac:	5105883a 	add	r2,r10,r4
  80b4b0:	128d803a 	cmpltu	r6,r2,r10
  80b4b4:	5d07883a 	add	r3,r11,r20
  80b4b8:	30cd883a 	add	r6,r6,r3
  80b4bc:	0021883a 	mov	r16,zero
  80b4c0:	0023883a 	mov	r17,zero
  80b4c4:	1025883a 	mov	r18,r2
  80b4c8:	3027883a 	mov	r19,r6
  80b4cc:	32ff9e2e 	bgeu	r6,r11,80b348 <__muldf3+0x1bc>
  80b4d0:	00800044 	movi	r2,1
  80b4d4:	8089883a 	add	r4,r16,r2
  80b4d8:	240d803a 	cmpltu	r6,r4,r16
  80b4dc:	344d883a 	add	r6,r6,r17
  80b4e0:	2021883a 	mov	r16,r4
  80b4e4:	3023883a 	mov	r17,r6
  80b4e8:	003f9806 	br	80b34c <__muldf3+0x1c0>
  80b4ec:	403fe71e 	bne	r8,zero,80b48c <__muldf3+0x300>
  80b4f0:	01004004 	movi	r4,256
  80b4f4:	4904703a 	and	r2,r9,r4
  80b4f8:	10c4b03a 	or	r2,r2,r3
  80b4fc:	103fe31e 	bne	r2,zero,80b48c <__muldf3+0x300>
  80b500:	94c4b03a 	or	r2,r18,r19
  80b504:	103fe126 	beq	r2,zero,80b48c <__muldf3+0x300>
  80b508:	49c5883a 	add	r2,r9,r7
  80b50c:	1251803a 	cmpltu	r8,r2,r9
  80b510:	4291883a 	add	r8,r8,r10
  80b514:	013fc004 	movi	r4,-256
  80b518:	1112703a 	and	r9,r2,r4
  80b51c:	4015883a 	mov	r10,r8
  80b520:	003fda06 	br	80b48c <__muldf3+0x300>
  80b524:	6813883a 	mov	r9,r13
  80b528:	003fce06 	br	80b464 <__muldf3+0x2d8>
  80b52c:	143f7c36 	bltu	r2,r16,80b320 <__muldf3+0x194>
  80b530:	003fdd06 	br	80b4a8 <__muldf3+0x31c>
  80b534:	12bf852e 	bgeu	r2,r10,80b34c <__muldf3+0x1c0>
  80b538:	003fe506 	br	80b4d0 <__muldf3+0x344>
  80b53c:	00800084 	movi	r2,2
  80b540:	20bf351e 	bne	r4,r2,80b218 <__muldf3+0x8c>
  80b544:	01002074 	movhi	r4,129
  80b548:	21029204 	addi	r4,r4,2632
  80b54c:	003f3f06 	br	80b24c <__muldf3+0xc0>

0080b550 <__divdf3>:
  80b550:	deffed04 	addi	sp,sp,-76
  80b554:	dcc01115 	stw	r19,68(sp)
  80b558:	dcc00404 	addi	r19,sp,16
  80b55c:	2011883a 	mov	r8,r4
  80b560:	2813883a 	mov	r9,r5
  80b564:	dc000e15 	stw	r16,56(sp)
  80b568:	d809883a 	mov	r4,sp
  80b56c:	980b883a 	mov	r5,r19
  80b570:	dc000904 	addi	r16,sp,36
  80b574:	dfc01215 	stw	ra,72(sp)
  80b578:	da400115 	stw	r9,4(sp)
  80b57c:	d9c00315 	stw	r7,12(sp)
  80b580:	da000015 	stw	r8,0(sp)
  80b584:	d9800215 	stw	r6,8(sp)
  80b588:	dc801015 	stw	r18,64(sp)
  80b58c:	dc400f15 	stw	r17,60(sp)
  80b590:	080c32c0 	call	80c32c <__unpack_d>
  80b594:	d9000204 	addi	r4,sp,8
  80b598:	800b883a 	mov	r5,r16
  80b59c:	080c32c0 	call	80c32c <__unpack_d>
  80b5a0:	d9000417 	ldw	r4,16(sp)
  80b5a4:	00800044 	movi	r2,1
  80b5a8:	11000b2e 	bgeu	r2,r4,80b5d8 <__divdf3+0x88>
  80b5ac:	d9400917 	ldw	r5,36(sp)
  80b5b0:	1140762e 	bgeu	r2,r5,80b78c <__divdf3+0x23c>
  80b5b4:	d8800517 	ldw	r2,20(sp)
  80b5b8:	d8c00a17 	ldw	r3,40(sp)
  80b5bc:	01800104 	movi	r6,4
  80b5c0:	10c4f03a 	xor	r2,r2,r3
  80b5c4:	d8800515 	stw	r2,20(sp)
  80b5c8:	21800226 	beq	r4,r6,80b5d4 <__divdf3+0x84>
  80b5cc:	00800084 	movi	r2,2
  80b5d0:	2080141e 	bne	r4,r2,80b624 <__divdf3+0xd4>
  80b5d4:	29000926 	beq	r5,r4,80b5fc <__divdf3+0xac>
  80b5d8:	9809883a 	mov	r4,r19
  80b5dc:	080c0180 	call	80c018 <__pack_d>
  80b5e0:	dfc01217 	ldw	ra,72(sp)
  80b5e4:	dcc01117 	ldw	r19,68(sp)
  80b5e8:	dc801017 	ldw	r18,64(sp)
  80b5ec:	dc400f17 	ldw	r17,60(sp)
  80b5f0:	dc000e17 	ldw	r16,56(sp)
  80b5f4:	dec01304 	addi	sp,sp,76
  80b5f8:	f800283a 	ret
  80b5fc:	01002074 	movhi	r4,129
  80b600:	21029204 	addi	r4,r4,2632
  80b604:	080c0180 	call	80c018 <__pack_d>
  80b608:	dfc01217 	ldw	ra,72(sp)
  80b60c:	dcc01117 	ldw	r19,68(sp)
  80b610:	dc801017 	ldw	r18,64(sp)
  80b614:	dc400f17 	ldw	r17,60(sp)
  80b618:	dc000e17 	ldw	r16,56(sp)
  80b61c:	dec01304 	addi	sp,sp,76
  80b620:	f800283a 	ret
  80b624:	29805b26 	beq	r5,r6,80b794 <__divdf3+0x244>
  80b628:	28802d26 	beq	r5,r2,80b6e0 <__divdf3+0x190>
  80b62c:	d8c00617 	ldw	r3,24(sp)
  80b630:	d8800b17 	ldw	r2,44(sp)
  80b634:	d9c00817 	ldw	r7,32(sp)
  80b638:	dc400d17 	ldw	r17,52(sp)
  80b63c:	188bc83a 	sub	r5,r3,r2
  80b640:	d9800717 	ldw	r6,28(sp)
  80b644:	dc000c17 	ldw	r16,48(sp)
  80b648:	d9400615 	stw	r5,24(sp)
  80b64c:	3c403836 	bltu	r7,r17,80b730 <__divdf3+0x1e0>
  80b650:	89c03626 	beq	r17,r7,80b72c <__divdf3+0x1dc>
  80b654:	0015883a 	mov	r10,zero
  80b658:	001d883a 	mov	r14,zero
  80b65c:	02c40034 	movhi	r11,4096
  80b660:	001f883a 	mov	r15,zero
  80b664:	003f883a 	mov	ra,zero
  80b668:	04800f44 	movi	r18,61
  80b66c:	00000f06 	br	80b6ac <__divdf3+0x15c>
  80b670:	601d883a 	mov	r14,r12
  80b674:	681f883a 	mov	r15,r13
  80b678:	400d883a 	mov	r6,r8
  80b67c:	100f883a 	mov	r7,r2
  80b680:	3191883a 	add	r8,r6,r6
  80b684:	5808d07a 	srli	r4,r11,1
  80b688:	4185803a 	cmpltu	r2,r8,r6
  80b68c:	39d3883a 	add	r9,r7,r7
  80b690:	28c6b03a 	or	r3,r5,r3
  80b694:	1245883a 	add	r2,r2,r9
  80b698:	1815883a 	mov	r10,r3
  80b69c:	2017883a 	mov	r11,r4
  80b6a0:	400d883a 	mov	r6,r8
  80b6a4:	100f883a 	mov	r7,r2
  80b6a8:	fc801726 	beq	ra,r18,80b708 <__divdf3+0x1b8>
  80b6ac:	580a97fa 	slli	r5,r11,31
  80b6b0:	5006d07a 	srli	r3,r10,1
  80b6b4:	ffc00044 	addi	ra,ra,1
  80b6b8:	3c7ff136 	bltu	r7,r17,80b680 <__divdf3+0x130>
  80b6bc:	3411c83a 	sub	r8,r6,r16
  80b6c0:	3205803a 	cmpltu	r2,r6,r8
  80b6c4:	3c53c83a 	sub	r9,r7,r17
  80b6c8:	7298b03a 	or	r12,r14,r10
  80b6cc:	7adab03a 	or	r13,r15,r11
  80b6d0:	4885c83a 	sub	r2,r9,r2
  80b6d4:	89ffe61e 	bne	r17,r7,80b670 <__divdf3+0x120>
  80b6d8:	343fe936 	bltu	r6,r16,80b680 <__divdf3+0x130>
  80b6dc:	003fe406 	br	80b670 <__divdf3+0x120>
  80b6e0:	9809883a 	mov	r4,r19
  80b6e4:	d9800415 	stw	r6,16(sp)
  80b6e8:	080c0180 	call	80c018 <__pack_d>
  80b6ec:	dfc01217 	ldw	ra,72(sp)
  80b6f0:	dcc01117 	ldw	r19,68(sp)
  80b6f4:	dc801017 	ldw	r18,64(sp)
  80b6f8:	dc400f17 	ldw	r17,60(sp)
  80b6fc:	dc000e17 	ldw	r16,56(sp)
  80b700:	dec01304 	addi	sp,sp,76
  80b704:	f800283a 	ret
  80b708:	00803fc4 	movi	r2,255
  80b70c:	7090703a 	and	r8,r14,r2
  80b710:	00802004 	movi	r2,128
  80b714:	0007883a 	mov	r3,zero
  80b718:	0013883a 	mov	r9,zero
  80b71c:	40800d26 	beq	r8,r2,80b754 <__divdf3+0x204>
  80b720:	dbc00815 	stw	r15,32(sp)
  80b724:	db800715 	stw	r14,28(sp)
  80b728:	003fab06 	br	80b5d8 <__divdf3+0x88>
  80b72c:	343fc92e 	bgeu	r6,r16,80b654 <__divdf3+0x104>
  80b730:	3185883a 	add	r2,r6,r6
  80b734:	1189803a 	cmpltu	r4,r2,r6
  80b738:	39c7883a 	add	r3,r7,r7
  80b73c:	20c9883a 	add	r4,r4,r3
  80b740:	297fffc4 	addi	r5,r5,-1
  80b744:	100d883a 	mov	r6,r2
  80b748:	200f883a 	mov	r7,r4
  80b74c:	d9400615 	stw	r5,24(sp)
  80b750:	003fc006 	br	80b654 <__divdf3+0x104>
  80b754:	483ff21e 	bne	r9,zero,80b720 <__divdf3+0x1d0>
  80b758:	01004004 	movi	r4,256
  80b75c:	7104703a 	and	r2,r14,r4
  80b760:	10c4b03a 	or	r2,r2,r3
  80b764:	103fee1e 	bne	r2,zero,80b720 <__divdf3+0x1d0>
  80b768:	31c4b03a 	or	r2,r6,r7
  80b76c:	103fec26 	beq	r2,zero,80b720 <__divdf3+0x1d0>
  80b770:	7205883a 	add	r2,r14,r8
  80b774:	1391803a 	cmpltu	r8,r2,r14
  80b778:	43d1883a 	add	r8,r8,r15
  80b77c:	013fc004 	movi	r4,-256
  80b780:	111c703a 	and	r14,r2,r4
  80b784:	401f883a 	mov	r15,r8
  80b788:	003fe506 	br	80b720 <__divdf3+0x1d0>
  80b78c:	8009883a 	mov	r4,r16
  80b790:	003f9206 	br	80b5dc <__divdf3+0x8c>
  80b794:	9809883a 	mov	r4,r19
  80b798:	d8000715 	stw	zero,28(sp)
  80b79c:	d8000815 	stw	zero,32(sp)
  80b7a0:	d8000615 	stw	zero,24(sp)
  80b7a4:	003f8d06 	br	80b5dc <__divdf3+0x8c>

0080b7a8 <__eqdf2>:
  80b7a8:	deffef04 	addi	sp,sp,-68
  80b7ac:	dc400f15 	stw	r17,60(sp)
  80b7b0:	dc400404 	addi	r17,sp,16
  80b7b4:	2005883a 	mov	r2,r4
  80b7b8:	2807883a 	mov	r3,r5
  80b7bc:	dc000e15 	stw	r16,56(sp)
  80b7c0:	d809883a 	mov	r4,sp
  80b7c4:	880b883a 	mov	r5,r17
  80b7c8:	dc000904 	addi	r16,sp,36
  80b7cc:	d8c00115 	stw	r3,4(sp)
  80b7d0:	d8800015 	stw	r2,0(sp)
  80b7d4:	d9800215 	stw	r6,8(sp)
  80b7d8:	dfc01015 	stw	ra,64(sp)
  80b7dc:	d9c00315 	stw	r7,12(sp)
  80b7e0:	080c32c0 	call	80c32c <__unpack_d>
  80b7e4:	d9000204 	addi	r4,sp,8
  80b7e8:	800b883a 	mov	r5,r16
  80b7ec:	080c32c0 	call	80c32c <__unpack_d>
  80b7f0:	d8800417 	ldw	r2,16(sp)
  80b7f4:	00c00044 	movi	r3,1
  80b7f8:	180d883a 	mov	r6,r3
  80b7fc:	1880062e 	bgeu	r3,r2,80b818 <__eqdf2+0x70>
  80b800:	d8800917 	ldw	r2,36(sp)
  80b804:	8809883a 	mov	r4,r17
  80b808:	800b883a 	mov	r5,r16
  80b80c:	1880022e 	bgeu	r3,r2,80b818 <__eqdf2+0x70>
  80b810:	080c4640 	call	80c464 <__fpcmp_parts_d>
  80b814:	100d883a 	mov	r6,r2
  80b818:	3005883a 	mov	r2,r6
  80b81c:	dfc01017 	ldw	ra,64(sp)
  80b820:	dc400f17 	ldw	r17,60(sp)
  80b824:	dc000e17 	ldw	r16,56(sp)
  80b828:	dec01104 	addi	sp,sp,68
  80b82c:	f800283a 	ret

0080b830 <__nedf2>:
  80b830:	deffef04 	addi	sp,sp,-68
  80b834:	dc400f15 	stw	r17,60(sp)
  80b838:	dc400404 	addi	r17,sp,16
  80b83c:	2005883a 	mov	r2,r4
  80b840:	2807883a 	mov	r3,r5
  80b844:	dc000e15 	stw	r16,56(sp)
  80b848:	d809883a 	mov	r4,sp
  80b84c:	880b883a 	mov	r5,r17
  80b850:	dc000904 	addi	r16,sp,36
  80b854:	d8c00115 	stw	r3,4(sp)
  80b858:	d8800015 	stw	r2,0(sp)
  80b85c:	d9800215 	stw	r6,8(sp)
  80b860:	dfc01015 	stw	ra,64(sp)
  80b864:	d9c00315 	stw	r7,12(sp)
  80b868:	080c32c0 	call	80c32c <__unpack_d>
  80b86c:	d9000204 	addi	r4,sp,8
  80b870:	800b883a 	mov	r5,r16
  80b874:	080c32c0 	call	80c32c <__unpack_d>
  80b878:	d8800417 	ldw	r2,16(sp)
  80b87c:	00c00044 	movi	r3,1
  80b880:	180d883a 	mov	r6,r3
  80b884:	1880062e 	bgeu	r3,r2,80b8a0 <__nedf2+0x70>
  80b888:	d8800917 	ldw	r2,36(sp)
  80b88c:	8809883a 	mov	r4,r17
  80b890:	800b883a 	mov	r5,r16
  80b894:	1880022e 	bgeu	r3,r2,80b8a0 <__nedf2+0x70>
  80b898:	080c4640 	call	80c464 <__fpcmp_parts_d>
  80b89c:	100d883a 	mov	r6,r2
  80b8a0:	3005883a 	mov	r2,r6
  80b8a4:	dfc01017 	ldw	ra,64(sp)
  80b8a8:	dc400f17 	ldw	r17,60(sp)
  80b8ac:	dc000e17 	ldw	r16,56(sp)
  80b8b0:	dec01104 	addi	sp,sp,68
  80b8b4:	f800283a 	ret

0080b8b8 <__gtdf2>:
  80b8b8:	deffef04 	addi	sp,sp,-68
  80b8bc:	dc400f15 	stw	r17,60(sp)
  80b8c0:	dc400404 	addi	r17,sp,16
  80b8c4:	2005883a 	mov	r2,r4
  80b8c8:	2807883a 	mov	r3,r5
  80b8cc:	dc000e15 	stw	r16,56(sp)
  80b8d0:	d809883a 	mov	r4,sp
  80b8d4:	880b883a 	mov	r5,r17
  80b8d8:	dc000904 	addi	r16,sp,36
  80b8dc:	d8c00115 	stw	r3,4(sp)
  80b8e0:	d8800015 	stw	r2,0(sp)
  80b8e4:	d9800215 	stw	r6,8(sp)
  80b8e8:	dfc01015 	stw	ra,64(sp)
  80b8ec:	d9c00315 	stw	r7,12(sp)
  80b8f0:	080c32c0 	call	80c32c <__unpack_d>
  80b8f4:	d9000204 	addi	r4,sp,8
  80b8f8:	800b883a 	mov	r5,r16
  80b8fc:	080c32c0 	call	80c32c <__unpack_d>
  80b900:	d8800417 	ldw	r2,16(sp)
  80b904:	00c00044 	movi	r3,1
  80b908:	01bfffc4 	movi	r6,-1
  80b90c:	1880062e 	bgeu	r3,r2,80b928 <__gtdf2+0x70>
  80b910:	d8800917 	ldw	r2,36(sp)
  80b914:	8809883a 	mov	r4,r17
  80b918:	800b883a 	mov	r5,r16
  80b91c:	1880022e 	bgeu	r3,r2,80b928 <__gtdf2+0x70>
  80b920:	080c4640 	call	80c464 <__fpcmp_parts_d>
  80b924:	100d883a 	mov	r6,r2
  80b928:	3005883a 	mov	r2,r6
  80b92c:	dfc01017 	ldw	ra,64(sp)
  80b930:	dc400f17 	ldw	r17,60(sp)
  80b934:	dc000e17 	ldw	r16,56(sp)
  80b938:	dec01104 	addi	sp,sp,68
  80b93c:	f800283a 	ret

0080b940 <__gedf2>:
  80b940:	deffef04 	addi	sp,sp,-68
  80b944:	dc400f15 	stw	r17,60(sp)
  80b948:	dc400404 	addi	r17,sp,16
  80b94c:	2005883a 	mov	r2,r4
  80b950:	2807883a 	mov	r3,r5
  80b954:	dc000e15 	stw	r16,56(sp)
  80b958:	d809883a 	mov	r4,sp
  80b95c:	880b883a 	mov	r5,r17
  80b960:	dc000904 	addi	r16,sp,36
  80b964:	d8c00115 	stw	r3,4(sp)
  80b968:	d8800015 	stw	r2,0(sp)
  80b96c:	d9800215 	stw	r6,8(sp)
  80b970:	dfc01015 	stw	ra,64(sp)
  80b974:	d9c00315 	stw	r7,12(sp)
  80b978:	080c32c0 	call	80c32c <__unpack_d>
  80b97c:	d9000204 	addi	r4,sp,8
  80b980:	800b883a 	mov	r5,r16
  80b984:	080c32c0 	call	80c32c <__unpack_d>
  80b988:	d8800417 	ldw	r2,16(sp)
  80b98c:	00c00044 	movi	r3,1
  80b990:	01bfffc4 	movi	r6,-1
  80b994:	1880062e 	bgeu	r3,r2,80b9b0 <__gedf2+0x70>
  80b998:	d8800917 	ldw	r2,36(sp)
  80b99c:	8809883a 	mov	r4,r17
  80b9a0:	800b883a 	mov	r5,r16
  80b9a4:	1880022e 	bgeu	r3,r2,80b9b0 <__gedf2+0x70>
  80b9a8:	080c4640 	call	80c464 <__fpcmp_parts_d>
  80b9ac:	100d883a 	mov	r6,r2
  80b9b0:	3005883a 	mov	r2,r6
  80b9b4:	dfc01017 	ldw	ra,64(sp)
  80b9b8:	dc400f17 	ldw	r17,60(sp)
  80b9bc:	dc000e17 	ldw	r16,56(sp)
  80b9c0:	dec01104 	addi	sp,sp,68
  80b9c4:	f800283a 	ret

0080b9c8 <__ltdf2>:
  80b9c8:	deffef04 	addi	sp,sp,-68
  80b9cc:	dc400f15 	stw	r17,60(sp)
  80b9d0:	dc400404 	addi	r17,sp,16
  80b9d4:	2005883a 	mov	r2,r4
  80b9d8:	2807883a 	mov	r3,r5
  80b9dc:	dc000e15 	stw	r16,56(sp)
  80b9e0:	d809883a 	mov	r4,sp
  80b9e4:	880b883a 	mov	r5,r17
  80b9e8:	dc000904 	addi	r16,sp,36
  80b9ec:	d8c00115 	stw	r3,4(sp)
  80b9f0:	d8800015 	stw	r2,0(sp)
  80b9f4:	d9800215 	stw	r6,8(sp)
  80b9f8:	dfc01015 	stw	ra,64(sp)
  80b9fc:	d9c00315 	stw	r7,12(sp)
  80ba00:	080c32c0 	call	80c32c <__unpack_d>
  80ba04:	d9000204 	addi	r4,sp,8
  80ba08:	800b883a 	mov	r5,r16
  80ba0c:	080c32c0 	call	80c32c <__unpack_d>
  80ba10:	d8800417 	ldw	r2,16(sp)
  80ba14:	00c00044 	movi	r3,1
  80ba18:	180d883a 	mov	r6,r3
  80ba1c:	1880062e 	bgeu	r3,r2,80ba38 <__ltdf2+0x70>
  80ba20:	d8800917 	ldw	r2,36(sp)
  80ba24:	8809883a 	mov	r4,r17
  80ba28:	800b883a 	mov	r5,r16
  80ba2c:	1880022e 	bgeu	r3,r2,80ba38 <__ltdf2+0x70>
  80ba30:	080c4640 	call	80c464 <__fpcmp_parts_d>
  80ba34:	100d883a 	mov	r6,r2
  80ba38:	3005883a 	mov	r2,r6
  80ba3c:	dfc01017 	ldw	ra,64(sp)
  80ba40:	dc400f17 	ldw	r17,60(sp)
  80ba44:	dc000e17 	ldw	r16,56(sp)
  80ba48:	dec01104 	addi	sp,sp,68
  80ba4c:	f800283a 	ret

0080ba50 <__floatsidf>:
  80ba50:	2006d7fa 	srli	r3,r4,31
  80ba54:	defff604 	addi	sp,sp,-40
  80ba58:	008000c4 	movi	r2,3
  80ba5c:	dfc00915 	stw	ra,36(sp)
  80ba60:	dcc00815 	stw	r19,32(sp)
  80ba64:	dc800715 	stw	r18,28(sp)
  80ba68:	dc400615 	stw	r17,24(sp)
  80ba6c:	dc000515 	stw	r16,20(sp)
  80ba70:	d8800015 	stw	r2,0(sp)
  80ba74:	d8c00115 	stw	r3,4(sp)
  80ba78:	20000f1e 	bne	r4,zero,80bab8 <__floatsidf+0x68>
  80ba7c:	00800084 	movi	r2,2
  80ba80:	d8800015 	stw	r2,0(sp)
  80ba84:	d809883a 	mov	r4,sp
  80ba88:	080c0180 	call	80c018 <__pack_d>
  80ba8c:	1009883a 	mov	r4,r2
  80ba90:	180b883a 	mov	r5,r3
  80ba94:	2005883a 	mov	r2,r4
  80ba98:	2807883a 	mov	r3,r5
  80ba9c:	dfc00917 	ldw	ra,36(sp)
  80baa0:	dcc00817 	ldw	r19,32(sp)
  80baa4:	dc800717 	ldw	r18,28(sp)
  80baa8:	dc400617 	ldw	r17,24(sp)
  80baac:	dc000517 	ldw	r16,20(sp)
  80bab0:	dec00a04 	addi	sp,sp,40
  80bab4:	f800283a 	ret
  80bab8:	00800f04 	movi	r2,60
  80babc:	1807003a 	cmpeq	r3,r3,zero
  80bac0:	d8800215 	stw	r2,8(sp)
  80bac4:	18001126 	beq	r3,zero,80bb0c <__floatsidf+0xbc>
  80bac8:	0027883a 	mov	r19,zero
  80bacc:	2025883a 	mov	r18,r4
  80bad0:	d9000315 	stw	r4,12(sp)
  80bad4:	dcc00415 	stw	r19,16(sp)
  80bad8:	080bf980 	call	80bf98 <__clzsi2>
  80badc:	11000744 	addi	r4,r2,29
  80bae0:	013fe80e 	bge	zero,r4,80ba84 <__floatsidf+0x34>
  80bae4:	10bfff44 	addi	r2,r2,-3
  80bae8:	10000c16 	blt	r2,zero,80bb1c <__floatsidf+0xcc>
  80baec:	90a2983a 	sll	r17,r18,r2
  80baf0:	0021883a 	mov	r16,zero
  80baf4:	d8800217 	ldw	r2,8(sp)
  80baf8:	dc400415 	stw	r17,16(sp)
  80bafc:	dc000315 	stw	r16,12(sp)
  80bb00:	1105c83a 	sub	r2,r2,r4
  80bb04:	d8800215 	stw	r2,8(sp)
  80bb08:	003fde06 	br	80ba84 <__floatsidf+0x34>
  80bb0c:	00a00034 	movhi	r2,32768
  80bb10:	20800a26 	beq	r4,r2,80bb3c <__floatsidf+0xec>
  80bb14:	0109c83a 	sub	r4,zero,r4
  80bb18:	003feb06 	br	80bac8 <__floatsidf+0x78>
  80bb1c:	9006d07a 	srli	r3,r18,1
  80bb20:	008007c4 	movi	r2,31
  80bb24:	1105c83a 	sub	r2,r2,r4
  80bb28:	1886d83a 	srl	r3,r3,r2
  80bb2c:	9922983a 	sll	r17,r19,r4
  80bb30:	9120983a 	sll	r16,r18,r4
  80bb34:	1c62b03a 	or	r17,r3,r17
  80bb38:	003fee06 	br	80baf4 <__floatsidf+0xa4>
  80bb3c:	0009883a 	mov	r4,zero
  80bb40:	01707834 	movhi	r5,49632
  80bb44:	003fd306 	br	80ba94 <__floatsidf+0x44>

0080bb48 <__fixdfsi>:
  80bb48:	defff804 	addi	sp,sp,-32
  80bb4c:	2005883a 	mov	r2,r4
  80bb50:	2807883a 	mov	r3,r5
  80bb54:	d809883a 	mov	r4,sp
  80bb58:	d9400204 	addi	r5,sp,8
  80bb5c:	d8c00115 	stw	r3,4(sp)
  80bb60:	d8800015 	stw	r2,0(sp)
  80bb64:	dfc00715 	stw	ra,28(sp)
  80bb68:	080c32c0 	call	80c32c <__unpack_d>
  80bb6c:	d8c00217 	ldw	r3,8(sp)
  80bb70:	00800084 	movi	r2,2
  80bb74:	1880051e 	bne	r3,r2,80bb8c <__fixdfsi+0x44>
  80bb78:	0007883a 	mov	r3,zero
  80bb7c:	1805883a 	mov	r2,r3
  80bb80:	dfc00717 	ldw	ra,28(sp)
  80bb84:	dec00804 	addi	sp,sp,32
  80bb88:	f800283a 	ret
  80bb8c:	00800044 	movi	r2,1
  80bb90:	10fff92e 	bgeu	r2,r3,80bb78 <__fixdfsi+0x30>
  80bb94:	00800104 	movi	r2,4
  80bb98:	18800426 	beq	r3,r2,80bbac <__fixdfsi+0x64>
  80bb9c:	d8c00417 	ldw	r3,16(sp)
  80bba0:	183ff516 	blt	r3,zero,80bb78 <__fixdfsi+0x30>
  80bba4:	00800784 	movi	r2,30
  80bba8:	10c0080e 	bge	r2,r3,80bbcc <__fixdfsi+0x84>
  80bbac:	d8800317 	ldw	r2,12(sp)
  80bbb0:	1000121e 	bne	r2,zero,80bbfc <__fixdfsi+0xb4>
  80bbb4:	00e00034 	movhi	r3,32768
  80bbb8:	18ffffc4 	addi	r3,r3,-1
  80bbbc:	1805883a 	mov	r2,r3
  80bbc0:	dfc00717 	ldw	ra,28(sp)
  80bbc4:	dec00804 	addi	sp,sp,32
  80bbc8:	f800283a 	ret
  80bbcc:	00800f04 	movi	r2,60
  80bbd0:	10d1c83a 	sub	r8,r2,r3
  80bbd4:	40bff804 	addi	r2,r8,-32
  80bbd8:	d9800517 	ldw	r6,20(sp)
  80bbdc:	d9c00617 	ldw	r7,24(sp)
  80bbe0:	10000816 	blt	r2,zero,80bc04 <__fixdfsi+0xbc>
  80bbe4:	3888d83a 	srl	r4,r7,r2
  80bbe8:	d8800317 	ldw	r2,12(sp)
  80bbec:	2007883a 	mov	r3,r4
  80bbf0:	103fe226 	beq	r2,zero,80bb7c <__fixdfsi+0x34>
  80bbf4:	0107c83a 	sub	r3,zero,r4
  80bbf8:	003fe006 	br	80bb7c <__fixdfsi+0x34>
  80bbfc:	00e00034 	movhi	r3,32768
  80bc00:	003fde06 	br	80bb7c <__fixdfsi+0x34>
  80bc04:	39c7883a 	add	r3,r7,r7
  80bc08:	008007c4 	movi	r2,31
  80bc0c:	1205c83a 	sub	r2,r2,r8
  80bc10:	1886983a 	sll	r3,r3,r2
  80bc14:	3208d83a 	srl	r4,r6,r8
  80bc18:	1908b03a 	or	r4,r3,r4
  80bc1c:	003ff206 	br	80bbe8 <__fixdfsi+0xa0>

0080bc20 <__floatunsidf>:
  80bc20:	defff204 	addi	sp,sp,-56
  80bc24:	dfc00d15 	stw	ra,52(sp)
  80bc28:	ddc00c15 	stw	r23,48(sp)
  80bc2c:	dd800b15 	stw	r22,44(sp)
  80bc30:	dd400a15 	stw	r21,40(sp)
  80bc34:	dd000915 	stw	r20,36(sp)
  80bc38:	dcc00815 	stw	r19,32(sp)
  80bc3c:	dc800715 	stw	r18,28(sp)
  80bc40:	dc400615 	stw	r17,24(sp)
  80bc44:	dc000515 	stw	r16,20(sp)
  80bc48:	d8000115 	stw	zero,4(sp)
  80bc4c:	20000f1e 	bne	r4,zero,80bc8c <__floatunsidf+0x6c>
  80bc50:	00800084 	movi	r2,2
  80bc54:	d8800015 	stw	r2,0(sp)
  80bc58:	d809883a 	mov	r4,sp
  80bc5c:	080c0180 	call	80c018 <__pack_d>
  80bc60:	dfc00d17 	ldw	ra,52(sp)
  80bc64:	ddc00c17 	ldw	r23,48(sp)
  80bc68:	dd800b17 	ldw	r22,44(sp)
  80bc6c:	dd400a17 	ldw	r21,40(sp)
  80bc70:	dd000917 	ldw	r20,36(sp)
  80bc74:	dcc00817 	ldw	r19,32(sp)
  80bc78:	dc800717 	ldw	r18,28(sp)
  80bc7c:	dc400617 	ldw	r17,24(sp)
  80bc80:	dc000517 	ldw	r16,20(sp)
  80bc84:	dec00e04 	addi	sp,sp,56
  80bc88:	f800283a 	ret
  80bc8c:	008000c4 	movi	r2,3
  80bc90:	00c00f04 	movi	r3,60
  80bc94:	002f883a 	mov	r23,zero
  80bc98:	202d883a 	mov	r22,r4
  80bc9c:	d8800015 	stw	r2,0(sp)
  80bca0:	d8c00215 	stw	r3,8(sp)
  80bca4:	d9000315 	stw	r4,12(sp)
  80bca8:	ddc00415 	stw	r23,16(sp)
  80bcac:	080bf980 	call	80bf98 <__clzsi2>
  80bcb0:	12400744 	addi	r9,r2,29
  80bcb4:	48000b16 	blt	r9,zero,80bce4 <__floatunsidf+0xc4>
  80bcb8:	483fe726 	beq	r9,zero,80bc58 <__floatunsidf+0x38>
  80bcbc:	10bfff44 	addi	r2,r2,-3
  80bcc0:	10002e16 	blt	r2,zero,80bd7c <__floatunsidf+0x15c>
  80bcc4:	b0a2983a 	sll	r17,r22,r2
  80bcc8:	0021883a 	mov	r16,zero
  80bccc:	d8800217 	ldw	r2,8(sp)
  80bcd0:	dc400415 	stw	r17,16(sp)
  80bcd4:	dc000315 	stw	r16,12(sp)
  80bcd8:	1245c83a 	sub	r2,r2,r9
  80bcdc:	d8800215 	stw	r2,8(sp)
  80bce0:	003fdd06 	br	80bc58 <__floatunsidf+0x38>
  80bce4:	0255c83a 	sub	r10,zero,r9
  80bce8:	51bff804 	addi	r6,r10,-32
  80bcec:	30001b16 	blt	r6,zero,80bd5c <__floatunsidf+0x13c>
  80bcf0:	b9a8d83a 	srl	r20,r23,r6
  80bcf4:	002b883a 	mov	r21,zero
  80bcf8:	000f883a 	mov	r7,zero
  80bcfc:	01000044 	movi	r4,1
  80bd00:	0011883a 	mov	r8,zero
  80bd04:	30002516 	blt	r6,zero,80bd9c <__floatunsidf+0x17c>
  80bd08:	21a6983a 	sll	r19,r4,r6
  80bd0c:	0025883a 	mov	r18,zero
  80bd10:	00bfffc4 	movi	r2,-1
  80bd14:	9089883a 	add	r4,r18,r2
  80bd18:	988b883a 	add	r5,r19,r2
  80bd1c:	248d803a 	cmpltu	r6,r4,r18
  80bd20:	314b883a 	add	r5,r6,r5
  80bd24:	b104703a 	and	r2,r22,r4
  80bd28:	b946703a 	and	r3,r23,r5
  80bd2c:	10c4b03a 	or	r2,r2,r3
  80bd30:	10000226 	beq	r2,zero,80bd3c <__floatunsidf+0x11c>
  80bd34:	01c00044 	movi	r7,1
  80bd38:	0011883a 	mov	r8,zero
  80bd3c:	d9000217 	ldw	r4,8(sp)
  80bd40:	a1c4b03a 	or	r2,r20,r7
  80bd44:	aa06b03a 	or	r3,r21,r8
  80bd48:	2249c83a 	sub	r4,r4,r9
  80bd4c:	d8c00415 	stw	r3,16(sp)
  80bd50:	d9000215 	stw	r4,8(sp)
  80bd54:	d8800315 	stw	r2,12(sp)
  80bd58:	003fbf06 	br	80bc58 <__floatunsidf+0x38>
  80bd5c:	bdc7883a 	add	r3,r23,r23
  80bd60:	008007c4 	movi	r2,31
  80bd64:	1285c83a 	sub	r2,r2,r10
  80bd68:	1886983a 	sll	r3,r3,r2
  80bd6c:	b2a8d83a 	srl	r20,r22,r10
  80bd70:	baaad83a 	srl	r21,r23,r10
  80bd74:	1d28b03a 	or	r20,r3,r20
  80bd78:	003fdf06 	br	80bcf8 <__floatunsidf+0xd8>
  80bd7c:	b006d07a 	srli	r3,r22,1
  80bd80:	008007c4 	movi	r2,31
  80bd84:	1245c83a 	sub	r2,r2,r9
  80bd88:	1886d83a 	srl	r3,r3,r2
  80bd8c:	ba62983a 	sll	r17,r23,r9
  80bd90:	b260983a 	sll	r16,r22,r9
  80bd94:	1c62b03a 	or	r17,r3,r17
  80bd98:	003fcc06 	br	80bccc <__floatunsidf+0xac>
  80bd9c:	2006d07a 	srli	r3,r4,1
  80bda0:	008007c4 	movi	r2,31
  80bda4:	1285c83a 	sub	r2,r2,r10
  80bda8:	18a6d83a 	srl	r19,r3,r2
  80bdac:	22a4983a 	sll	r18,r4,r10
  80bdb0:	003fd706 	br	80bd10 <__floatunsidf+0xf0>

0080bdb4 <udivmodsi4>:
  80bdb4:	29001b2e 	bgeu	r5,r4,80be24 <udivmodsi4+0x70>
  80bdb8:	28001a16 	blt	r5,zero,80be24 <udivmodsi4+0x70>
  80bdbc:	00800044 	movi	r2,1
  80bdc0:	0007883a 	mov	r3,zero
  80bdc4:	01c007c4 	movi	r7,31
  80bdc8:	00000306 	br	80bdd8 <udivmodsi4+0x24>
  80bdcc:	19c01326 	beq	r3,r7,80be1c <udivmodsi4+0x68>
  80bdd0:	18c00044 	addi	r3,r3,1
  80bdd4:	28000416 	blt	r5,zero,80bde8 <udivmodsi4+0x34>
  80bdd8:	294b883a 	add	r5,r5,r5
  80bddc:	1085883a 	add	r2,r2,r2
  80bde0:	293ffa36 	bltu	r5,r4,80bdcc <udivmodsi4+0x18>
  80bde4:	10000d26 	beq	r2,zero,80be1c <udivmodsi4+0x68>
  80bde8:	0007883a 	mov	r3,zero
  80bdec:	21400236 	bltu	r4,r5,80bdf8 <udivmodsi4+0x44>
  80bdf0:	2149c83a 	sub	r4,r4,r5
  80bdf4:	1886b03a 	or	r3,r3,r2
  80bdf8:	1004d07a 	srli	r2,r2,1
  80bdfc:	280ad07a 	srli	r5,r5,1
  80be00:	103ffa1e 	bne	r2,zero,80bdec <udivmodsi4+0x38>
  80be04:	30000226 	beq	r6,zero,80be10 <udivmodsi4+0x5c>
  80be08:	2005883a 	mov	r2,r4
  80be0c:	f800283a 	ret
  80be10:	1809883a 	mov	r4,r3
  80be14:	2005883a 	mov	r2,r4
  80be18:	f800283a 	ret
  80be1c:	0007883a 	mov	r3,zero
  80be20:	003ff806 	br	80be04 <udivmodsi4+0x50>
  80be24:	00800044 	movi	r2,1
  80be28:	0007883a 	mov	r3,zero
  80be2c:	003fef06 	br	80bdec <udivmodsi4+0x38>

0080be30 <__divsi3>:
  80be30:	defffe04 	addi	sp,sp,-8
  80be34:	dc000015 	stw	r16,0(sp)
  80be38:	dfc00115 	stw	ra,4(sp)
  80be3c:	0021883a 	mov	r16,zero
  80be40:	20000c16 	blt	r4,zero,80be74 <__divsi3+0x44>
  80be44:	000d883a 	mov	r6,zero
  80be48:	28000e16 	blt	r5,zero,80be84 <__divsi3+0x54>
  80be4c:	080bdb40 	call	80bdb4 <udivmodsi4>
  80be50:	1007883a 	mov	r3,r2
  80be54:	8005003a 	cmpeq	r2,r16,zero
  80be58:	1000011e 	bne	r2,zero,80be60 <__divsi3+0x30>
  80be5c:	00c7c83a 	sub	r3,zero,r3
  80be60:	1805883a 	mov	r2,r3
  80be64:	dfc00117 	ldw	ra,4(sp)
  80be68:	dc000017 	ldw	r16,0(sp)
  80be6c:	dec00204 	addi	sp,sp,8
  80be70:	f800283a 	ret
  80be74:	0109c83a 	sub	r4,zero,r4
  80be78:	04000044 	movi	r16,1
  80be7c:	000d883a 	mov	r6,zero
  80be80:	283ff20e 	bge	r5,zero,80be4c <__divsi3+0x1c>
  80be84:	014bc83a 	sub	r5,zero,r5
  80be88:	8021003a 	cmpeq	r16,r16,zero
  80be8c:	003fef06 	br	80be4c <__divsi3+0x1c>

0080be90 <__modsi3>:
  80be90:	deffff04 	addi	sp,sp,-4
  80be94:	dfc00015 	stw	ra,0(sp)
  80be98:	01800044 	movi	r6,1
  80be9c:	2807883a 	mov	r3,r5
  80bea0:	20000416 	blt	r4,zero,80beb4 <__modsi3+0x24>
  80bea4:	28000c16 	blt	r5,zero,80bed8 <__modsi3+0x48>
  80bea8:	dfc00017 	ldw	ra,0(sp)
  80beac:	dec00104 	addi	sp,sp,4
  80beb0:	080bdb41 	jmpi	80bdb4 <udivmodsi4>
  80beb4:	0109c83a 	sub	r4,zero,r4
  80beb8:	28000b16 	blt	r5,zero,80bee8 <__modsi3+0x58>
  80bebc:	180b883a 	mov	r5,r3
  80bec0:	01800044 	movi	r6,1
  80bec4:	080bdb40 	call	80bdb4 <udivmodsi4>
  80bec8:	0085c83a 	sub	r2,zero,r2
  80becc:	dfc00017 	ldw	ra,0(sp)
  80bed0:	dec00104 	addi	sp,sp,4
  80bed4:	f800283a 	ret
  80bed8:	014bc83a 	sub	r5,zero,r5
  80bedc:	dfc00017 	ldw	ra,0(sp)
  80bee0:	dec00104 	addi	sp,sp,4
  80bee4:	080bdb41 	jmpi	80bdb4 <udivmodsi4>
  80bee8:	0147c83a 	sub	r3,zero,r5
  80beec:	003ff306 	br	80bebc <__modsi3+0x2c>

0080bef0 <__udivsi3>:
  80bef0:	000d883a 	mov	r6,zero
  80bef4:	080bdb41 	jmpi	80bdb4 <udivmodsi4>

0080bef8 <__umodsi3>:
  80bef8:	01800044 	movi	r6,1
  80befc:	080bdb41 	jmpi	80bdb4 <udivmodsi4>

0080bf00 <__muldi3>:
  80bf00:	2011883a 	mov	r8,r4
  80bf04:	427fffcc 	andi	r9,r8,65535
  80bf08:	4018d43a 	srli	r12,r8,16
  80bf0c:	32bfffcc 	andi	r10,r6,65535
  80bf10:	3016d43a 	srli	r11,r6,16
  80bf14:	4a85383a 	mul	r2,r9,r10
  80bf18:	6295383a 	mul	r10,r12,r10
  80bf1c:	4ad3383a 	mul	r9,r9,r11
  80bf20:	113fffcc 	andi	r4,r2,65535
  80bf24:	1004d43a 	srli	r2,r2,16
  80bf28:	4a93883a 	add	r9,r9,r10
  80bf2c:	3807883a 	mov	r3,r7
  80bf30:	1245883a 	add	r2,r2,r9
  80bf34:	280f883a 	mov	r7,r5
  80bf38:	180b883a 	mov	r5,r3
  80bf3c:	1006943a 	slli	r3,r2,16
  80bf40:	defffd04 	addi	sp,sp,-12
  80bf44:	dc800215 	stw	r18,8(sp)
  80bf48:	1907883a 	add	r3,r3,r4
  80bf4c:	dc400115 	stw	r17,4(sp)
  80bf50:	dc000015 	stw	r16,0(sp)
  80bf54:	4165383a 	mul	r18,r8,r5
  80bf58:	31e3383a 	mul	r17,r6,r7
  80bf5c:	1012d43a 	srli	r9,r2,16
  80bf60:	62d9383a 	mul	r12,r12,r11
  80bf64:	181f883a 	mov	r15,r3
  80bf68:	1280022e 	bgeu	r2,r10,80bf74 <__muldi3+0x74>
  80bf6c:	00800074 	movhi	r2,1
  80bf70:	6099883a 	add	r12,r12,r2
  80bf74:	624d883a 	add	r6,r12,r9
  80bf78:	9187883a 	add	r3,r18,r6
  80bf7c:	88c7883a 	add	r3,r17,r3
  80bf80:	7805883a 	mov	r2,r15
  80bf84:	dc800217 	ldw	r18,8(sp)
  80bf88:	dc400117 	ldw	r17,4(sp)
  80bf8c:	dc000017 	ldw	r16,0(sp)
  80bf90:	dec00304 	addi	sp,sp,12
  80bf94:	f800283a 	ret

0080bf98 <__clzsi2>:
  80bf98:	00bfffd4 	movui	r2,65535
  80bf9c:	11000e36 	bltu	r2,r4,80bfd8 <__clzsi2+0x40>
  80bfa0:	00803fc4 	movi	r2,255
  80bfa4:	01400204 	movi	r5,8
  80bfa8:	0007883a 	mov	r3,zero
  80bfac:	11001036 	bltu	r2,r4,80bff0 <__clzsi2+0x58>
  80bfb0:	000b883a 	mov	r5,zero
  80bfb4:	20c6d83a 	srl	r3,r4,r3
  80bfb8:	00802074 	movhi	r2,129
  80bfbc:	10829704 	addi	r2,r2,2652
  80bfc0:	1887883a 	add	r3,r3,r2
  80bfc4:	18800003 	ldbu	r2,0(r3)
  80bfc8:	00c00804 	movi	r3,32
  80bfcc:	2885883a 	add	r2,r5,r2
  80bfd0:	1885c83a 	sub	r2,r3,r2
  80bfd4:	f800283a 	ret
  80bfd8:	01400404 	movi	r5,16
  80bfdc:	00804034 	movhi	r2,256
  80bfe0:	10bfffc4 	addi	r2,r2,-1
  80bfe4:	2807883a 	mov	r3,r5
  80bfe8:	113ff22e 	bgeu	r2,r4,80bfb4 <__clzsi2+0x1c>
  80bfec:	01400604 	movi	r5,24
  80bff0:	2807883a 	mov	r3,r5
  80bff4:	20c6d83a 	srl	r3,r4,r3
  80bff8:	00802074 	movhi	r2,129
  80bffc:	10829704 	addi	r2,r2,2652
  80c000:	1887883a 	add	r3,r3,r2
  80c004:	18800003 	ldbu	r2,0(r3)
  80c008:	00c00804 	movi	r3,32
  80c00c:	2885883a 	add	r2,r5,r2
  80c010:	1885c83a 	sub	r2,r3,r2
  80c014:	f800283a 	ret

0080c018 <__pack_d>:
  80c018:	20c00017 	ldw	r3,0(r4)
  80c01c:	defffd04 	addi	sp,sp,-12
  80c020:	dc000015 	stw	r16,0(sp)
  80c024:	dc800215 	stw	r18,8(sp)
  80c028:	dc400115 	stw	r17,4(sp)
  80c02c:	00800044 	movi	r2,1
  80c030:	22000317 	ldw	r8,12(r4)
  80c034:	001f883a 	mov	r15,zero
  80c038:	22400417 	ldw	r9,16(r4)
  80c03c:	24000117 	ldw	r16,4(r4)
  80c040:	10c0552e 	bgeu	r2,r3,80c198 <__pack_d+0x180>
  80c044:	00800104 	movi	r2,4
  80c048:	18804f26 	beq	r3,r2,80c188 <__pack_d+0x170>
  80c04c:	00800084 	movi	r2,2
  80c050:	18800226 	beq	r3,r2,80c05c <__pack_d+0x44>
  80c054:	4244b03a 	or	r2,r8,r9
  80c058:	10001a1e 	bne	r2,zero,80c0c4 <__pack_d+0xac>
  80c05c:	000d883a 	mov	r6,zero
  80c060:	000f883a 	mov	r7,zero
  80c064:	0011883a 	mov	r8,zero
  80c068:	00800434 	movhi	r2,16
  80c06c:	10bfffc4 	addi	r2,r2,-1
  80c070:	301d883a 	mov	r14,r6
  80c074:	3884703a 	and	r2,r7,r2
  80c078:	400a953a 	slli	r5,r8,20
  80c07c:	79bffc2c 	andhi	r6,r15,65520
  80c080:	308cb03a 	or	r6,r6,r2
  80c084:	00e00434 	movhi	r3,32784
  80c088:	18ffffc4 	addi	r3,r3,-1
  80c08c:	800497fa 	slli	r2,r16,31
  80c090:	30c6703a 	and	r3,r6,r3
  80c094:	1946b03a 	or	r3,r3,r5
  80c098:	01600034 	movhi	r5,32768
  80c09c:	297fffc4 	addi	r5,r5,-1
  80c0a0:	194a703a 	and	r5,r3,r5
  80c0a4:	288ab03a 	or	r5,r5,r2
  80c0a8:	2807883a 	mov	r3,r5
  80c0ac:	7005883a 	mov	r2,r14
  80c0b0:	dc800217 	ldw	r18,8(sp)
  80c0b4:	dc400117 	ldw	r17,4(sp)
  80c0b8:	dc000017 	ldw	r16,0(sp)
  80c0bc:	dec00304 	addi	sp,sp,12
  80c0c0:	f800283a 	ret
  80c0c4:	21000217 	ldw	r4,8(r4)
  80c0c8:	00bf0084 	movi	r2,-1022
  80c0cc:	20803f16 	blt	r4,r2,80c1cc <__pack_d+0x1b4>
  80c0d0:	0080ffc4 	movi	r2,1023
  80c0d4:	11002c16 	blt	r2,r4,80c188 <__pack_d+0x170>
  80c0d8:	00803fc4 	movi	r2,255
  80c0dc:	408c703a 	and	r6,r8,r2
  80c0e0:	00802004 	movi	r2,128
  80c0e4:	0007883a 	mov	r3,zero
  80c0e8:	000f883a 	mov	r7,zero
  80c0ec:	2280ffc4 	addi	r10,r4,1023
  80c0f0:	30801e26 	beq	r6,r2,80c16c <__pack_d+0x154>
  80c0f4:	00801fc4 	movi	r2,127
  80c0f8:	4089883a 	add	r4,r8,r2
  80c0fc:	220d803a 	cmpltu	r6,r4,r8
  80c100:	324d883a 	add	r6,r6,r9
  80c104:	2011883a 	mov	r8,r4
  80c108:	3013883a 	mov	r9,r6
  80c10c:	00880034 	movhi	r2,8192
  80c110:	10bfffc4 	addi	r2,r2,-1
  80c114:	12400d36 	bltu	r2,r9,80c14c <__pack_d+0x134>
  80c118:	4804963a 	slli	r2,r9,24
  80c11c:	400cd23a 	srli	r6,r8,8
  80c120:	480ed23a 	srli	r7,r9,8
  80c124:	013fffc4 	movi	r4,-1
  80c128:	118cb03a 	or	r6,r2,r6
  80c12c:	01400434 	movhi	r5,16
  80c130:	297fffc4 	addi	r5,r5,-1
  80c134:	3104703a 	and	r2,r6,r4
  80c138:	3946703a 	and	r3,r7,r5
  80c13c:	5201ffcc 	andi	r8,r10,2047
  80c140:	100d883a 	mov	r6,r2
  80c144:	180f883a 	mov	r7,r3
  80c148:	003fc706 	br	80c068 <__pack_d+0x50>
  80c14c:	480897fa 	slli	r4,r9,31
  80c150:	4004d07a 	srli	r2,r8,1
  80c154:	4806d07a 	srli	r3,r9,1
  80c158:	52800044 	addi	r10,r10,1
  80c15c:	2084b03a 	or	r2,r4,r2
  80c160:	1011883a 	mov	r8,r2
  80c164:	1813883a 	mov	r9,r3
  80c168:	003feb06 	br	80c118 <__pack_d+0x100>
  80c16c:	383fe11e 	bne	r7,zero,80c0f4 <__pack_d+0xdc>
  80c170:	01004004 	movi	r4,256
  80c174:	4104703a 	and	r2,r8,r4
  80c178:	10c4b03a 	or	r2,r2,r3
  80c17c:	103fe326 	beq	r2,zero,80c10c <__pack_d+0xf4>
  80c180:	3005883a 	mov	r2,r6
  80c184:	003fdc06 	br	80c0f8 <__pack_d+0xe0>
  80c188:	000d883a 	mov	r6,zero
  80c18c:	000f883a 	mov	r7,zero
  80c190:	0201ffc4 	movi	r8,2047
  80c194:	003fb406 	br	80c068 <__pack_d+0x50>
  80c198:	0005883a 	mov	r2,zero
  80c19c:	00c00234 	movhi	r3,8
  80c1a0:	408cb03a 	or	r6,r8,r2
  80c1a4:	48ceb03a 	or	r7,r9,r3
  80c1a8:	013fffc4 	movi	r4,-1
  80c1ac:	01400434 	movhi	r5,16
  80c1b0:	297fffc4 	addi	r5,r5,-1
  80c1b4:	3104703a 	and	r2,r6,r4
  80c1b8:	3946703a 	and	r3,r7,r5
  80c1bc:	100d883a 	mov	r6,r2
  80c1c0:	180f883a 	mov	r7,r3
  80c1c4:	0201ffc4 	movi	r8,2047
  80c1c8:	003fa706 	br	80c068 <__pack_d+0x50>
  80c1cc:	1109c83a 	sub	r4,r2,r4
  80c1d0:	00800e04 	movi	r2,56
  80c1d4:	11004316 	blt	r2,r4,80c2e4 <__pack_d+0x2cc>
  80c1d8:	21fff804 	addi	r7,r4,-32
  80c1dc:	38004516 	blt	r7,zero,80c2f4 <__pack_d+0x2dc>
  80c1e0:	49d8d83a 	srl	r12,r9,r7
  80c1e4:	001b883a 	mov	r13,zero
  80c1e8:	0023883a 	mov	r17,zero
  80c1ec:	01400044 	movi	r5,1
  80c1f0:	0025883a 	mov	r18,zero
  80c1f4:	38004716 	blt	r7,zero,80c314 <__pack_d+0x2fc>
  80c1f8:	29d6983a 	sll	r11,r5,r7
  80c1fc:	0015883a 	mov	r10,zero
  80c200:	00bfffc4 	movi	r2,-1
  80c204:	5089883a 	add	r4,r10,r2
  80c208:	588b883a 	add	r5,r11,r2
  80c20c:	228d803a 	cmpltu	r6,r4,r10
  80c210:	314b883a 	add	r5,r6,r5
  80c214:	4104703a 	and	r2,r8,r4
  80c218:	4946703a 	and	r3,r9,r5
  80c21c:	10c4b03a 	or	r2,r2,r3
  80c220:	10000226 	beq	r2,zero,80c22c <__pack_d+0x214>
  80c224:	04400044 	movi	r17,1
  80c228:	0025883a 	mov	r18,zero
  80c22c:	00803fc4 	movi	r2,255
  80c230:	644eb03a 	or	r7,r12,r17
  80c234:	3892703a 	and	r9,r7,r2
  80c238:	00802004 	movi	r2,128
  80c23c:	6c90b03a 	or	r8,r13,r18
  80c240:	0015883a 	mov	r10,zero
  80c244:	48801626 	beq	r9,r2,80c2a0 <__pack_d+0x288>
  80c248:	01001fc4 	movi	r4,127
  80c24c:	3905883a 	add	r2,r7,r4
  80c250:	11cd803a 	cmpltu	r6,r2,r7
  80c254:	320d883a 	add	r6,r6,r8
  80c258:	100f883a 	mov	r7,r2
  80c25c:	00840034 	movhi	r2,4096
  80c260:	10bfffc4 	addi	r2,r2,-1
  80c264:	3011883a 	mov	r8,r6
  80c268:	0007883a 	mov	r3,zero
  80c26c:	11801b36 	bltu	r2,r6,80c2dc <__pack_d+0x2c4>
  80c270:	4004963a 	slli	r2,r8,24
  80c274:	3808d23a 	srli	r4,r7,8
  80c278:	400ad23a 	srli	r5,r8,8
  80c27c:	1813883a 	mov	r9,r3
  80c280:	1108b03a 	or	r4,r2,r4
  80c284:	00bfffc4 	movi	r2,-1
  80c288:	00c00434 	movhi	r3,16
  80c28c:	18ffffc4 	addi	r3,r3,-1
  80c290:	208c703a 	and	r6,r4,r2
  80c294:	28ce703a 	and	r7,r5,r3
  80c298:	4a01ffcc 	andi	r8,r9,2047
  80c29c:	003f7206 	br	80c068 <__pack_d+0x50>
  80c2a0:	503fe91e 	bne	r10,zero,80c248 <__pack_d+0x230>
  80c2a4:	01004004 	movi	r4,256
  80c2a8:	3904703a 	and	r2,r7,r4
  80c2ac:	0007883a 	mov	r3,zero
  80c2b0:	10c4b03a 	or	r2,r2,r3
  80c2b4:	10000626 	beq	r2,zero,80c2d0 <__pack_d+0x2b8>
  80c2b8:	3a45883a 	add	r2,r7,r9
  80c2bc:	11cd803a 	cmpltu	r6,r2,r7
  80c2c0:	320d883a 	add	r6,r6,r8
  80c2c4:	100f883a 	mov	r7,r2
  80c2c8:	3011883a 	mov	r8,r6
  80c2cc:	0007883a 	mov	r3,zero
  80c2d0:	00840034 	movhi	r2,4096
  80c2d4:	10bfffc4 	addi	r2,r2,-1
  80c2d8:	123fe52e 	bgeu	r2,r8,80c270 <__pack_d+0x258>
  80c2dc:	00c00044 	movi	r3,1
  80c2e0:	003fe306 	br	80c270 <__pack_d+0x258>
  80c2e4:	0009883a 	mov	r4,zero
  80c2e8:	0013883a 	mov	r9,zero
  80c2ec:	000b883a 	mov	r5,zero
  80c2f0:	003fe406 	br	80c284 <__pack_d+0x26c>
  80c2f4:	4a47883a 	add	r3,r9,r9
  80c2f8:	008007c4 	movi	r2,31
  80c2fc:	1105c83a 	sub	r2,r2,r4
  80c300:	1886983a 	sll	r3,r3,r2
  80c304:	4118d83a 	srl	r12,r8,r4
  80c308:	491ad83a 	srl	r13,r9,r4
  80c30c:	1b18b03a 	or	r12,r3,r12
  80c310:	003fb506 	br	80c1e8 <__pack_d+0x1d0>
  80c314:	2806d07a 	srli	r3,r5,1
  80c318:	008007c4 	movi	r2,31
  80c31c:	1105c83a 	sub	r2,r2,r4
  80c320:	1896d83a 	srl	r11,r3,r2
  80c324:	2914983a 	sll	r10,r5,r4
  80c328:	003fb506 	br	80c200 <__pack_d+0x1e8>

0080c32c <__unpack_d>:
  80c32c:	20c00117 	ldw	r3,4(r4)
  80c330:	22400017 	ldw	r9,0(r4)
  80c334:	00800434 	movhi	r2,16
  80c338:	10bfffc4 	addi	r2,r2,-1
  80c33c:	1808d53a 	srli	r4,r3,20
  80c340:	180cd7fa 	srli	r6,r3,31
  80c344:	1894703a 	and	r10,r3,r2
  80c348:	2201ffcc 	andi	r8,r4,2047
  80c34c:	281b883a 	mov	r13,r5
  80c350:	4817883a 	mov	r11,r9
  80c354:	29800115 	stw	r6,4(r5)
  80c358:	5019883a 	mov	r12,r10
  80c35c:	40001e1e 	bne	r8,zero,80c3d8 <__unpack_d+0xac>
  80c360:	4a84b03a 	or	r2,r9,r10
  80c364:	10001926 	beq	r2,zero,80c3cc <__unpack_d+0xa0>
  80c368:	4804d63a 	srli	r2,r9,24
  80c36c:	500c923a 	slli	r6,r10,8
  80c370:	013f0084 	movi	r4,-1022
  80c374:	00c40034 	movhi	r3,4096
  80c378:	18ffffc4 	addi	r3,r3,-1
  80c37c:	118cb03a 	or	r6,r2,r6
  80c380:	008000c4 	movi	r2,3
  80c384:	480a923a 	slli	r5,r9,8
  80c388:	68800015 	stw	r2,0(r13)
  80c38c:	69000215 	stw	r4,8(r13)
  80c390:	19800b36 	bltu	r3,r6,80c3c0 <__unpack_d+0x94>
  80c394:	200f883a 	mov	r7,r4
  80c398:	1811883a 	mov	r8,r3
  80c39c:	2945883a 	add	r2,r5,r5
  80c3a0:	1149803a 	cmpltu	r4,r2,r5
  80c3a4:	3187883a 	add	r3,r6,r6
  80c3a8:	20c9883a 	add	r4,r4,r3
  80c3ac:	100b883a 	mov	r5,r2
  80c3b0:	200d883a 	mov	r6,r4
  80c3b4:	39ffffc4 	addi	r7,r7,-1
  80c3b8:	413ff82e 	bgeu	r8,r4,80c39c <__unpack_d+0x70>
  80c3bc:	69c00215 	stw	r7,8(r13)
  80c3c0:	69800415 	stw	r6,16(r13)
  80c3c4:	69400315 	stw	r5,12(r13)
  80c3c8:	f800283a 	ret
  80c3cc:	00800084 	movi	r2,2
  80c3d0:	28800015 	stw	r2,0(r5)
  80c3d4:	f800283a 	ret
  80c3d8:	0081ffc4 	movi	r2,2047
  80c3dc:	40800f26 	beq	r8,r2,80c41c <__unpack_d+0xf0>
  80c3e0:	480cd63a 	srli	r6,r9,24
  80c3e4:	5006923a 	slli	r3,r10,8
  80c3e8:	4804923a 	slli	r2,r9,8
  80c3ec:	0009883a 	mov	r4,zero
  80c3f0:	30c6b03a 	or	r3,r6,r3
  80c3f4:	01440034 	movhi	r5,4096
  80c3f8:	110cb03a 	or	r6,r2,r4
  80c3fc:	423f0044 	addi	r8,r8,-1023
  80c400:	194eb03a 	or	r7,r3,r5
  80c404:	008000c4 	movi	r2,3
  80c408:	69c00415 	stw	r7,16(r13)
  80c40c:	6a000215 	stw	r8,8(r13)
  80c410:	68800015 	stw	r2,0(r13)
  80c414:	69800315 	stw	r6,12(r13)
  80c418:	f800283a 	ret
  80c41c:	4a84b03a 	or	r2,r9,r10
  80c420:	1000031e 	bne	r2,zero,80c430 <__unpack_d+0x104>
  80c424:	00800104 	movi	r2,4
  80c428:	28800015 	stw	r2,0(r5)
  80c42c:	f800283a 	ret
  80c430:	0009883a 	mov	r4,zero
  80c434:	01400234 	movhi	r5,8
  80c438:	4904703a 	and	r2,r9,r4
  80c43c:	5146703a 	and	r3,r10,r5
  80c440:	10c4b03a 	or	r2,r2,r3
  80c444:	10000526 	beq	r2,zero,80c45c <__unpack_d+0x130>
  80c448:	00800044 	movi	r2,1
  80c44c:	68800015 	stw	r2,0(r13)
  80c450:	6b000415 	stw	r12,16(r13)
  80c454:	6ac00315 	stw	r11,12(r13)
  80c458:	f800283a 	ret
  80c45c:	68000015 	stw	zero,0(r13)
  80c460:	003ffb06 	br	80c450 <__unpack_d+0x124>

0080c464 <__fpcmp_parts_d>:
  80c464:	21800017 	ldw	r6,0(r4)
  80c468:	00c00044 	movi	r3,1
  80c46c:	19800a2e 	bgeu	r3,r6,80c498 <__fpcmp_parts_d+0x34>
  80c470:	28800017 	ldw	r2,0(r5)
  80c474:	1880082e 	bgeu	r3,r2,80c498 <__fpcmp_parts_d+0x34>
  80c478:	00c00104 	movi	r3,4
  80c47c:	30c02626 	beq	r6,r3,80c518 <__fpcmp_parts_d+0xb4>
  80c480:	10c02226 	beq	r2,r3,80c50c <__fpcmp_parts_d+0xa8>
  80c484:	00c00084 	movi	r3,2
  80c488:	30c00526 	beq	r6,r3,80c4a0 <__fpcmp_parts_d+0x3c>
  80c48c:	10c0071e 	bne	r2,r3,80c4ac <__fpcmp_parts_d+0x48>
  80c490:	20800117 	ldw	r2,4(r4)
  80c494:	1000091e 	bne	r2,zero,80c4bc <__fpcmp_parts_d+0x58>
  80c498:	00800044 	movi	r2,1
  80c49c:	f800283a 	ret
  80c4a0:	10c01a1e 	bne	r2,r3,80c50c <__fpcmp_parts_d+0xa8>
  80c4a4:	0005883a 	mov	r2,zero
  80c4a8:	f800283a 	ret
  80c4ac:	22000117 	ldw	r8,4(r4)
  80c4b0:	28800117 	ldw	r2,4(r5)
  80c4b4:	40800326 	beq	r8,r2,80c4c4 <__fpcmp_parts_d+0x60>
  80c4b8:	403ff726 	beq	r8,zero,80c498 <__fpcmp_parts_d+0x34>
  80c4bc:	00bfffc4 	movi	r2,-1
  80c4c0:	f800283a 	ret
  80c4c4:	20c00217 	ldw	r3,8(r4)
  80c4c8:	28800217 	ldw	r2,8(r5)
  80c4cc:	10fffa16 	blt	r2,r3,80c4b8 <__fpcmp_parts_d+0x54>
  80c4d0:	18800916 	blt	r3,r2,80c4f8 <__fpcmp_parts_d+0x94>
  80c4d4:	21c00417 	ldw	r7,16(r4)
  80c4d8:	28c00417 	ldw	r3,16(r5)
  80c4dc:	21800317 	ldw	r6,12(r4)
  80c4e0:	28800317 	ldw	r2,12(r5)
  80c4e4:	19fff436 	bltu	r3,r7,80c4b8 <__fpcmp_parts_d+0x54>
  80c4e8:	38c00526 	beq	r7,r3,80c500 <__fpcmp_parts_d+0x9c>
  80c4ec:	38c00236 	bltu	r7,r3,80c4f8 <__fpcmp_parts_d+0x94>
  80c4f0:	19ffec1e 	bne	r3,r7,80c4a4 <__fpcmp_parts_d+0x40>
  80c4f4:	30bfeb2e 	bgeu	r6,r2,80c4a4 <__fpcmp_parts_d+0x40>
  80c4f8:	403fe71e 	bne	r8,zero,80c498 <__fpcmp_parts_d+0x34>
  80c4fc:	003fef06 	br	80c4bc <__fpcmp_parts_d+0x58>
  80c500:	11bffa2e 	bgeu	r2,r6,80c4ec <__fpcmp_parts_d+0x88>
  80c504:	403fe426 	beq	r8,zero,80c498 <__fpcmp_parts_d+0x34>
  80c508:	003fec06 	br	80c4bc <__fpcmp_parts_d+0x58>
  80c50c:	28800117 	ldw	r2,4(r5)
  80c510:	103fe11e 	bne	r2,zero,80c498 <__fpcmp_parts_d+0x34>
  80c514:	003fe906 	br	80c4bc <__fpcmp_parts_d+0x58>
  80c518:	11bfdd1e 	bne	r2,r6,80c490 <__fpcmp_parts_d+0x2c>
  80c51c:	28c00117 	ldw	r3,4(r5)
  80c520:	20800117 	ldw	r2,4(r4)
  80c524:	1885c83a 	sub	r2,r3,r2
  80c528:	f800283a 	ret

0080c52c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c52c:	defff804 	addi	sp,sp,-32
  80c530:	dfc00715 	stw	ra,28(sp)
  80c534:	df000615 	stw	fp,24(sp)
  80c538:	df000604 	addi	fp,sp,24
  80c53c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c540:	e0bffc17 	ldw	r2,-16(fp)
  80c544:	1004803a 	cmplt	r2,r2,zero
  80c548:	1000081e 	bne	r2,zero,80c56c <close+0x40>
  80c54c:	e0bffc17 	ldw	r2,-16(fp)
  80c550:	10800324 	muli	r2,r2,12
  80c554:	1007883a 	mov	r3,r2
  80c558:	00802074 	movhi	r2,129
  80c55c:	10850e04 	addi	r2,r2,5176
  80c560:	1887883a 	add	r3,r3,r2
  80c564:	e0ffff15 	stw	r3,-4(fp)
  80c568:	00000106 	br	80c570 <close+0x44>
  80c56c:	e03fff15 	stw	zero,-4(fp)
  80c570:	e0bfff17 	ldw	r2,-4(fp)
  80c574:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c578:	e0bffb17 	ldw	r2,-20(fp)
  80c57c:	1005003a 	cmpeq	r2,r2,zero
  80c580:	10001d1e 	bne	r2,zero,80c5f8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c584:	e0bffb17 	ldw	r2,-20(fp)
  80c588:	10800017 	ldw	r2,0(r2)
  80c58c:	10800417 	ldw	r2,16(r2)
  80c590:	1005003a 	cmpeq	r2,r2,zero
  80c594:	1000071e 	bne	r2,zero,80c5b4 <close+0x88>
  80c598:	e0bffb17 	ldw	r2,-20(fp)
  80c59c:	10800017 	ldw	r2,0(r2)
  80c5a0:	10800417 	ldw	r2,16(r2)
  80c5a4:	e13ffb17 	ldw	r4,-20(fp)
  80c5a8:	103ee83a 	callr	r2
  80c5ac:	e0bffe15 	stw	r2,-8(fp)
  80c5b0:	00000106 	br	80c5b8 <close+0x8c>
  80c5b4:	e03ffe15 	stw	zero,-8(fp)
  80c5b8:	e0bffe17 	ldw	r2,-8(fp)
  80c5bc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c5c0:	e13ffc17 	ldw	r4,-16(fp)
  80c5c4:	080d1940 	call	80d194 <alt_release_fd>
    if (rval < 0)
  80c5c8:	e0bffa17 	ldw	r2,-24(fp)
  80c5cc:	1004403a 	cmpge	r2,r2,zero
  80c5d0:	1000071e 	bne	r2,zero,80c5f0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80c5d4:	080c6280 	call	80c628 <alt_get_errno>
  80c5d8:	e0fffa17 	ldw	r3,-24(fp)
  80c5dc:	00c7c83a 	sub	r3,zero,r3
  80c5e0:	10c00015 	stw	r3,0(r2)
      return -1;
  80c5e4:	00bfffc4 	movi	r2,-1
  80c5e8:	e0bffd15 	stw	r2,-12(fp)
  80c5ec:	00000806 	br	80c610 <close+0xe4>
    }
    return 0;
  80c5f0:	e03ffd15 	stw	zero,-12(fp)
  80c5f4:	00000606 	br	80c610 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c5f8:	080c6280 	call	80c628 <alt_get_errno>
  80c5fc:	1007883a 	mov	r3,r2
  80c600:	00801444 	movi	r2,81
  80c604:	18800015 	stw	r2,0(r3)
    return -1;
  80c608:	00bfffc4 	movi	r2,-1
  80c60c:	e0bffd15 	stw	r2,-12(fp)
  80c610:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c614:	e037883a 	mov	sp,fp
  80c618:	dfc00117 	ldw	ra,4(sp)
  80c61c:	df000017 	ldw	fp,0(sp)
  80c620:	dec00204 	addi	sp,sp,8
  80c624:	f800283a 	ret

0080c628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c628:	defffd04 	addi	sp,sp,-12
  80c62c:	dfc00215 	stw	ra,8(sp)
  80c630:	df000115 	stw	fp,4(sp)
  80c634:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c638:	00802074 	movhi	r2,129
  80c63c:	1089fa04 	addi	r2,r2,10216
  80c640:	10800017 	ldw	r2,0(r2)
  80c644:	1005003a 	cmpeq	r2,r2,zero
  80c648:	1000061e 	bne	r2,zero,80c664 <alt_get_errno+0x3c>
  80c64c:	00802074 	movhi	r2,129
  80c650:	1089fa04 	addi	r2,r2,10216
  80c654:	10800017 	ldw	r2,0(r2)
  80c658:	103ee83a 	callr	r2
  80c65c:	e0bfff15 	stw	r2,-4(fp)
  80c660:	00000306 	br	80c670 <alt_get_errno+0x48>
  80c664:	00802074 	movhi	r2,129
  80c668:	10910404 	addi	r2,r2,17424
  80c66c:	e0bfff15 	stw	r2,-4(fp)
  80c670:	e0bfff17 	ldw	r2,-4(fp)
}
  80c674:	e037883a 	mov	sp,fp
  80c678:	dfc00117 	ldw	ra,4(sp)
  80c67c:	df000017 	ldw	fp,0(sp)
  80c680:	dec00204 	addi	sp,sp,8
  80c684:	f800283a 	ret

0080c688 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c688:	defffc04 	addi	sp,sp,-16
  80c68c:	df000315 	stw	fp,12(sp)
  80c690:	df000304 	addi	fp,sp,12
  80c694:	e13ffd15 	stw	r4,-12(fp)
  80c698:	e17ffe15 	stw	r5,-8(fp)
  80c69c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c6a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c6a4:	e037883a 	mov	sp,fp
  80c6a8:	df000017 	ldw	fp,0(sp)
  80c6ac:	dec00104 	addi	sp,sp,4
  80c6b0:	f800283a 	ret

0080c6b4 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
  80c6b4:	defffc04 	addi	sp,sp,-16
  80c6b8:	dfc00315 	stw	ra,12(sp)
  80c6bc:	df000215 	stw	fp,8(sp)
  80c6c0:	df000204 	addi	fp,sp,8
  80c6c4:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
  80c6c8:	e13fff17 	ldw	r4,-4(fp)
  80c6cc:	d1600d04 	addi	r5,gp,-32716
  80c6d0:	080c8840 	call	80c884 <alt_find_dev>
  80c6d4:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  80c6d8:	e0bffe17 	ldw	r2,-8(fp)
  80c6dc:	1004c03a 	cmpne	r2,r2,zero
  80c6e0:	1000041e 	bne	r2,zero,80c6f4 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80c6e4:	080c70c0 	call	80c70c <alt_get_errno>
  80c6e8:	1007883a 	mov	r3,r2
  80c6ec:	008004c4 	movi	r2,19
  80c6f0:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80c6f4:	e0bffe17 	ldw	r2,-8(fp)
}
  80c6f8:	e037883a 	mov	sp,fp
  80c6fc:	dfc00117 	ldw	ra,4(sp)
  80c700:	df000017 	ldw	fp,0(sp)
  80c704:	dec00204 	addi	sp,sp,8
  80c708:	f800283a 	ret

0080c70c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c70c:	defffd04 	addi	sp,sp,-12
  80c710:	dfc00215 	stw	ra,8(sp)
  80c714:	df000115 	stw	fp,4(sp)
  80c718:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c71c:	00802074 	movhi	r2,129
  80c720:	1089fa04 	addi	r2,r2,10216
  80c724:	10800017 	ldw	r2,0(r2)
  80c728:	1005003a 	cmpeq	r2,r2,zero
  80c72c:	1000061e 	bne	r2,zero,80c748 <alt_get_errno+0x3c>
  80c730:	00802074 	movhi	r2,129
  80c734:	1089fa04 	addi	r2,r2,10216
  80c738:	10800017 	ldw	r2,0(r2)
  80c73c:	103ee83a 	callr	r2
  80c740:	e0bfff15 	stw	r2,-4(fp)
  80c744:	00000306 	br	80c754 <alt_get_errno+0x48>
  80c748:	00802074 	movhi	r2,129
  80c74c:	10910404 	addi	r2,r2,17424
  80c750:	e0bfff15 	stw	r2,-4(fp)
  80c754:	e0bfff17 	ldw	r2,-4(fp)
}
  80c758:	e037883a 	mov	sp,fp
  80c75c:	dfc00117 	ldw	ra,4(sp)
  80c760:	df000017 	ldw	fp,0(sp)
  80c764:	dec00204 	addi	sp,sp,8
  80c768:	f800283a 	ret

0080c76c <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
  80c76c:	defffc04 	addi	sp,sp,-16
  80c770:	dfc00315 	stw	ra,12(sp)
  80c774:	df000215 	stw	fp,8(sp)
  80c778:	df000204 	addi	fp,sp,8
  80c77c:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
  80c780:	e13fff17 	ldw	r4,-4(fp)
  80c784:	d1600f04 	addi	r5,gp,-32708
  80c788:	080c8840 	call	80c884 <alt_find_dev>
  80c78c:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  80c790:	e0bffe17 	ldw	r2,-8(fp)
  80c794:	1004c03a 	cmpne	r2,r2,zero
  80c798:	1000041e 	bne	r2,zero,80c7ac <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
  80c79c:	080c7c40 	call	80c7c4 <alt_get_errno>
  80c7a0:	1007883a 	mov	r3,r2
  80c7a4:	008004c4 	movi	r2,19
  80c7a8:	18800015 	stw	r2,0(r3)
  }

  return dev;
  80c7ac:	e0bffe17 	ldw	r2,-8(fp)
}
  80c7b0:	e037883a 	mov	sp,fp
  80c7b4:	dfc00117 	ldw	ra,4(sp)
  80c7b8:	df000017 	ldw	fp,0(sp)
  80c7bc:	dec00204 	addi	sp,sp,8
  80c7c0:	f800283a 	ret

0080c7c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c7c4:	defffd04 	addi	sp,sp,-12
  80c7c8:	dfc00215 	stw	ra,8(sp)
  80c7cc:	df000115 	stw	fp,4(sp)
  80c7d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c7d4:	00802074 	movhi	r2,129
  80c7d8:	1089fa04 	addi	r2,r2,10216
  80c7dc:	10800017 	ldw	r2,0(r2)
  80c7e0:	1005003a 	cmpeq	r2,r2,zero
  80c7e4:	1000061e 	bne	r2,zero,80c800 <alt_get_errno+0x3c>
  80c7e8:	00802074 	movhi	r2,129
  80c7ec:	1089fa04 	addi	r2,r2,10216
  80c7f0:	10800017 	ldw	r2,0(r2)
  80c7f4:	103ee83a 	callr	r2
  80c7f8:	e0bfff15 	stw	r2,-4(fp)
  80c7fc:	00000306 	br	80c80c <alt_get_errno+0x48>
  80c800:	00802074 	movhi	r2,129
  80c804:	10910404 	addi	r2,r2,17424
  80c808:	e0bfff15 	stw	r2,-4(fp)
  80c80c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c810:	e037883a 	mov	sp,fp
  80c814:	dfc00117 	ldw	ra,4(sp)
  80c818:	df000017 	ldw	fp,0(sp)
  80c81c:	dec00204 	addi	sp,sp,8
  80c820:	f800283a 	ret

0080c824 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80c824:	defffd04 	addi	sp,sp,-12
  80c828:	df000215 	stw	fp,8(sp)
  80c82c:	df000204 	addi	fp,sp,8
  80c830:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80c834:	e0bfff17 	ldw	r2,-4(fp)
  80c838:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c83c:	e0bffe17 	ldw	r2,-8(fp)
  80c840:	1005003a 	cmpeq	r2,r2,zero
  80c844:	1000021e 	bne	r2,zero,80c850 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80c848:	002af070 	cmpltui	zero,zero,43969
  80c84c:	00000106 	br	80c854 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80c850:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80c854:	e037883a 	mov	sp,fp
  80c858:	df000017 	ldw	fp,0(sp)
  80c85c:	dec00104 	addi	sp,sp,4
  80c860:	f800283a 	ret

0080c864 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80c864:	defffd04 	addi	sp,sp,-12
  80c868:	dfc00215 	stw	ra,8(sp)
  80c86c:	df000115 	stw	fp,4(sp)
  80c870:	df000104 	addi	fp,sp,4
  80c874:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80c878:	e13fff17 	ldw	r4,-4(fp)
  80c87c:	080c8240 	call	80c824 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80c880:	003fff06 	br	80c880 <_exit+0x1c>

0080c884 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c884:	defff904 	addi	sp,sp,-28
  80c888:	dfc00615 	stw	ra,24(sp)
  80c88c:	df000515 	stw	fp,20(sp)
  80c890:	df000504 	addi	fp,sp,20
  80c894:	e13ffd15 	stw	r4,-12(fp)
  80c898:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80c89c:	e0bffe17 	ldw	r2,-8(fp)
  80c8a0:	10800017 	ldw	r2,0(r2)
  80c8a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80c8a8:	e13ffd17 	ldw	r4,-12(fp)
  80c8ac:	080206c0 	call	80206c <strlen>
  80c8b0:	10800044 	addi	r2,r2,1
  80c8b4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c8b8:	00000d06 	br	80c8f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80c8bc:	e0bffc17 	ldw	r2,-16(fp)
  80c8c0:	11000217 	ldw	r4,8(r2)
  80c8c4:	e1bffb17 	ldw	r6,-20(fp)
  80c8c8:	e17ffd17 	ldw	r5,-12(fp)
  80c8cc:	08103d80 	call	8103d8 <memcmp>
  80c8d0:	1004c03a 	cmpne	r2,r2,zero
  80c8d4:	1000031e 	bne	r2,zero,80c8e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80c8d8:	e0bffc17 	ldw	r2,-16(fp)
  80c8dc:	e0bfff15 	stw	r2,-4(fp)
  80c8e0:	00000706 	br	80c900 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80c8e4:	e0bffc17 	ldw	r2,-16(fp)
  80c8e8:	10800017 	ldw	r2,0(r2)
  80c8ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c8f0:	e0fffe17 	ldw	r3,-8(fp)
  80c8f4:	e0bffc17 	ldw	r2,-16(fp)
  80c8f8:	10fff01e 	bne	r2,r3,80c8bc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80c8fc:	e03fff15 	stw	zero,-4(fp)
  80c900:	e0bfff17 	ldw	r2,-4(fp)
}
  80c904:	e037883a 	mov	sp,fp
  80c908:	dfc00117 	ldw	ra,4(sp)
  80c90c:	df000017 	ldw	fp,0(sp)
  80c910:	dec00204 	addi	sp,sp,8
  80c914:	f800283a 	ret

0080c918 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c918:	defff904 	addi	sp,sp,-28
  80c91c:	dfc00615 	stw	ra,24(sp)
  80c920:	df000515 	stw	fp,20(sp)
  80c924:	df000504 	addi	fp,sp,20
  80c928:	e13ffc15 	stw	r4,-16(fp)
  80c92c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c930:	e0bffc17 	ldw	r2,-16(fp)
  80c934:	1004803a 	cmplt	r2,r2,zero
  80c938:	1000081e 	bne	r2,zero,80c95c <fstat+0x44>
  80c93c:	e0bffc17 	ldw	r2,-16(fp)
  80c940:	10800324 	muli	r2,r2,12
  80c944:	1007883a 	mov	r3,r2
  80c948:	00802074 	movhi	r2,129
  80c94c:	10850e04 	addi	r2,r2,5176
  80c950:	1887883a 	add	r3,r3,r2
  80c954:	e0ffff15 	stw	r3,-4(fp)
  80c958:	00000106 	br	80c960 <fstat+0x48>
  80c95c:	e03fff15 	stw	zero,-4(fp)
  80c960:	e0bfff17 	ldw	r2,-4(fp)
  80c964:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c968:	e0bffb17 	ldw	r2,-20(fp)
  80c96c:	1005003a 	cmpeq	r2,r2,zero
  80c970:	1000121e 	bne	r2,zero,80c9bc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c974:	e0bffb17 	ldw	r2,-20(fp)
  80c978:	10800017 	ldw	r2,0(r2)
  80c97c:	10800817 	ldw	r2,32(r2)
  80c980:	1005003a 	cmpeq	r2,r2,zero
  80c984:	1000081e 	bne	r2,zero,80c9a8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80c988:	e0bffb17 	ldw	r2,-20(fp)
  80c98c:	10800017 	ldw	r2,0(r2)
  80c990:	10800817 	ldw	r2,32(r2)
  80c994:	e13ffb17 	ldw	r4,-20(fp)
  80c998:	e17ffd17 	ldw	r5,-12(fp)
  80c99c:	103ee83a 	callr	r2
  80c9a0:	e0bffe15 	stw	r2,-8(fp)
  80c9a4:	00000b06 	br	80c9d4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c9a8:	e0fffd17 	ldw	r3,-12(fp)
  80c9ac:	00880004 	movi	r2,8192
  80c9b0:	18800115 	stw	r2,4(r3)
      return 0;
  80c9b4:	e03ffe15 	stw	zero,-8(fp)
  80c9b8:	00000606 	br	80c9d4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c9bc:	080c9ec0 	call	80c9ec <alt_get_errno>
  80c9c0:	1007883a 	mov	r3,r2
  80c9c4:	00801444 	movi	r2,81
  80c9c8:	18800015 	stw	r2,0(r3)
    return -1;
  80c9cc:	00bfffc4 	movi	r2,-1
  80c9d0:	e0bffe15 	stw	r2,-8(fp)
  80c9d4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c9d8:	e037883a 	mov	sp,fp
  80c9dc:	dfc00117 	ldw	ra,4(sp)
  80c9e0:	df000017 	ldw	fp,0(sp)
  80c9e4:	dec00204 	addi	sp,sp,8
  80c9e8:	f800283a 	ret

0080c9ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c9ec:	defffd04 	addi	sp,sp,-12
  80c9f0:	dfc00215 	stw	ra,8(sp)
  80c9f4:	df000115 	stw	fp,4(sp)
  80c9f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c9fc:	00802074 	movhi	r2,129
  80ca00:	1089fa04 	addi	r2,r2,10216
  80ca04:	10800017 	ldw	r2,0(r2)
  80ca08:	1005003a 	cmpeq	r2,r2,zero
  80ca0c:	1000061e 	bne	r2,zero,80ca28 <alt_get_errno+0x3c>
  80ca10:	00802074 	movhi	r2,129
  80ca14:	1089fa04 	addi	r2,r2,10216
  80ca18:	10800017 	ldw	r2,0(r2)
  80ca1c:	103ee83a 	callr	r2
  80ca20:	e0bfff15 	stw	r2,-4(fp)
  80ca24:	00000306 	br	80ca34 <alt_get_errno+0x48>
  80ca28:	00802074 	movhi	r2,129
  80ca2c:	10910404 	addi	r2,r2,17424
  80ca30:	e0bfff15 	stw	r2,-4(fp)
  80ca34:	e0bfff17 	ldw	r2,-4(fp)
}
  80ca38:	e037883a 	mov	sp,fp
  80ca3c:	dfc00117 	ldw	ra,4(sp)
  80ca40:	df000017 	ldw	fp,0(sp)
  80ca44:	dec00204 	addi	sp,sp,8
  80ca48:	f800283a 	ret

0080ca4c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80ca4c:	deffff04 	addi	sp,sp,-4
  80ca50:	df000015 	stw	fp,0(sp)
  80ca54:	d839883a 	mov	fp,sp
  return 0;
  80ca58:	0005883a 	mov	r2,zero
}
  80ca5c:	e037883a 	mov	sp,fp
  80ca60:	df000017 	ldw	fp,0(sp)
  80ca64:	dec00104 	addi	sp,sp,4
  80ca68:	f800283a 	ret

0080ca6c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ca6c:	deffeb04 	addi	sp,sp,-84
  80ca70:	dfc01415 	stw	ra,80(sp)
  80ca74:	df001315 	stw	fp,76(sp)
  80ca78:	df001304 	addi	fp,sp,76
  80ca7c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ca80:	e0bffd17 	ldw	r2,-12(fp)
  80ca84:	1004803a 	cmplt	r2,r2,zero
  80ca88:	1000081e 	bne	r2,zero,80caac <isatty+0x40>
  80ca8c:	e0bffd17 	ldw	r2,-12(fp)
  80ca90:	10800324 	muli	r2,r2,12
  80ca94:	1007883a 	mov	r3,r2
  80ca98:	00802074 	movhi	r2,129
  80ca9c:	10850e04 	addi	r2,r2,5176
  80caa0:	1887883a 	add	r3,r3,r2
  80caa4:	e0ffff15 	stw	r3,-4(fp)
  80caa8:	00000106 	br	80cab0 <isatty+0x44>
  80caac:	e03fff15 	stw	zero,-4(fp)
  80cab0:	e0bfff17 	ldw	r2,-4(fp)
  80cab4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80cab8:	e0bfed17 	ldw	r2,-76(fp)
  80cabc:	1005003a 	cmpeq	r2,r2,zero
  80cac0:	10000f1e 	bne	r2,zero,80cb00 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80cac4:	e0bfed17 	ldw	r2,-76(fp)
  80cac8:	10800017 	ldw	r2,0(r2)
  80cacc:	10800817 	ldw	r2,32(r2)
  80cad0:	1004c03a 	cmpne	r2,r2,zero
  80cad4:	1000031e 	bne	r2,zero,80cae4 <isatty+0x78>
    {
      return 1;
  80cad8:	00800044 	movi	r2,1
  80cadc:	e0bffe15 	stw	r2,-8(fp)
  80cae0:	00000c06 	br	80cb14 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80cae4:	e17fee04 	addi	r5,fp,-72
  80cae8:	e13ffd17 	ldw	r4,-12(fp)
  80caec:	080c9180 	call	80c918 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80caf0:	e0bfef17 	ldw	r2,-68(fp)
  80caf4:	10880020 	cmpeqi	r2,r2,8192
  80caf8:	e0bffe15 	stw	r2,-8(fp)
  80cafc:	00000506 	br	80cb14 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cb00:	080cb2c0 	call	80cb2c <alt_get_errno>
  80cb04:	1007883a 	mov	r3,r2
  80cb08:	00801444 	movi	r2,81
  80cb0c:	18800015 	stw	r2,0(r3)
    return 0;
  80cb10:	e03ffe15 	stw	zero,-8(fp)
  80cb14:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80cb18:	e037883a 	mov	sp,fp
  80cb1c:	dfc00117 	ldw	ra,4(sp)
  80cb20:	df000017 	ldw	fp,0(sp)
  80cb24:	dec00204 	addi	sp,sp,8
  80cb28:	f800283a 	ret

0080cb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cb2c:	defffd04 	addi	sp,sp,-12
  80cb30:	dfc00215 	stw	ra,8(sp)
  80cb34:	df000115 	stw	fp,4(sp)
  80cb38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cb3c:	00802074 	movhi	r2,129
  80cb40:	1089fa04 	addi	r2,r2,10216
  80cb44:	10800017 	ldw	r2,0(r2)
  80cb48:	1005003a 	cmpeq	r2,r2,zero
  80cb4c:	1000061e 	bne	r2,zero,80cb68 <alt_get_errno+0x3c>
  80cb50:	00802074 	movhi	r2,129
  80cb54:	1089fa04 	addi	r2,r2,10216
  80cb58:	10800017 	ldw	r2,0(r2)
  80cb5c:	103ee83a 	callr	r2
  80cb60:	e0bfff15 	stw	r2,-4(fp)
  80cb64:	00000306 	br	80cb74 <alt_get_errno+0x48>
  80cb68:	00802074 	movhi	r2,129
  80cb6c:	10910404 	addi	r2,r2,17424
  80cb70:	e0bfff15 	stw	r2,-4(fp)
  80cb74:	e0bfff17 	ldw	r2,-4(fp)
}
  80cb78:	e037883a 	mov	sp,fp
  80cb7c:	dfc00117 	ldw	ra,4(sp)
  80cb80:	df000017 	ldw	fp,0(sp)
  80cb84:	dec00204 	addi	sp,sp,8
  80cb88:	f800283a 	ret

0080cb8c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80cb8c:	defffa04 	addi	sp,sp,-24
  80cb90:	dfc00515 	stw	ra,20(sp)
  80cb94:	df000415 	stw	fp,16(sp)
  80cb98:	df000404 	addi	fp,sp,16
  80cb9c:	e13ffd15 	stw	r4,-12(fp)
  80cba0:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
  80cba4:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
  80cba8:	e0bffd17 	ldw	r2,-12(fp)
  80cbac:	10800048 	cmpgei	r2,r2,1
  80cbb0:	1000301e 	bne	r2,zero,80cc74 <kill+0xe8>
  {
    switch (sig)
  80cbb4:	e0bffe17 	ldw	r2,-8(fp)
  80cbb8:	10800828 	cmpgeui	r2,r2,32
  80cbbc:	10002a1e 	bne	r2,zero,80cc68 <kill+0xdc>
  80cbc0:	e0bffe17 	ldw	r2,-8(fp)
  80cbc4:	1085883a 	add	r2,r2,r2
  80cbc8:	1087883a 	add	r3,r2,r2
  80cbcc:	00802074 	movhi	r2,129
  80cbd0:	10b2f804 	addi	r2,r2,-13344
  80cbd4:	1885883a 	add	r2,r3,r2
  80cbd8:	10800017 	ldw	r2,0(r2)
  80cbdc:	1000683a 	jmp	r2
  80cbe0:	0080cc88 	cmpgei	r2,zero,818
  80cbe4:	0080cc68 	cmpgeui	r2,zero,817
  80cbe8:	0080cc68 	cmpgeui	r2,zero,817
  80cbec:	0080cc60 	cmpeqi	r2,zero,817
  80cbf0:	0080cc60 	cmpeqi	r2,zero,817
  80cbf4:	0080cc60 	cmpeqi	r2,zero,817
  80cbf8:	0080cc60 	cmpeqi	r2,zero,817
  80cbfc:	0080cc68 	cmpgeui	r2,zero,817
  80cc00:	0080cc60 	cmpeqi	r2,zero,817
  80cc04:	0080cc60 	cmpeqi	r2,zero,817
  80cc08:	0080cc60 	cmpeqi	r2,zero,817
  80cc0c:	0080cc60 	cmpeqi	r2,zero,817
  80cc10:	0080cc60 	cmpeqi	r2,zero,817
  80cc14:	0080cc60 	cmpeqi	r2,zero,817
  80cc18:	0080cc60 	cmpeqi	r2,zero,817
  80cc1c:	0080cc60 	cmpeqi	r2,zero,817
  80cc20:	0080cc88 	cmpgei	r2,zero,818
  80cc24:	0080cc68 	cmpgeui	r2,zero,817
  80cc28:	0080cc68 	cmpgeui	r2,zero,817
  80cc2c:	0080cc68 	cmpgeui	r2,zero,817
  80cc30:	0080cc88 	cmpgei	r2,zero,818
  80cc34:	0080cc68 	cmpgeui	r2,zero,817
  80cc38:	0080cc68 	cmpgeui	r2,zero,817
  80cc3c:	0080cc60 	cmpeqi	r2,zero,817
  80cc40:	0080cc60 	cmpeqi	r2,zero,817
  80cc44:	0080cc60 	cmpeqi	r2,zero,817
  80cc48:	0080cc60 	cmpeqi	r2,zero,817
  80cc4c:	0080cc60 	cmpeqi	r2,zero,817
  80cc50:	0080cc68 	cmpgeui	r2,zero,817
  80cc54:	0080cc68 	cmpgeui	r2,zero,817
  80cc58:	0080cc60 	cmpeqi	r2,zero,817
  80cc5c:	0080cc60 	cmpeqi	r2,zero,817
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80cc60:	0009883a 	mov	r4,zero
  80cc64:	080c8640 	call	80c864 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80cc68:	00800584 	movi	r2,22
  80cc6c:	e0bffc15 	stw	r2,-16(fp)
  80cc70:	00000506 	br	80cc88 <kill+0xfc>
    }
  }

  else if (pid > 0)
  80cc74:	e0bffd17 	ldw	r2,-12(fp)
  80cc78:	10800050 	cmplti	r2,r2,1
  80cc7c:	1000021e 	bne	r2,zero,80cc88 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80cc80:	008000c4 	movi	r2,3
  80cc84:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
  80cc88:	e0bffc17 	ldw	r2,-16(fp)
  80cc8c:	1005003a 	cmpeq	r2,r2,zero
  80cc90:	1000071e 	bne	r2,zero,80ccb0 <kill+0x124>
  {
    ALT_ERRNO = status;
  80cc94:	080cccc0 	call	80cccc <alt_get_errno>
  80cc98:	1007883a 	mov	r3,r2
  80cc9c:	e0bffc17 	ldw	r2,-16(fp)
  80cca0:	18800015 	stw	r2,0(r3)
    return -1;
  80cca4:	00bfffc4 	movi	r2,-1
  80cca8:	e0bfff15 	stw	r2,-4(fp)
  80ccac:	00000106 	br	80ccb4 <kill+0x128>
  }

  return 0;
  80ccb0:	e03fff15 	stw	zero,-4(fp)
  80ccb4:	e0bfff17 	ldw	r2,-4(fp)
}
  80ccb8:	e037883a 	mov	sp,fp
  80ccbc:	dfc00117 	ldw	ra,4(sp)
  80ccc0:	df000017 	ldw	fp,0(sp)
  80ccc4:	dec00204 	addi	sp,sp,8
  80ccc8:	f800283a 	ret

0080cccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cccc:	defffd04 	addi	sp,sp,-12
  80ccd0:	dfc00215 	stw	ra,8(sp)
  80ccd4:	df000115 	stw	fp,4(sp)
  80ccd8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ccdc:	00802074 	movhi	r2,129
  80cce0:	1089fa04 	addi	r2,r2,10216
  80cce4:	10800017 	ldw	r2,0(r2)
  80cce8:	1005003a 	cmpeq	r2,r2,zero
  80ccec:	1000061e 	bne	r2,zero,80cd08 <alt_get_errno+0x3c>
  80ccf0:	00802074 	movhi	r2,129
  80ccf4:	1089fa04 	addi	r2,r2,10216
  80ccf8:	10800017 	ldw	r2,0(r2)
  80ccfc:	103ee83a 	callr	r2
  80cd00:	e0bfff15 	stw	r2,-4(fp)
  80cd04:	00000306 	br	80cd14 <alt_get_errno+0x48>
  80cd08:	00802074 	movhi	r2,129
  80cd0c:	10910404 	addi	r2,r2,17424
  80cd10:	e0bfff15 	stw	r2,-4(fp)
  80cd14:	e0bfff17 	ldw	r2,-4(fp)
}
  80cd18:	e037883a 	mov	sp,fp
  80cd1c:	dfc00117 	ldw	ra,4(sp)
  80cd20:	df000017 	ldw	fp,0(sp)
  80cd24:	dec00204 	addi	sp,sp,8
  80cd28:	f800283a 	ret

0080cd2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80cd2c:	defffe04 	addi	sp,sp,-8
  80cd30:	dfc00115 	stw	ra,4(sp)
  80cd34:	df000015 	stw	fp,0(sp)
  80cd38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80cd3c:	01002074 	movhi	r4,129
  80cd40:	2109ff04 	addi	r4,r4,10236
  80cd44:	01402074 	movhi	r5,129
  80cd48:	2942ff04 	addi	r5,r5,3068
  80cd4c:	01802074 	movhi	r6,129
  80cd50:	3189ff04 	addi	r6,r6,10236
  80cd54:	080cdac0 	call	80cdac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80cd58:	01002034 	movhi	r4,128
  80cd5c:	21000804 	addi	r4,r4,32
  80cd60:	01402034 	movhi	r5,128
  80cd64:	29400804 	addi	r5,r5,32
  80cd68:	01802034 	movhi	r6,128
  80cd6c:	31806d04 	addi	r6,r6,436
  80cd70:	080cdac0 	call	80cdac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80cd74:	01002074 	movhi	r4,129
  80cd78:	21016104 	addi	r4,r4,1412
  80cd7c:	01402074 	movhi	r5,129
  80cd80:	29416104 	addi	r5,r5,1412
  80cd84:	01802074 	movhi	r6,129
  80cd88:	3182ff04 	addi	r6,r6,3068
  80cd8c:	080cdac0 	call	80cdac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80cd90:	080f67c0 	call	80f67c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80cd94:	080f89c0 	call	80f89c <alt_icache_flush_all>
}
  80cd98:	e037883a 	mov	sp,fp
  80cd9c:	dfc00117 	ldw	ra,4(sp)
  80cda0:	df000017 	ldw	fp,0(sp)
  80cda4:	dec00204 	addi	sp,sp,8
  80cda8:	f800283a 	ret

0080cdac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80cdac:	defffc04 	addi	sp,sp,-16
  80cdb0:	df000315 	stw	fp,12(sp)
  80cdb4:	df000304 	addi	fp,sp,12
  80cdb8:	e13ffd15 	stw	r4,-12(fp)
  80cdbc:	e17ffe15 	stw	r5,-8(fp)
  80cdc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80cdc4:	e0fffe17 	ldw	r3,-8(fp)
  80cdc8:	e0bffd17 	ldw	r2,-12(fp)
  80cdcc:	18800e26 	beq	r3,r2,80ce08 <alt_load_section+0x5c>
  {
    while( to != end )
  80cdd0:	00000a06 	br	80cdfc <alt_load_section+0x50>
    {
      *to++ = *from++;
  80cdd4:	e0bffd17 	ldw	r2,-12(fp)
  80cdd8:	10c00017 	ldw	r3,0(r2)
  80cddc:	e0bffe17 	ldw	r2,-8(fp)
  80cde0:	10c00015 	stw	r3,0(r2)
  80cde4:	e0bffe17 	ldw	r2,-8(fp)
  80cde8:	10800104 	addi	r2,r2,4
  80cdec:	e0bffe15 	stw	r2,-8(fp)
  80cdf0:	e0bffd17 	ldw	r2,-12(fp)
  80cdf4:	10800104 	addi	r2,r2,4
  80cdf8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80cdfc:	e0fffe17 	ldw	r3,-8(fp)
  80ce00:	e0bfff17 	ldw	r2,-4(fp)
  80ce04:	18bff31e 	bne	r3,r2,80cdd4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80ce08:	e037883a 	mov	sp,fp
  80ce0c:	df000017 	ldw	fp,0(sp)
  80ce10:	dec00104 	addi	sp,sp,4
  80ce14:	f800283a 	ret

0080ce18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ce18:	defff804 	addi	sp,sp,-32
  80ce1c:	dfc00715 	stw	ra,28(sp)
  80ce20:	df000615 	stw	fp,24(sp)
  80ce24:	df000604 	addi	fp,sp,24
  80ce28:	e13ffc15 	stw	r4,-16(fp)
  80ce2c:	e17ffd15 	stw	r5,-12(fp)
  80ce30:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80ce34:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ce38:	e0bffc17 	ldw	r2,-16(fp)
  80ce3c:	1004803a 	cmplt	r2,r2,zero
  80ce40:	1000081e 	bne	r2,zero,80ce64 <lseek+0x4c>
  80ce44:	e0bffc17 	ldw	r2,-16(fp)
  80ce48:	10800324 	muli	r2,r2,12
  80ce4c:	1007883a 	mov	r3,r2
  80ce50:	00802074 	movhi	r2,129
  80ce54:	10850e04 	addi	r2,r2,5176
  80ce58:	1887883a 	add	r3,r3,r2
  80ce5c:	e0ffff15 	stw	r3,-4(fp)
  80ce60:	00000106 	br	80ce68 <lseek+0x50>
  80ce64:	e03fff15 	stw	zero,-4(fp)
  80ce68:	e0bfff17 	ldw	r2,-4(fp)
  80ce6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80ce70:	e0bffb17 	ldw	r2,-20(fp)
  80ce74:	1005003a 	cmpeq	r2,r2,zero
  80ce78:	1000111e 	bne	r2,zero,80cec0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ce7c:	e0bffb17 	ldw	r2,-20(fp)
  80ce80:	10800017 	ldw	r2,0(r2)
  80ce84:	10800717 	ldw	r2,28(r2)
  80ce88:	1005003a 	cmpeq	r2,r2,zero
  80ce8c:	1000091e 	bne	r2,zero,80ceb4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ce90:	e0bffb17 	ldw	r2,-20(fp)
  80ce94:	10800017 	ldw	r2,0(r2)
  80ce98:	10800717 	ldw	r2,28(r2)
  80ce9c:	e13ffb17 	ldw	r4,-20(fp)
  80cea0:	e17ffd17 	ldw	r5,-12(fp)
  80cea4:	e1bffe17 	ldw	r6,-8(fp)
  80cea8:	103ee83a 	callr	r2
  80ceac:	e0bffa15 	stw	r2,-24(fp)
  80ceb0:	00000506 	br	80cec8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ceb4:	00bfde84 	movi	r2,-134
  80ceb8:	e0bffa15 	stw	r2,-24(fp)
  80cebc:	00000206 	br	80cec8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80cec0:	00bfebc4 	movi	r2,-81
  80cec4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80cec8:	e0bffa17 	ldw	r2,-24(fp)
  80cecc:	1004403a 	cmpge	r2,r2,zero
  80ced0:	1000071e 	bne	r2,zero,80cef0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80ced4:	080cf080 	call	80cf08 <alt_get_errno>
  80ced8:	1007883a 	mov	r3,r2
  80cedc:	e0bffa17 	ldw	r2,-24(fp)
  80cee0:	0085c83a 	sub	r2,zero,r2
  80cee4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80cee8:	00bfffc4 	movi	r2,-1
  80ceec:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80cef0:	e0bffa17 	ldw	r2,-24(fp)
}
  80cef4:	e037883a 	mov	sp,fp
  80cef8:	dfc00117 	ldw	ra,4(sp)
  80cefc:	df000017 	ldw	fp,0(sp)
  80cf00:	dec00204 	addi	sp,sp,8
  80cf04:	f800283a 	ret

0080cf08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cf08:	defffd04 	addi	sp,sp,-12
  80cf0c:	dfc00215 	stw	ra,8(sp)
  80cf10:	df000115 	stw	fp,4(sp)
  80cf14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cf18:	00802074 	movhi	r2,129
  80cf1c:	1089fa04 	addi	r2,r2,10216
  80cf20:	10800017 	ldw	r2,0(r2)
  80cf24:	1005003a 	cmpeq	r2,r2,zero
  80cf28:	1000061e 	bne	r2,zero,80cf44 <alt_get_errno+0x3c>
  80cf2c:	00802074 	movhi	r2,129
  80cf30:	1089fa04 	addi	r2,r2,10216
  80cf34:	10800017 	ldw	r2,0(r2)
  80cf38:	103ee83a 	callr	r2
  80cf3c:	e0bfff15 	stw	r2,-4(fp)
  80cf40:	00000306 	br	80cf50 <alt_get_errno+0x48>
  80cf44:	00802074 	movhi	r2,129
  80cf48:	10910404 	addi	r2,r2,17424
  80cf4c:	e0bfff15 	stw	r2,-4(fp)
  80cf50:	e0bfff17 	ldw	r2,-4(fp)
}
  80cf54:	e037883a 	mov	sp,fp
  80cf58:	dfc00117 	ldw	ra,4(sp)
  80cf5c:	df000017 	ldw	fp,0(sp)
  80cf60:	dec00204 	addi	sp,sp,8
  80cf64:	f800283a 	ret

0080cf68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80cf68:	defffd04 	addi	sp,sp,-12
  80cf6c:	dfc00215 	stw	ra,8(sp)
  80cf70:	df000115 	stw	fp,4(sp)
  80cf74:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80cf78:	0009883a 	mov	r4,zero
  80cf7c:	080d4600 	call	80d460 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80cf80:	080d4940 	call	80d494 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80cf84:	01002074 	movhi	r4,129
  80cf88:	2102da04 	addi	r4,r4,2920
  80cf8c:	01402074 	movhi	r5,129
  80cf90:	2942da04 	addi	r5,r5,2920
  80cf94:	01802074 	movhi	r6,129
  80cf98:	3182da04 	addi	r6,r6,2920
  80cf9c:	080fc5c0 	call	80fc5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80cfa0:	080f7d40 	call	80f7d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80cfa4:	01002074 	movhi	r4,129
  80cfa8:	213e0e04 	addi	r4,r4,-1992
  80cfac:	08103c40 	call	8103c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80cfb0:	d1271f17 	ldw	r4,-25476(gp)
  80cfb4:	d1672017 	ldw	r5,-25472(gp)
  80cfb8:	d1a72117 	ldw	r6,-25468(gp)
  80cfbc:	08002300 	call	800230 <main>
  80cfc0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80cfc4:	01000044 	movi	r4,1
  80cfc8:	080c52c0 	call	80c52c <close>
  exit (result);
  80cfcc:	e13fff17 	ldw	r4,-4(fp)
  80cfd0:	08015f00 	call	8015f0 <exit>

0080cfd4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80cfd4:	defffe04 	addi	sp,sp,-8
  80cfd8:	df000115 	stw	fp,4(sp)
  80cfdc:	df000104 	addi	fp,sp,4
  80cfe0:	e13fff15 	stw	r4,-4(fp)
}
  80cfe4:	e037883a 	mov	sp,fp
  80cfe8:	df000017 	ldw	fp,0(sp)
  80cfec:	dec00104 	addi	sp,sp,4
  80cff0:	f800283a 	ret

0080cff4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80cff4:	defffe04 	addi	sp,sp,-8
  80cff8:	df000115 	stw	fp,4(sp)
  80cffc:	df000104 	addi	fp,sp,4
  80d000:	e13fff15 	stw	r4,-4(fp)
}
  80d004:	e037883a 	mov	sp,fp
  80d008:	df000017 	ldw	fp,0(sp)
  80d00c:	dec00104 	addi	sp,sp,4
  80d010:	f800283a 	ret

0080d014 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80d014:	defff704 	addi	sp,sp,-36
  80d018:	dfc00815 	stw	ra,32(sp)
  80d01c:	df000715 	stw	fp,28(sp)
  80d020:	df000704 	addi	fp,sp,28
  80d024:	e13ffb15 	stw	r4,-20(fp)
  80d028:	e17ffc15 	stw	r5,-16(fp)
  80d02c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d030:	e0bffb17 	ldw	r2,-20(fp)
  80d034:	1004803a 	cmplt	r2,r2,zero
  80d038:	1000081e 	bne	r2,zero,80d05c <read+0x48>
  80d03c:	e0bffb17 	ldw	r2,-20(fp)
  80d040:	10800324 	muli	r2,r2,12
  80d044:	1007883a 	mov	r3,r2
  80d048:	00802074 	movhi	r2,129
  80d04c:	10850e04 	addi	r2,r2,5176
  80d050:	1887883a 	add	r3,r3,r2
  80d054:	e0ffff15 	stw	r3,-4(fp)
  80d058:	00000106 	br	80d060 <read+0x4c>
  80d05c:	e03fff15 	stw	zero,-4(fp)
  80d060:	e0bfff17 	ldw	r2,-4(fp)
  80d064:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80d068:	e0bffa17 	ldw	r2,-24(fp)
  80d06c:	1005003a 	cmpeq	r2,r2,zero
  80d070:	1000241e 	bne	r2,zero,80d104 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d074:	e0bffa17 	ldw	r2,-24(fp)
  80d078:	10800217 	ldw	r2,8(r2)
  80d07c:	108000cc 	andi	r2,r2,3
  80d080:	10800060 	cmpeqi	r2,r2,1
  80d084:	10001a1e 	bne	r2,zero,80d0f0 <read+0xdc>
  80d088:	e0bffa17 	ldw	r2,-24(fp)
  80d08c:	10800017 	ldw	r2,0(r2)
  80d090:	10800517 	ldw	r2,20(r2)
  80d094:	1005003a 	cmpeq	r2,r2,zero
  80d098:	1000151e 	bne	r2,zero,80d0f0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80d09c:	e0bffa17 	ldw	r2,-24(fp)
  80d0a0:	10800017 	ldw	r2,0(r2)
  80d0a4:	10800517 	ldw	r2,20(r2)
  80d0a8:	e17ffc17 	ldw	r5,-16(fp)
  80d0ac:	e1bffd17 	ldw	r6,-12(fp)
  80d0b0:	e13ffa17 	ldw	r4,-24(fp)
  80d0b4:	103ee83a 	callr	r2
  80d0b8:	e0bff915 	stw	r2,-28(fp)
  80d0bc:	e0bff917 	ldw	r2,-28(fp)
  80d0c0:	1004403a 	cmpge	r2,r2,zero
  80d0c4:	1000071e 	bne	r2,zero,80d0e4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80d0c8:	080d1340 	call	80d134 <alt_get_errno>
  80d0cc:	e0fff917 	ldw	r3,-28(fp)
  80d0d0:	00c7c83a 	sub	r3,zero,r3
  80d0d4:	10c00015 	stw	r3,0(r2)
          return -1;
  80d0d8:	00bfffc4 	movi	r2,-1
  80d0dc:	e0bffe15 	stw	r2,-8(fp)
  80d0e0:	00000e06 	br	80d11c <read+0x108>
        }
        return rval;
  80d0e4:	e0bff917 	ldw	r2,-28(fp)
  80d0e8:	e0bffe15 	stw	r2,-8(fp)
  80d0ec:	00000b06 	br	80d11c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80d0f0:	080d1340 	call	80d134 <alt_get_errno>
  80d0f4:	1007883a 	mov	r3,r2
  80d0f8:	00800344 	movi	r2,13
  80d0fc:	18800015 	stw	r2,0(r3)
  80d100:	00000406 	br	80d114 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80d104:	080d1340 	call	80d134 <alt_get_errno>
  80d108:	1007883a 	mov	r3,r2
  80d10c:	00801444 	movi	r2,81
  80d110:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d114:	00bfffc4 	movi	r2,-1
  80d118:	e0bffe15 	stw	r2,-8(fp)
  80d11c:	e0bffe17 	ldw	r2,-8(fp)
}
  80d120:	e037883a 	mov	sp,fp
  80d124:	dfc00117 	ldw	ra,4(sp)
  80d128:	df000017 	ldw	fp,0(sp)
  80d12c:	dec00204 	addi	sp,sp,8
  80d130:	f800283a 	ret

0080d134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d134:	defffd04 	addi	sp,sp,-12
  80d138:	dfc00215 	stw	ra,8(sp)
  80d13c:	df000115 	stw	fp,4(sp)
  80d140:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d144:	00802074 	movhi	r2,129
  80d148:	1089fa04 	addi	r2,r2,10216
  80d14c:	10800017 	ldw	r2,0(r2)
  80d150:	1005003a 	cmpeq	r2,r2,zero
  80d154:	1000061e 	bne	r2,zero,80d170 <alt_get_errno+0x3c>
  80d158:	00802074 	movhi	r2,129
  80d15c:	1089fa04 	addi	r2,r2,10216
  80d160:	10800017 	ldw	r2,0(r2)
  80d164:	103ee83a 	callr	r2
  80d168:	e0bfff15 	stw	r2,-4(fp)
  80d16c:	00000306 	br	80d17c <alt_get_errno+0x48>
  80d170:	00802074 	movhi	r2,129
  80d174:	10910404 	addi	r2,r2,17424
  80d178:	e0bfff15 	stw	r2,-4(fp)
  80d17c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d180:	e037883a 	mov	sp,fp
  80d184:	dfc00117 	ldw	ra,4(sp)
  80d188:	df000017 	ldw	fp,0(sp)
  80d18c:	dec00204 	addi	sp,sp,8
  80d190:	f800283a 	ret

0080d194 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80d194:	defffe04 	addi	sp,sp,-8
  80d198:	df000115 	stw	fp,4(sp)
  80d19c:	df000104 	addi	fp,sp,4
  80d1a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80d1a4:	e0bfff17 	ldw	r2,-4(fp)
  80d1a8:	108000d0 	cmplti	r2,r2,3
  80d1ac:	10000d1e 	bne	r2,zero,80d1e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80d1b0:	e0bfff17 	ldw	r2,-4(fp)
  80d1b4:	00c02074 	movhi	r3,129
  80d1b8:	18c50e04 	addi	r3,r3,5176
  80d1bc:	10800324 	muli	r2,r2,12
  80d1c0:	10c5883a 	add	r2,r2,r3
  80d1c4:	10800204 	addi	r2,r2,8
  80d1c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d1cc:	e0bfff17 	ldw	r2,-4(fp)
  80d1d0:	00c02074 	movhi	r3,129
  80d1d4:	18c50e04 	addi	r3,r3,5176
  80d1d8:	10800324 	muli	r2,r2,12
  80d1dc:	10c5883a 	add	r2,r2,r3
  80d1e0:	10000015 	stw	zero,0(r2)
  }
}
  80d1e4:	e037883a 	mov	sp,fp
  80d1e8:	df000017 	ldw	fp,0(sp)
  80d1ec:	dec00104 	addi	sp,sp,4
  80d1f0:	f800283a 	ret

0080d1f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80d1f4:	defff804 	addi	sp,sp,-32
  80d1f8:	df000715 	stw	fp,28(sp)
  80d1fc:	df000704 	addi	fp,sp,28
  80d200:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d204:	0005303a 	rdctl	r2,status
  80d208:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d20c:	e0fffb17 	ldw	r3,-20(fp)
  80d210:	00bfff84 	movi	r2,-2
  80d214:	1884703a 	and	r2,r3,r2
  80d218:	1001703a 	wrctl	status,r2
  
  return context;
  80d21c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80d220:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80d224:	d0a01217 	ldw	r2,-32696(gp)
  80d228:	10c000c4 	addi	r3,r2,3
  80d22c:	00bfff04 	movi	r2,-4
  80d230:	1884703a 	and	r2,r3,r2
  80d234:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80d238:	d0e01217 	ldw	r3,-32696(gp)
  80d23c:	e0bffe17 	ldw	r2,-8(fp)
  80d240:	1887883a 	add	r3,r3,r2
  80d244:	00804034 	movhi	r2,256
  80d248:	10800004 	addi	r2,r2,0
  80d24c:	10c0072e 	bgeu	r2,r3,80d26c <sbrk+0x78>
  80d250:	e0bffd17 	ldw	r2,-12(fp)
  80d254:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d258:	e0bffa17 	ldw	r2,-24(fp)
  80d25c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80d260:	00bfffc4 	movi	r2,-1
  80d264:	e0bfff15 	stw	r2,-4(fp)
  80d268:	00000c06 	br	80d29c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80d26c:	d0a01217 	ldw	r2,-32696(gp)
  80d270:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80d274:	d0e01217 	ldw	r3,-32696(gp)
  80d278:	e0bffe17 	ldw	r2,-8(fp)
  80d27c:	1885883a 	add	r2,r3,r2
  80d280:	d0a01215 	stw	r2,-32696(gp)
  80d284:	e0bffd17 	ldw	r2,-12(fp)
  80d288:	e0bff915 	stw	r2,-28(fp)
  80d28c:	e0bff917 	ldw	r2,-28(fp)
  80d290:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80d294:	e0bffc17 	ldw	r2,-16(fp)
  80d298:	e0bfff15 	stw	r2,-4(fp)
  80d29c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80d2a0:	e037883a 	mov	sp,fp
  80d2a4:	df000017 	ldw	fp,0(sp)
  80d2a8:	dec00104 	addi	sp,sp,4
  80d2ac:	f800283a 	ret

0080d2b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80d2b0:	defffd04 	addi	sp,sp,-12
  80d2b4:	dfc00215 	stw	ra,8(sp)
  80d2b8:	df000115 	stw	fp,4(sp)
  80d2bc:	df000104 	addi	fp,sp,4
  80d2c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80d2c4:	e13fff17 	ldw	r4,-4(fp)
  80d2c8:	080f5300 	call	80f530 <alt_busy_sleep>
}
  80d2cc:	e037883a 	mov	sp,fp
  80d2d0:	dfc00117 	ldw	ra,4(sp)
  80d2d4:	df000017 	ldw	fp,0(sp)
  80d2d8:	dec00204 	addi	sp,sp,8
  80d2dc:	f800283a 	ret

0080d2e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80d2e0:	defff704 	addi	sp,sp,-36
  80d2e4:	dfc00815 	stw	ra,32(sp)
  80d2e8:	df000715 	stw	fp,28(sp)
  80d2ec:	df000704 	addi	fp,sp,28
  80d2f0:	e13ffb15 	stw	r4,-20(fp)
  80d2f4:	e17ffc15 	stw	r5,-16(fp)
  80d2f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d2fc:	e0bffb17 	ldw	r2,-20(fp)
  80d300:	1004803a 	cmplt	r2,r2,zero
  80d304:	1000081e 	bne	r2,zero,80d328 <write+0x48>
  80d308:	e0bffb17 	ldw	r2,-20(fp)
  80d30c:	10800324 	muli	r2,r2,12
  80d310:	1007883a 	mov	r3,r2
  80d314:	00802074 	movhi	r2,129
  80d318:	10850e04 	addi	r2,r2,5176
  80d31c:	1887883a 	add	r3,r3,r2
  80d320:	e0ffff15 	stw	r3,-4(fp)
  80d324:	00000106 	br	80d32c <write+0x4c>
  80d328:	e03fff15 	stw	zero,-4(fp)
  80d32c:	e0bfff17 	ldw	r2,-4(fp)
  80d330:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80d334:	e0bffa17 	ldw	r2,-24(fp)
  80d338:	1005003a 	cmpeq	r2,r2,zero
  80d33c:	1000241e 	bne	r2,zero,80d3d0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80d340:	e0bffa17 	ldw	r2,-24(fp)
  80d344:	10800217 	ldw	r2,8(r2)
  80d348:	108000cc 	andi	r2,r2,3
  80d34c:	1005003a 	cmpeq	r2,r2,zero
  80d350:	10001a1e 	bne	r2,zero,80d3bc <write+0xdc>
  80d354:	e0bffa17 	ldw	r2,-24(fp)
  80d358:	10800017 	ldw	r2,0(r2)
  80d35c:	10800617 	ldw	r2,24(r2)
  80d360:	1005003a 	cmpeq	r2,r2,zero
  80d364:	1000151e 	bne	r2,zero,80d3bc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d368:	e0bffa17 	ldw	r2,-24(fp)
  80d36c:	10800017 	ldw	r2,0(r2)
  80d370:	10800617 	ldw	r2,24(r2)
  80d374:	e17ffc17 	ldw	r5,-16(fp)
  80d378:	e1bffd17 	ldw	r6,-12(fp)
  80d37c:	e13ffa17 	ldw	r4,-24(fp)
  80d380:	103ee83a 	callr	r2
  80d384:	e0bff915 	stw	r2,-28(fp)
  80d388:	e0bff917 	ldw	r2,-28(fp)
  80d38c:	1004403a 	cmpge	r2,r2,zero
  80d390:	1000071e 	bne	r2,zero,80d3b0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80d394:	080d4000 	call	80d400 <alt_get_errno>
  80d398:	e0fff917 	ldw	r3,-28(fp)
  80d39c:	00c7c83a 	sub	r3,zero,r3
  80d3a0:	10c00015 	stw	r3,0(r2)
        return -1;
  80d3a4:	00bfffc4 	movi	r2,-1
  80d3a8:	e0bffe15 	stw	r2,-8(fp)
  80d3ac:	00000e06 	br	80d3e8 <write+0x108>
      }
      return rval;
  80d3b0:	e0bff917 	ldw	r2,-28(fp)
  80d3b4:	e0bffe15 	stw	r2,-8(fp)
  80d3b8:	00000b06 	br	80d3e8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d3bc:	080d4000 	call	80d400 <alt_get_errno>
  80d3c0:	1007883a 	mov	r3,r2
  80d3c4:	00800344 	movi	r2,13
  80d3c8:	18800015 	stw	r2,0(r3)
  80d3cc:	00000406 	br	80d3e0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d3d0:	080d4000 	call	80d400 <alt_get_errno>
  80d3d4:	1007883a 	mov	r3,r2
  80d3d8:	00801444 	movi	r2,81
  80d3dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d3e0:	00bfffc4 	movi	r2,-1
  80d3e4:	e0bffe15 	stw	r2,-8(fp)
  80d3e8:	e0bffe17 	ldw	r2,-8(fp)
}
  80d3ec:	e037883a 	mov	sp,fp
  80d3f0:	dfc00117 	ldw	ra,4(sp)
  80d3f4:	df000017 	ldw	fp,0(sp)
  80d3f8:	dec00204 	addi	sp,sp,8
  80d3fc:	f800283a 	ret

0080d400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d400:	defffd04 	addi	sp,sp,-12
  80d404:	dfc00215 	stw	ra,8(sp)
  80d408:	df000115 	stw	fp,4(sp)
  80d40c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d410:	00802074 	movhi	r2,129
  80d414:	1089fa04 	addi	r2,r2,10216
  80d418:	10800017 	ldw	r2,0(r2)
  80d41c:	1005003a 	cmpeq	r2,r2,zero
  80d420:	1000061e 	bne	r2,zero,80d43c <alt_get_errno+0x3c>
  80d424:	00802074 	movhi	r2,129
  80d428:	1089fa04 	addi	r2,r2,10216
  80d42c:	10800017 	ldw	r2,0(r2)
  80d430:	103ee83a 	callr	r2
  80d434:	e0bfff15 	stw	r2,-4(fp)
  80d438:	00000306 	br	80d448 <alt_get_errno+0x48>
  80d43c:	00802074 	movhi	r2,129
  80d440:	10910404 	addi	r2,r2,17424
  80d444:	e0bfff15 	stw	r2,-4(fp)
  80d448:	e0bfff17 	ldw	r2,-4(fp)
}
  80d44c:	e037883a 	mov	sp,fp
  80d450:	dfc00117 	ldw	ra,4(sp)
  80d454:	df000017 	ldw	fp,0(sp)
  80d458:	dec00204 	addi	sp,sp,8
  80d45c:	f800283a 	ret

0080d460 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d460:	defffd04 	addi	sp,sp,-12
  80d464:	dfc00215 	stw	ra,8(sp)
  80d468:	df000115 	stw	fp,4(sp)
  80d46c:	df000104 	addi	fp,sp,4
  80d470:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  80d474:	081013c0 	call	81013c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d478:	00800044 	movi	r2,1
  80d47c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d480:	e037883a 	mov	sp,fp
  80d484:	dfc00117 	ldw	ra,4(sp)
  80d488:	df000017 	ldw	fp,0(sp)
  80d48c:	dec00204 	addi	sp,sp,8
  80d490:	f800283a 	ret

0080d494 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d494:	defffc04 	addi	sp,sp,-16
  80d498:	dfc00315 	stw	ra,12(sp)
  80d49c:	df000215 	stw	fp,8(sp)
  80d4a0:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_DMA_INIT ( FRAME_SAVE_DMA, Frame_Save_DMA);
  80d4a4:	008001c4 	movi	r2,7
  80d4a8:	d8800015 	stw	r2,0(sp)
  80d4ac:	01002074 	movhi	r4,129
  80d4b0:	21059704 	addi	r4,r4,5724
  80d4b4:	01402074 	movhi	r5,129
  80d4b8:	29459e04 	addi	r5,r5,5752
  80d4bc:	01804234 	movhi	r6,264
  80d4c0:	31840004 	addi	r6,r6,4096
  80d4c4:	000f883a 	mov	r7,zero
  80d4c8:	080e2e00 	call	80e2e0 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d4cc:	01002074 	movhi	r4,129
  80d4d0:	2105af04 	addi	r4,r4,5820
  80d4d4:	000b883a 	mov	r5,zero
  80d4d8:	01800144 	movi	r6,5
  80d4dc:	080e5480 	call	80e548 <altera_avalon_jtag_uart_init>
  80d4e0:	01002074 	movhi	r4,129
  80d4e4:	2105a504 	addi	r4,r4,5780
  80d4e8:	080d71c0 	call	80d71c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  80d4ec:	01002074 	movhi	r4,129
  80d4f0:	2109bd04 	addi	r4,r4,9972
  80d4f4:	080d71c0 	call	80d71c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  80d4f8:	01002074 	movhi	r4,129
  80d4fc:	2109c904 	addi	r4,r4,10020
  80d500:	080ef5c0 	call	80ef5c <alt_up_character_lcd_init>
  80d504:	01002074 	movhi	r4,129
  80d508:	2109c904 	addi	r4,r4,10020
  80d50c:	080d71c0 	call	80d71c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
  80d510:	00802074 	movhi	r2,129
  80d514:	1089d404 	addi	r2,r2,10064
  80d518:	10800a17 	ldw	r2,40(r2)
  80d51c:	10800017 	ldw	r2,0(r2)
  80d520:	1007883a 	mov	r3,r2
  80d524:	00802074 	movhi	r2,129
  80d528:	1089d404 	addi	r2,r2,10064
  80d52c:	10c00b15 	stw	r3,44(r2)
  80d530:	00802074 	movhi	r2,129
  80d534:	1089d404 	addi	r2,r2,10064
  80d538:	10800a17 	ldw	r2,40(r2)
  80d53c:	10800104 	addi	r2,r2,4
  80d540:	10800017 	ldw	r2,0(r2)
  80d544:	1007883a 	mov	r3,r2
  80d548:	00802074 	movhi	r2,129
  80d54c:	1089d404 	addi	r2,r2,10064
  80d550:	10c00c15 	stw	r3,48(r2)
  80d554:	00802074 	movhi	r2,129
  80d558:	1089d404 	addi	r2,r2,10064
  80d55c:	10800a17 	ldw	r2,40(r2)
  80d560:	10800204 	addi	r2,r2,8
  80d564:	10800017 	ldw	r2,0(r2)
  80d568:	10ffffcc 	andi	r3,r2,65535
  80d56c:	00802074 	movhi	r2,129
  80d570:	1089d404 	addi	r2,r2,10064
  80d574:	10c00f15 	stw	r3,60(r2)
  80d578:	00802074 	movhi	r2,129
  80d57c:	1089d404 	addi	r2,r2,10064
  80d580:	10800a17 	ldw	r2,40(r2)
  80d584:	10800204 	addi	r2,r2,8
  80d588:	10800017 	ldw	r2,0(r2)
  80d58c:	1005d43a 	srai	r2,r2,16
  80d590:	10ffffcc 	andi	r3,r2,65535
  80d594:	00802074 	movhi	r2,129
  80d598:	1089d404 	addi	r2,r2,10064
  80d59c:	10c01015 	stw	r3,64(r2)
  80d5a0:	00802074 	movhi	r2,129
  80d5a4:	1089d404 	addi	r2,r2,10064
  80d5a8:	10800a17 	ldw	r2,40(r2)
  80d5ac:	10800304 	addi	r2,r2,12
  80d5b0:	10800017 	ldw	r2,0(r2)
  80d5b4:	1005d07a 	srai	r2,r2,1
  80d5b8:	10c0004c 	andi	r3,r2,1
  80d5bc:	00802074 	movhi	r2,129
  80d5c0:	1089d404 	addi	r2,r2,10064
  80d5c4:	10c00d15 	stw	r3,52(r2)
  80d5c8:	00802074 	movhi	r2,129
  80d5cc:	1089d404 	addi	r2,r2,10064
  80d5d0:	10800a17 	ldw	r2,40(r2)
  80d5d4:	10800304 	addi	r2,r2,12
  80d5d8:	10800017 	ldw	r2,0(r2)
  80d5dc:	1005d13a 	srai	r2,r2,4
  80d5e0:	10c003cc 	andi	r3,r2,15
  80d5e4:	00802074 	movhi	r2,129
  80d5e8:	1089d404 	addi	r2,r2,10064
  80d5ec:	10c00e15 	stw	r3,56(r2)
  80d5f0:	00802074 	movhi	r2,129
  80d5f4:	1089d404 	addi	r2,r2,10064
  80d5f8:	10800a17 	ldw	r2,40(r2)
  80d5fc:	10800304 	addi	r2,r2,12
  80d600:	10800017 	ldw	r2,0(r2)
  80d604:	1005d43a 	srai	r2,r2,16
  80d608:	1007883a 	mov	r3,r2
  80d60c:	00bfffc4 	movi	r2,-1
  80d610:	1884703a 	and	r2,r3,r2
  80d614:	e0bfff45 	stb	r2,-3(fp)
  80d618:	00802074 	movhi	r2,129
  80d61c:	1089d404 	addi	r2,r2,10064
  80d620:	10800a17 	ldw	r2,40(r2)
  80d624:	10800304 	addi	r2,r2,12
  80d628:	10800017 	ldw	r2,0(r2)
  80d62c:	1005d63a 	srai	r2,r2,24
  80d630:	1007883a 	mov	r3,r2
  80d634:	00bfffc4 	movi	r2,-1
  80d638:	1884703a 	and	r2,r3,r2
  80d63c:	e0bfff05 	stb	r2,-4(fp)
  80d640:	00802074 	movhi	r2,129
  80d644:	1089d404 	addi	r2,r2,10064
  80d648:	10800e17 	ldw	r2,56(r2)
  80d64c:	10800058 	cmpnei	r2,r2,1
  80d650:	1000041e 	bne	r2,zero,80d664 <alt_sys_init+0x1d0>
  80d654:	00802074 	movhi	r2,129
  80d658:	1089d404 	addi	r2,r2,10064
  80d65c:	10001115 	stw	zero,68(r2)
  80d660:	00000e06 	br	80d69c <alt_sys_init+0x208>
  80d664:	00802074 	movhi	r2,129
  80d668:	1089d404 	addi	r2,r2,10064
  80d66c:	10800e17 	ldw	r2,56(r2)
  80d670:	10800098 	cmpnei	r2,r2,2
  80d674:	1000051e 	bne	r2,zero,80d68c <alt_sys_init+0x1f8>
  80d678:	00c02074 	movhi	r3,129
  80d67c:	18c9d404 	addi	r3,r3,10064
  80d680:	00800044 	movi	r2,1
  80d684:	18801115 	stw	r2,68(r3)
  80d688:	00000406 	br	80d69c <alt_sys_init+0x208>
  80d68c:	00c02074 	movhi	r3,129
  80d690:	18c9d404 	addi	r3,r3,10064
  80d694:	00800084 	movi	r2,2
  80d698:	18801115 	stw	r2,68(r3)
  80d69c:	e0ffff43 	ldbu	r3,-3(fp)
  80d6a0:	00800804 	movi	r2,32
  80d6a4:	10c7c83a 	sub	r3,r2,r3
  80d6a8:	00bfffc4 	movi	r2,-1
  80d6ac:	10c6d83a 	srl	r3,r2,r3
  80d6b0:	00802074 	movhi	r2,129
  80d6b4:	1089d404 	addi	r2,r2,10064
  80d6b8:	10c01215 	stw	r3,72(r2)
  80d6bc:	e0ffff43 	ldbu	r3,-3(fp)
  80d6c0:	00802074 	movhi	r2,129
  80d6c4:	1089d404 	addi	r2,r2,10064
  80d6c8:	10801117 	ldw	r2,68(r2)
  80d6cc:	1887883a 	add	r3,r3,r2
  80d6d0:	00802074 	movhi	r2,129
  80d6d4:	1089d404 	addi	r2,r2,10064
  80d6d8:	10c01315 	stw	r3,76(r2)
  80d6dc:	e0ffff03 	ldbu	r3,-4(fp)
  80d6e0:	00800804 	movi	r2,32
  80d6e4:	10c7c83a 	sub	r3,r2,r3
  80d6e8:	00bfffc4 	movi	r2,-1
  80d6ec:	10c6d83a 	srl	r3,r2,r3
  80d6f0:	00802074 	movhi	r2,129
  80d6f4:	1089d404 	addi	r2,r2,10064
  80d6f8:	10c01415 	stw	r3,80(r2)
  80d6fc:	01002074 	movhi	r4,129
  80d700:	2109d404 	addi	r4,r4,10064
  80d704:	080d71c0 	call	80d71c <alt_dev_reg>
}
  80d708:	e037883a 	mov	sp,fp
  80d70c:	dfc00117 	ldw	ra,4(sp)
  80d710:	df000017 	ldw	fp,0(sp)
  80d714:	dec00204 	addi	sp,sp,8
  80d718:	f800283a 	ret

0080d71c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d71c:	defffd04 	addi	sp,sp,-12
  80d720:	dfc00215 	stw	ra,8(sp)
  80d724:	df000115 	stw	fp,4(sp)
  80d728:	df000104 	addi	fp,sp,4
  80d72c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d730:	e13fff17 	ldw	r4,-4(fp)
  80d734:	01402074 	movhi	r5,129
  80d738:	2949f304 	addi	r5,r5,10188
  80d73c:	080f6c00 	call	80f6c0 <alt_dev_llist_insert>
}
  80d740:	e037883a 	mov	sp,fp
  80d744:	dfc00117 	ldw	ra,4(sp)
  80d748:	df000017 	ldw	fp,0(sp)
  80d74c:	dec00204 	addi	sp,sp,8
  80d750:	f800283a 	ret

0080d754 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  80d754:	defff904 	addi	sp,sp,-28
  80d758:	df000615 	stw	fp,24(sp)
  80d75c:	df000604 	addi	fp,sp,24
  80d760:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  80d764:	e0bffc17 	ldw	r2,-16(fp)
  80d768:	10c00117 	ldw	r3,4(r2)
  80d76c:	e0bffc17 	ldw	r2,-16(fp)
  80d770:	10800217 	ldw	r2,8(r2)
  80d774:	18803926 	beq	r3,r2,80d85c <alt_avalon_dma_launch_bidir+0x108>
  80d778:	e0bffc17 	ldw	r2,-16(fp)
  80d77c:	10c00317 	ldw	r3,12(r2)
  80d780:	e0bffc17 	ldw	r2,-16(fp)
  80d784:	10800417 	ldw	r2,16(r2)
  80d788:	18803426 	beq	r3,r2,80d85c <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
  80d78c:	e0fffc17 	ldw	r3,-16(fp)
  80d790:	00800044 	movi	r2,1
  80d794:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
  80d798:	e0bffc17 	ldw	r2,-16(fp)
  80d79c:	10c00904 	addi	r3,r2,36
  80d7a0:	e0bffc17 	ldw	r2,-16(fp)
  80d7a4:	10800117 	ldw	r2,4(r2)
  80d7a8:	1004913a 	slli	r2,r2,4
  80d7ac:	1885883a 	add	r2,r3,r2
  80d7b0:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
  80d7b4:	e0bffc17 	ldw	r2,-16(fp)
  80d7b8:	10c01904 	addi	r3,r2,100
  80d7bc:	e0bffc17 	ldw	r2,-16(fp)
  80d7c0:	10800317 	ldw	r2,12(r2)
  80d7c4:	1004913a 	slli	r2,r2,4
  80d7c8:	1885883a 	add	r2,r3,r2
  80d7cc:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80d7d0:	e0bffc17 	ldw	r2,-16(fp)
  80d7d4:	10800017 	ldw	r2,0(r2)
  80d7d8:	11000104 	addi	r4,r2,4
  80d7dc:	e0bffb17 	ldw	r2,-20(fp)
  80d7e0:	10800017 	ldw	r2,0(r2)
  80d7e4:	1007883a 	mov	r3,r2
  80d7e8:	2005883a 	mov	r2,r4
  80d7ec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80d7f0:	e0bffc17 	ldw	r2,-16(fp)
  80d7f4:	10800017 	ldw	r2,0(r2)
  80d7f8:	11000204 	addi	r4,r2,8
  80d7fc:	e0bffa17 	ldw	r2,-24(fp)
  80d800:	10800017 	ldw	r2,0(r2)
  80d804:	1007883a 	mov	r3,r2
  80d808:	2005883a 	mov	r2,r4
  80d80c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
  80d810:	e0bffc17 	ldw	r2,-16(fp)
  80d814:	10800017 	ldw	r2,0(r2)
  80d818:	10800304 	addi	r2,r2,12
  80d81c:	e0bfff15 	stw	r2,-4(fp)
  80d820:	e0bffb17 	ldw	r2,-20(fp)
  80d824:	10c00117 	ldw	r3,4(r2)
  80d828:	e0bffa17 	ldw	r2,-24(fp)
  80d82c:	10800117 	ldw	r2,4(r2)
  80d830:	e0bffe15 	stw	r2,-8(fp)
  80d834:	e0fffd15 	stw	r3,-12(fp)
  80d838:	e0bffe17 	ldw	r2,-8(fp)
  80d83c:	e0fffd17 	ldw	r3,-12(fp)
  80d840:	10c0022e 	bgeu	r2,r3,80d84c <alt_avalon_dma_launch_bidir+0xf8>
  80d844:	e0bffe17 	ldw	r2,-8(fp)
  80d848:	e0bffd15 	stw	r2,-12(fp)
  80d84c:	e0fffd17 	ldw	r3,-12(fp)
  80d850:	e0bfff17 	ldw	r2,-4(fp)
  80d854:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  80d858:	00000206 	br	80d864 <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
  80d85c:	e0bffc17 	ldw	r2,-16(fp)
  80d860:	10000815 	stw	zero,32(r2)
  }
}
  80d864:	e037883a 	mov	sp,fp
  80d868:	df000017 	ldw	fp,0(sp)
  80d86c:	dec00104 	addi	sp,sp,4
  80d870:	f800283a 	ret

0080d874 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  80d874:	defffd04 	addi	sp,sp,-12
  80d878:	df000215 	stw	fp,8(sp)
  80d87c:	df000204 	addi	fp,sp,8
  80d880:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  80d884:	e0bfff17 	ldw	r2,-4(fp)
  80d888:	10c00117 	ldw	r3,4(r2)
  80d88c:	e0bfff17 	ldw	r2,-4(fp)
  80d890:	10800217 	ldw	r2,8(r2)
  80d894:	18801b26 	beq	r3,r2,80d904 <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
  80d898:	e0ffff17 	ldw	r3,-4(fp)
  80d89c:	00800044 	movi	r2,1
  80d8a0:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
  80d8a4:	e0bfff17 	ldw	r2,-4(fp)
  80d8a8:	10c00904 	addi	r3,r2,36
  80d8ac:	e0bfff17 	ldw	r2,-4(fp)
  80d8b0:	10800117 	ldw	r2,4(r2)
  80d8b4:	1004913a 	slli	r2,r2,4
  80d8b8:	1885883a 	add	r2,r3,r2
  80d8bc:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  80d8c0:	e0bfff17 	ldw	r2,-4(fp)
  80d8c4:	10800017 	ldw	r2,0(r2)
  80d8c8:	11000104 	addi	r4,r2,4
  80d8cc:	e0bffe17 	ldw	r2,-8(fp)
  80d8d0:	10800017 	ldw	r2,0(r2)
  80d8d4:	1007883a 	mov	r3,r2
  80d8d8:	2005883a 	mov	r2,r4
  80d8dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  80d8e0:	e0bfff17 	ldw	r2,-4(fp)
  80d8e4:	10800017 	ldw	r2,0(r2)
  80d8e8:	11000304 	addi	r4,r2,12
  80d8ec:	e0bffe17 	ldw	r2,-8(fp)
  80d8f0:	10800117 	ldw	r2,4(r2)
  80d8f4:	1007883a 	mov	r3,r2
  80d8f8:	2005883a 	mov	r2,r4
  80d8fc:	10c00035 	stwio	r3,0(r2)
  80d900:	00000206 	br	80d90c <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
  80d904:	e0bfff17 	ldw	r2,-4(fp)
  80d908:	10000815 	stw	zero,32(r2)
  }
}
  80d90c:	e037883a 	mov	sp,fp
  80d910:	df000017 	ldw	fp,0(sp)
  80d914:	dec00104 	addi	sp,sp,4
  80d918:	f800283a 	ret

0080d91c <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  80d91c:	defffd04 	addi	sp,sp,-12
  80d920:	df000215 	stw	fp,8(sp)
  80d924:	df000204 	addi	fp,sp,8
  80d928:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  80d92c:	e0bfff17 	ldw	r2,-4(fp)
  80d930:	10c00317 	ldw	r3,12(r2)
  80d934:	e0bfff17 	ldw	r2,-4(fp)
  80d938:	10800417 	ldw	r2,16(r2)
  80d93c:	18801b26 	beq	r3,r2,80d9ac <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
  80d940:	e0ffff17 	ldw	r3,-4(fp)
  80d944:	00800044 	movi	r2,1
  80d948:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
  80d94c:	e0bfff17 	ldw	r2,-4(fp)
  80d950:	10c01904 	addi	r3,r2,100
  80d954:	e0bfff17 	ldw	r2,-4(fp)
  80d958:	10800317 	ldw	r2,12(r2)
  80d95c:	1004913a 	slli	r2,r2,4
  80d960:	1885883a 	add	r2,r3,r2
  80d964:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  80d968:	e0bfff17 	ldw	r2,-4(fp)
  80d96c:	10800017 	ldw	r2,0(r2)
  80d970:	11000204 	addi	r4,r2,8
  80d974:	e0bffe17 	ldw	r2,-8(fp)
  80d978:	10800017 	ldw	r2,0(r2)
  80d97c:	1007883a 	mov	r3,r2
  80d980:	2005883a 	mov	r2,r4
  80d984:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  80d988:	e0bfff17 	ldw	r2,-4(fp)
  80d98c:	10800017 	ldw	r2,0(r2)
  80d990:	11000304 	addi	r4,r2,12
  80d994:	e0bffe17 	ldw	r2,-8(fp)
  80d998:	10800117 	ldw	r2,4(r2)
  80d99c:	1007883a 	mov	r3,r2
  80d9a0:	2005883a 	mov	r2,r4
  80d9a4:	10c00035 	stwio	r3,0(r2)
  80d9a8:	00000206 	br	80d9b4 <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
  80d9ac:	e0bfff17 	ldw	r2,-4(fp)
  80d9b0:	10000815 	stw	zero,32(r2)
  }
}
  80d9b4:	e037883a 	mov	sp,fp
  80d9b8:	df000017 	ldw	fp,0(sp)
  80d9bc:	dec00104 	addi	sp,sp,4
  80d9c0:	f800283a 	ret

0080d9c4 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
  80d9c4:	defff804 	addi	sp,sp,-32
  80d9c8:	df000715 	stw	fp,28(sp)
  80d9cc:	df000704 	addi	fp,sp,28
  80d9d0:	e13ffb15 	stw	r4,-20(fp)
  80d9d4:	e17ffc15 	stw	r5,-16(fp)
  80d9d8:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
  80d9dc:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  80d9e0:	e0bffb17 	ldw	r2,-20(fp)
  80d9e4:	10c00117 	ldw	r3,4(r2)
  80d9e8:	e0bffb17 	ldw	r2,-20(fp)
  80d9ec:	10800217 	ldw	r2,8(r2)
  80d9f0:	18800b1e 	bne	r3,r2,80da20 <alt_avalon_dma_ioctl+0x5c>
  80d9f4:	e0bffb17 	ldw	r2,-20(fp)
  80d9f8:	10c00317 	ldw	r3,12(r2)
  80d9fc:	e0bffb17 	ldw	r2,-20(fp)
  80da00:	10800417 	ldw	r2,16(r2)
  80da04:	1880061e 	bne	r3,r2,80da20 <alt_avalon_dma_ioctl+0x5c>
  80da08:	e0bffb17 	ldw	r2,-20(fp)
  80da0c:	10800017 	ldw	r2,0(r2)
  80da10:	10800304 	addi	r2,r2,12
  80da14:	10800037 	ldwio	r2,0(r2)
  80da18:	1005003a 	cmpeq	r2,r2,zero
  80da1c:	1000031e 	bne	r2,zero,80da2c <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
  80da20:	00bffec4 	movi	r2,-5
  80da24:	e0bfff15 	stw	r2,-4(fp)
  80da28:	0000ca06 	br	80dd54 <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
  80da2c:	e0bffc17 	ldw	r2,-16(fp)
  80da30:	108002a8 	cmpgeui	r2,r2,10
  80da34:	10007d1e 	bne	r2,zero,80dc2c <alt_avalon_dma_ioctl+0x268>
  80da38:	e0bffc17 	ldw	r2,-16(fp)
  80da3c:	1085883a 	add	r2,r2,r2
  80da40:	1087883a 	add	r3,r2,r2
  80da44:	00802074 	movhi	r2,129
  80da48:	10b69604 	addi	r2,r2,-9640
  80da4c:	1885883a 	add	r2,r3,r2
  80da50:	10800017 	ldw	r2,0(r2)
  80da54:	1000683a 	jmp	r2
  80da58:	0080dc2c 	andhi	r2,zero,880
  80da5c:	0080da80 	call	80da8 <__reset-0x77f258>
  80da60:	0080dadc 	xori	r2,zero,875
  80da64:	0080db08 	cmpgei	r2,zero,876
  80da68:	0080db64 	muli	r2,zero,877
  80da6c:	0080db90 	cmplti	r2,zero,878
  80da70:	0080dbac 	andhi	r2,zero,878
  80da74:	0080dbcc 	andi	r2,zero,879
  80da78:	0080dbec 	andhi	r2,zero,879
  80da7c:	0080dc0c 	andi	r2,zero,880
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
  80da80:	e0bffb17 	ldw	r2,-20(fp)
  80da84:	10800517 	ldw	r2,20(r2)
  80da88:	1080100c 	andi	r2,r2,64
  80da8c:	1004c03a 	cmpne	r2,r2,zero
  80da90:	10000f1e 	bne	r2,zero,80dad0 <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
  80da94:	e0bffb17 	ldw	r2,-20(fp)
  80da98:	10800017 	ldw	r2,0(r2)
  80da9c:	10800104 	addi	r2,r2,4
  80daa0:	e0fffd17 	ldw	r3,-12(fp)
  80daa4:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
  80daa8:	e0bffb17 	ldw	r2,-20(fp)
  80daac:	10800517 	ldw	r2,20(r2)
  80dab0:	10c00814 	ori	r3,r2,32
  80dab4:	e0bffb17 	ldw	r2,-20(fp)
  80dab8:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
  80dabc:	e0fffb17 	ldw	r3,-20(fp)
  80dac0:	00802074 	movhi	r2,129
  80dac4:	10b64704 	addi	r2,r2,-9956
  80dac8:	18800715 	stw	r2,28(r3)
  80dacc:	00005906 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
  80dad0:	00bffec4 	movi	r2,-5
  80dad4:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
  80dad8:	00005606 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
  80dadc:	e0bffb17 	ldw	r2,-20(fp)
  80dae0:	10c00517 	ldw	r3,20(r2)
  80dae4:	00bff7c4 	movi	r2,-33
  80dae8:	1886703a 	and	r3,r3,r2
  80daec:	e0bffb17 	ldw	r2,-20(fp)
  80daf0:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80daf4:	e0fffb17 	ldw	r3,-20(fp)
  80daf8:	00802074 	movhi	r2,129
  80dafc:	10b5d504 	addi	r2,r2,-10412
  80db00:	18800715 	stw	r2,28(r3)
    break;
  80db04:	00004b06 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
  80db08:	e0bffb17 	ldw	r2,-20(fp)
  80db0c:	10800517 	ldw	r2,20(r2)
  80db10:	1080080c 	andi	r2,r2,32
  80db14:	1004c03a 	cmpne	r2,r2,zero
  80db18:	10000f1e 	bne	r2,zero,80db58 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
  80db1c:	e0bffb17 	ldw	r2,-20(fp)
  80db20:	10800017 	ldw	r2,0(r2)
  80db24:	10800204 	addi	r2,r2,8
  80db28:	e0fffd17 	ldw	r3,-12(fp)
  80db2c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
  80db30:	e0bffb17 	ldw	r2,-20(fp)
  80db34:	10800517 	ldw	r2,20(r2)
  80db38:	10c01014 	ori	r3,r2,64
  80db3c:	e0bffb17 	ldw	r2,-20(fp)
  80db40:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
  80db44:	e0fffb17 	ldw	r3,-20(fp)
  80db48:	00802074 	movhi	r2,129
  80db4c:	10b61d04 	addi	r2,r2,-10124
  80db50:	18800715 	stw	r2,28(r3)
  80db54:	00003706 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
  80db58:	00bffec4 	movi	r2,-5
  80db5c:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
  80db60:	00003406 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
  80db64:	e0bffb17 	ldw	r2,-20(fp)
  80db68:	10c00517 	ldw	r3,20(r2)
  80db6c:	00bfefc4 	movi	r2,-65
  80db70:	1886703a 	and	r3,r3,r2
  80db74:	e0bffb17 	ldw	r2,-20(fp)
  80db78:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  80db7c:	e0fffb17 	ldw	r3,-20(fp)
  80db80:	00802074 	movhi	r2,129
  80db84:	10b5d504 	addi	r2,r2,-10412
  80db88:	18800715 	stw	r2,28(r3)
    break;
  80db8c:	00002906 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80db90:	e0bffb17 	ldw	r2,-20(fp)
  80db94:	10c00517 	ldw	r3,20(r2)
  80db98:	00bffc04 	movi	r2,-16
  80db9c:	1886703a 	and	r3,r3,r2
  80dba0:	e0bffb17 	ldw	r2,-20(fp)
  80dba4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
  80dba8:	00002206 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80dbac:	e0bffb17 	ldw	r2,-20(fp)
  80dbb0:	10c00517 	ldw	r3,20(r2)
  80dbb4:	00bffc04 	movi	r2,-16
  80dbb8:	1884703a 	and	r2,r3,r2
  80dbbc:	10c00054 	ori	r3,r2,1
  80dbc0:	e0bffb17 	ldw	r2,-20(fp)
  80dbc4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
  80dbc8:	00001a06 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80dbcc:	e0bffb17 	ldw	r2,-20(fp)
  80dbd0:	10c00517 	ldw	r3,20(r2)
  80dbd4:	00bffc04 	movi	r2,-16
  80dbd8:	1884703a 	and	r2,r3,r2
  80dbdc:	10c000d4 	ori	r3,r2,3
  80dbe0:	e0bffb17 	ldw	r2,-20(fp)
  80dbe4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
  80dbe8:	00001206 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80dbec:	e0bffb17 	ldw	r2,-20(fp)
  80dbf0:	10c00517 	ldw	r3,20(r2)
  80dbf4:	00bffc04 	movi	r2,-16
  80dbf8:	1884703a 	and	r2,r3,r2
  80dbfc:	10c001d4 	ori	r3,r2,7
  80dc00:	e0bffb17 	ldw	r2,-20(fp)
  80dc04:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
  80dc08:	00000a06 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  80dc0c:	e0bffb17 	ldw	r2,-20(fp)
  80dc10:	10c00517 	ldw	r3,20(r2)
  80dc14:	00bffc04 	movi	r2,-16
  80dc18:	1884703a 	and	r2,r3,r2
  80dc1c:	10c003d4 	ori	r3,r2,15
  80dc20:	e0bffb17 	ldw	r2,-20(fp)
  80dc24:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
  80dc28:	00000206 	br	80dc34 <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
  80dc2c:	00bff9c4 	movi	r2,-25
  80dc30:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
  80dc34:	e0bffa17 	ldw	r2,-24(fp)
  80dc38:	1004c03a 	cmpne	r2,r2,zero
  80dc3c:	1000431e 	bne	r2,zero,80dd4c <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
  80dc40:	e0bffb17 	ldw	r2,-20(fp)
  80dc44:	10800517 	ldw	r2,20(r2)
  80dc48:	108003cc 	andi	r2,r2,15
  80dc4c:	e0bffe15 	stw	r2,-8(fp)
  80dc50:	e0fffe17 	ldw	r3,-8(fp)
  80dc54:	18800060 	cmpeqi	r2,r3,1
  80dc58:	10000d1e 	bne	r2,zero,80dc90 <alt_avalon_dma_ioctl+0x2cc>
  80dc5c:	e0fffe17 	ldw	r3,-8(fp)
  80dc60:	18800070 	cmpltui	r2,r3,1
  80dc64:	1000071e 	bne	r2,zero,80dc84 <alt_avalon_dma_ioctl+0x2c0>
  80dc68:	e0fffe17 	ldw	r3,-8(fp)
  80dc6c:	188000e0 	cmpeqi	r2,r3,3
  80dc70:	10000a1e 	bne	r2,zero,80dc9c <alt_avalon_dma_ioctl+0x2d8>
  80dc74:	e0fffe17 	ldw	r3,-8(fp)
  80dc78:	188001e0 	cmpeqi	r2,r3,7
  80dc7c:	10000a1e 	bne	r2,zero,80dca8 <alt_avalon_dma_ioctl+0x2e4>
  80dc80:	00000c06 	br	80dcb4 <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
  80dc84:	00800044 	movi	r2,1
  80dc88:	e0bff915 	stw	r2,-28(fp)
       break;
  80dc8c:	00000b06 	br	80dcbc <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
  80dc90:	00800084 	movi	r2,2
  80dc94:	e0bff915 	stw	r2,-28(fp)
       break;
  80dc98:	00000806 	br	80dcbc <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
  80dc9c:	00800104 	movi	r2,4
  80dca0:	e0bff915 	stw	r2,-28(fp)
       break;
  80dca4:	00000506 	br	80dcbc <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
  80dca8:	00810004 	movi	r2,1024
  80dcac:	e0bff915 	stw	r2,-28(fp)
       break;
  80dcb0:	00000206 	br	80dcbc <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
  80dcb4:	00820004 	movi	r2,2048
  80dcb8:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
  80dcbc:	e0bffb17 	ldw	r2,-20(fp)
  80dcc0:	10800517 	ldw	r2,20(r2)
  80dcc4:	1080080c 	andi	r2,r2,32
  80dcc8:	1005003a 	cmpeq	r2,r2,zero
  80dccc:	1000091e 	bne	r2,zero,80dcf4 <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80dcd0:	e0bffb17 	ldw	r2,-20(fp)
  80dcd4:	10800017 	ldw	r2,0(r2)
  80dcd8:	11000604 	addi	r4,r2,24
  80dcdc:	e0bff917 	ldw	r2,-28(fp)
  80dce0:	10807e14 	ori	r2,r2,504
  80dce4:	1007883a 	mov	r3,r2
  80dce8:	2005883a 	mov	r2,r4
  80dcec:	10c00035 	stwio	r3,0(r2)
  80dcf0:	00001606 	br	80dd4c <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
  80dcf4:	e0bffb17 	ldw	r2,-20(fp)
  80dcf8:	10800517 	ldw	r2,20(r2)
  80dcfc:	1080100c 	andi	r2,r2,64
  80dd00:	1005003a 	cmpeq	r2,r2,zero
  80dd04:	1000091e 	bne	r2,zero,80dd2c <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80dd08:	e0bffb17 	ldw	r2,-20(fp)
  80dd0c:	10800017 	ldw	r2,0(r2)
  80dd10:	11000604 	addi	r4,r2,24
  80dd14:	e0bff917 	ldw	r2,-28(fp)
  80dd18:	1080be14 	ori	r2,r2,760
  80dd1c:	1007883a 	mov	r3,r2
  80dd20:	2005883a 	mov	r2,r4
  80dd24:	10c00035 	stwio	r3,0(r2)
  80dd28:	00000806 	br	80dd4c <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  80dd2c:	e0bffb17 	ldw	r2,-20(fp)
  80dd30:	10800017 	ldw	r2,0(r2)
  80dd34:	11000604 	addi	r4,r2,24
  80dd38:	e0bff917 	ldw	r2,-28(fp)
  80dd3c:	10803e14 	ori	r2,r2,248
  80dd40:	1007883a 	mov	r3,r2
  80dd44:	2005883a 	mov	r2,r4
  80dd48:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
  80dd4c:	e0bffa17 	ldw	r2,-24(fp)
  80dd50:	e0bfff15 	stw	r2,-4(fp)
  80dd54:	e0bfff17 	ldw	r2,-4(fp)
}
  80dd58:	e037883a 	mov	sp,fp
  80dd5c:	df000017 	ldw	fp,0(sp)
  80dd60:	dec00104 	addi	sp,sp,4
  80dd64:	f800283a 	ret

0080dd68 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  80dd68:	defffb04 	addi	sp,sp,-20
  80dd6c:	dfc00415 	stw	ra,16(sp)
  80dd70:	df000315 	stw	fp,12(sp)
  80dd74:	df000304 	addi	fp,sp,12
  80dd78:	e13ffd15 	stw	r4,-12(fp)
  80dd7c:	e17ffe15 	stw	r5,-8(fp)
  80dd80:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
  80dd84:	e0bffd17 	ldw	r2,-12(fp)
  80dd88:	11000617 	ldw	r4,24(r2)
  80dd8c:	e17ffe17 	ldw	r5,-8(fp)
  80dd90:	e1bfff17 	ldw	r6,-4(fp)
  80dd94:	080d9c40 	call	80d9c4 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80dd98:	e037883a 	mov	sp,fp
  80dd9c:	dfc00117 	ldw	ra,4(sp)
  80dda0:	df000017 	ldw	fp,0(sp)
  80dda4:	dec00204 	addi	sp,sp,8
  80dda8:	f800283a 	ret

0080ddac <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  80ddac:	defffb04 	addi	sp,sp,-20
  80ddb0:	dfc00415 	stw	ra,16(sp)
  80ddb4:	df000315 	stw	fp,12(sp)
  80ddb8:	df000304 	addi	fp,sp,12
  80ddbc:	e13ffd15 	stw	r4,-12(fp)
  80ddc0:	e17ffe15 	stw	r5,-8(fp)
  80ddc4:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
  80ddc8:	e0bffd17 	ldw	r2,-12(fp)
  80ddcc:	11000617 	ldw	r4,24(r2)
  80ddd0:	e17ffe17 	ldw	r5,-8(fp)
  80ddd4:	e1bfff17 	ldw	r6,-4(fp)
  80ddd8:	080d9c40 	call	80d9c4 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  80dddc:	e037883a 	mov	sp,fp
  80dde0:	dfc00117 	ldw	ra,4(sp)
  80dde4:	df000017 	ldw	fp,0(sp)
  80dde8:	dec00204 	addi	sp,sp,8
  80ddec:	f800283a 	ret

0080ddf0 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
  80ddf0:	defff304 	addi	sp,sp,-52
  80ddf4:	dfc00c15 	stw	ra,48(sp)
  80ddf8:	df000b15 	stw	fp,44(sp)
  80ddfc:	df000b04 	addi	fp,sp,44
  80de00:	e13ffb15 	stw	r4,-20(fp)
  80de04:	e17ffc15 	stw	r5,-16(fp)
  80de08:	e1bffd15 	stw	r6,-12(fp)
  80de0c:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
  80de10:	e0bffb17 	ldw	r2,-20(fp)
  80de14:	10800617 	ldw	r2,24(r2)
  80de18:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80de1c:	e0bff517 	ldw	r2,-44(fp)
  80de20:	10800517 	ldw	r2,20(r2)
  80de24:	108003cc 	andi	r2,r2,15
  80de28:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  80de2c:	e0bffc17 	ldw	r2,-16(fp)
  80de30:	1007883a 	mov	r3,r2
  80de34:	e0bff617 	ldw	r2,-40(fp)
  80de38:	1884703a 	and	r2,r3,r2
  80de3c:	1004c03a 	cmpne	r2,r2,zero
  80de40:	1000091e 	bne	r2,zero,80de68 <alt_avalon_dma_prepare+0x78>
  80de44:	e0fffd17 	ldw	r3,-12(fp)
  80de48:	e0bff617 	ldw	r2,-40(fp)
  80de4c:	1884703a 	and	r2,r3,r2
  80de50:	1004c03a 	cmpne	r2,r2,zero
  80de54:	1000041e 	bne	r2,zero,80de68 <alt_avalon_dma_prepare+0x78>
  80de58:	e0bff517 	ldw	r2,-44(fp)
  80de5c:	10c00617 	ldw	r3,24(r2)
  80de60:	e0bffd17 	ldw	r2,-12(fp)
  80de64:	1880032e 	bgeu	r3,r2,80de74 <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
  80de68:	00bffa84 	movi	r2,-22
  80de6c:	e0bfff15 	stw	r2,-4(fp)
  80de70:	00002e06 	br	80df2c <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
  80de74:	e0bff517 	ldw	r2,-44(fp)
  80de78:	10800317 	ldw	r2,12(r2)
  80de7c:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
  80de80:	e0bff517 	ldw	r2,-44(fp)
  80de84:	10800417 	ldw	r2,16(r2)
  80de88:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
  80de8c:	e0bff517 	ldw	r2,-44(fp)
  80de90:	10c01904 	addi	r3,r2,100
  80de94:	e0bff817 	ldw	r2,-32(fp)
  80de98:	1004913a 	slli	r2,r2,4
  80de9c:	1885883a 	add	r2,r3,r2
  80dea0:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80dea4:	e0bff817 	ldw	r2,-32(fp)
  80dea8:	10800044 	addi	r2,r2,1
  80deac:	108000cc 	andi	r2,r2,3
  80deb0:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
  80deb4:	e0fff717 	ldw	r3,-36(fp)
  80deb8:	e0bff917 	ldw	r2,-28(fp)
  80debc:	1880031e 	bne	r3,r2,80decc <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
  80dec0:	00bff904 	movi	r2,-28
  80dec4:	e0bfff15 	stw	r2,-4(fp)
  80dec8:	00001806 	br	80df2c <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
  80decc:	e0fffa17 	ldw	r3,-24(fp)
  80ded0:	e0bffc17 	ldw	r2,-16(fp)
  80ded4:	18800015 	stw	r2,0(r3)
  slot->len    = len;
  80ded8:	e0fffa17 	ldw	r3,-24(fp)
  80dedc:	e0bffd17 	ldw	r2,-12(fp)
  80dee0:	18800115 	stw	r2,4(r3)
  slot->done   = done;
  80dee4:	e0fffa17 	ldw	r3,-24(fp)
  80dee8:	e0bffe17 	ldw	r2,-8(fp)
  80deec:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
  80def0:	e0fffa17 	ldw	r3,-24(fp)
  80def4:	e0800217 	ldw	r2,8(fp)
  80def8:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
  80defc:	e0fff517 	ldw	r3,-44(fp)
  80df00:	e0bff717 	ldw	r2,-36(fp)
  80df04:	18800415 	stw	r2,16(r3)

  if (!priv->active)
  80df08:	e0bff517 	ldw	r2,-44(fp)
  80df0c:	10800817 	ldw	r2,32(r2)
  80df10:	1004c03a 	cmpne	r2,r2,zero
  80df14:	1000041e 	bne	r2,zero,80df28 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
  80df18:	e0bff517 	ldw	r2,-44(fp)
  80df1c:	10800717 	ldw	r2,28(r2)
  80df20:	e13ff517 	ldw	r4,-44(fp)
  80df24:	103ee83a 	callr	r2
  }

  return 0;
  80df28:	e03fff15 	stw	zero,-4(fp)
  80df2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80df30:	e037883a 	mov	sp,fp
  80df34:	dfc00117 	ldw	ra,4(sp)
  80df38:	df000017 	ldw	fp,0(sp)
  80df3c:	dec00204 	addi	sp,sp,8
  80df40:	f800283a 	ret

0080df44 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
  80df44:	defffa04 	addi	sp,sp,-24
  80df48:	df000515 	stw	fp,20(sp)
  80df4c:	df000504 	addi	fp,sp,20
  80df50:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80df54:	e0bffe17 	ldw	r2,-8(fp)
  80df58:	10800617 	ldw	r2,24(r2)
  80df5c:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
  80df60:	e0bffd17 	ldw	r2,-12(fp)
  80df64:	10800117 	ldw	r2,4(r2)
  80df68:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
  80df6c:	e0bffd17 	ldw	r2,-12(fp)
  80df70:	10800217 	ldw	r2,8(r2)
  80df74:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
  80df78:	e0fffc17 	ldw	r3,-16(fp)
  80df7c:	e0bffb17 	ldw	r2,-20(fp)
  80df80:	10c0062e 	bgeu	r2,r3,80df9c <alt_avalon_dma_space+0x58>
  80df84:	e0fffc17 	ldw	r3,-16(fp)
  80df88:	e0bffb17 	ldw	r2,-20(fp)
  80df8c:	1885c83a 	sub	r2,r3,r2
  80df90:	10bfffc4 	addi	r2,r2,-1
  80df94:	e0bfff15 	stw	r2,-4(fp)
  80df98:	00000506 	br	80dfb0 <alt_avalon_dma_space+0x6c>
  80df9c:	e0fffc17 	ldw	r3,-16(fp)
  80dfa0:	e0bffb17 	ldw	r2,-20(fp)
  80dfa4:	1885c83a 	sub	r2,r3,r2
  80dfa8:	108000c4 	addi	r2,r2,3
  80dfac:	e0bfff15 	stw	r2,-4(fp)
  80dfb0:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
  80dfb4:	e037883a 	mov	sp,fp
  80dfb8:	df000017 	ldw	fp,0(sp)
  80dfbc:	dec00104 	addi	sp,sp,4
  80dfc0:	f800283a 	ret

0080dfc4 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
  80dfc4:	defff304 	addi	sp,sp,-52
  80dfc8:	dfc00c15 	stw	ra,48(sp)
  80dfcc:	df000b15 	stw	fp,44(sp)
  80dfd0:	df000b04 	addi	fp,sp,44
  80dfd4:	e13ffb15 	stw	r4,-20(fp)
  80dfd8:	e17ffc15 	stw	r5,-16(fp)
  80dfdc:	e1bffd15 	stw	r6,-12(fp)
  80dfe0:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  80dfe4:	e0bffb17 	ldw	r2,-20(fp)
  80dfe8:	10800617 	ldw	r2,24(r2)
  80dfec:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  80dff0:	e0bff517 	ldw	r2,-44(fp)
  80dff4:	10800517 	ldw	r2,20(r2)
  80dff8:	108003cc 	andi	r2,r2,15
  80dffc:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
  80e000:	e0bffc17 	ldw	r2,-16(fp)
  80e004:	1007883a 	mov	r3,r2
  80e008:	e0bff717 	ldw	r2,-36(fp)
  80e00c:	1884703a 	and	r2,r3,r2
  80e010:	1004c03a 	cmpne	r2,r2,zero
  80e014:	1000091e 	bne	r2,zero,80e03c <alt_avalon_dma_send+0x78>
  80e018:	e0fffd17 	ldw	r3,-12(fp)
  80e01c:	e0bff717 	ldw	r2,-36(fp)
  80e020:	1884703a 	and	r2,r3,r2
  80e024:	1004c03a 	cmpne	r2,r2,zero
  80e028:	1000041e 	bne	r2,zero,80e03c <alt_avalon_dma_send+0x78>
  80e02c:	e0bff517 	ldw	r2,-44(fp)
  80e030:	10c00617 	ldw	r3,24(r2)
  80e034:	e0bffd17 	ldw	r2,-12(fp)
  80e038:	1880032e 	bgeu	r3,r2,80e048 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
  80e03c:	00bffa84 	movi	r2,-22
  80e040:	e0bfff15 	stw	r2,-4(fp)
  80e044:	00002e06 	br	80e100 <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
  80e048:	e0bff517 	ldw	r2,-44(fp)
  80e04c:	10800117 	ldw	r2,4(r2)
  80e050:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
  80e054:	e0bff517 	ldw	r2,-44(fp)
  80e058:	10800217 	ldw	r2,8(r2)
  80e05c:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
  80e060:	e0bff517 	ldw	r2,-44(fp)
  80e064:	10c00904 	addi	r3,r2,36
  80e068:	e0bff817 	ldw	r2,-32(fp)
  80e06c:	1004913a 	slli	r2,r2,4
  80e070:	1885883a 	add	r2,r3,r2
  80e074:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80e078:	e0bff817 	ldw	r2,-32(fp)
  80e07c:	10800044 	addi	r2,r2,1
  80e080:	108000cc 	andi	r2,r2,3
  80e084:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
  80e088:	e0fff617 	ldw	r3,-40(fp)
  80e08c:	e0bff917 	ldw	r2,-28(fp)
  80e090:	1880031e 	bne	r3,r2,80e0a0 <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
  80e094:	00bff904 	movi	r2,-28
  80e098:	e0bfff15 	stw	r2,-4(fp)
  80e09c:	00001806 	br	80e100 <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
  80e0a0:	e0fffa17 	ldw	r3,-24(fp)
  80e0a4:	e0bffc17 	ldw	r2,-16(fp)
  80e0a8:	18800015 	stw	r2,0(r3)
  slot->len    = len;
  80e0ac:	e0fffa17 	ldw	r3,-24(fp)
  80e0b0:	e0bffd17 	ldw	r2,-12(fp)
  80e0b4:	18800115 	stw	r2,4(r3)
  slot->done   = done;
  80e0b8:	e0fffa17 	ldw	r3,-24(fp)
  80e0bc:	e0bffe17 	ldw	r2,-8(fp)
  80e0c0:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
  80e0c4:	e0fffa17 	ldw	r3,-24(fp)
  80e0c8:	e0800217 	ldw	r2,8(fp)
  80e0cc:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
  80e0d0:	e0fff517 	ldw	r3,-44(fp)
  80e0d4:	e0bff617 	ldw	r2,-40(fp)
  80e0d8:	18800215 	stw	r2,8(r3)

  if (!priv->active)
  80e0dc:	e0bff517 	ldw	r2,-44(fp)
  80e0e0:	10800817 	ldw	r2,32(r2)
  80e0e4:	1004c03a 	cmpne	r2,r2,zero
  80e0e8:	1000041e 	bne	r2,zero,80e0fc <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
  80e0ec:	e0bff517 	ldw	r2,-44(fp)
  80e0f0:	10800717 	ldw	r2,28(r2)
  80e0f4:	e13ff517 	ldw	r4,-44(fp)
  80e0f8:	103ee83a 	callr	r2
  }

  return 0;
  80e0fc:	e03fff15 	stw	zero,-4(fp)
  80e100:	e0bfff17 	ldw	r2,-4(fp)
}
  80e104:	e037883a 	mov	sp,fp
  80e108:	dfc00117 	ldw	ra,4(sp)
  80e10c:	df000017 	ldw	fp,0(sp)
  80e110:	dec00204 	addi	sp,sp,8
  80e114:	f800283a 	ret

0080e118 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
  80e118:	defff104 	addi	sp,sp,-60
  80e11c:	dfc00e15 	stw	ra,56(sp)
  80e120:	df000d15 	stw	fp,52(sp)
  80e124:	df000d04 	addi	fp,sp,52
  80e128:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
  80e12c:	e0bfff17 	ldw	r2,-4(fp)
  80e130:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  80e134:	e0bffe17 	ldw	r2,-8(fp)
  80e138:	10800517 	ldw	r2,20(r2)
  80e13c:	1080080c 	andi	r2,r2,32
  80e140:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
  80e144:	e0bffe17 	ldw	r2,-8(fp)
  80e148:	10800517 	ldw	r2,20(r2)
  80e14c:	1080100c 	andi	r2,r2,64
  80e150:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
  80e154:	e0bffe17 	ldw	r2,-8(fp)
  80e158:	10800117 	ldw	r2,4(r2)
  80e15c:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
  80e160:	e0bffe17 	ldw	r2,-8(fp)
  80e164:	10800317 	ldw	r2,12(r2)
  80e168:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
  80e16c:	e0bffe17 	ldw	r2,-8(fp)
  80e170:	10c00904 	addi	r3,r2,36
  80e174:	e0bffb17 	ldw	r2,-20(fp)
  80e178:	1004913a 	slli	r2,r2,4
  80e17c:	1885883a 	add	r2,r3,r2
  80e180:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
  80e184:	e0bffe17 	ldw	r2,-8(fp)
  80e188:	10c01904 	addi	r3,r2,100
  80e18c:	e0bffa17 	ldw	r2,-24(fp)
  80e190:	1004913a 	slli	r2,r2,4
  80e194:	1885883a 	add	r2,r3,r2
  80e198:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
  80e19c:	e0bff917 	ldw	r2,-28(fp)
  80e1a0:	1004c03a 	cmpne	r2,r2,zero
  80e1a4:	1000051e 	bne	r2,zero,80e1bc <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80e1a8:	e0bffb17 	ldw	r2,-20(fp)
  80e1ac:	10800044 	addi	r2,r2,1
  80e1b0:	10c000cc 	andi	r3,r2,3
  80e1b4:	e0bffe17 	ldw	r2,-8(fp)
  80e1b8:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
  80e1bc:	e0bff817 	ldw	r2,-32(fp)
  80e1c0:	1004c03a 	cmpne	r2,r2,zero
  80e1c4:	1000051e 	bne	r2,zero,80e1dc <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  80e1c8:	e0bffa17 	ldw	r2,-24(fp)
  80e1cc:	10800044 	addi	r2,r2,1
  80e1d0:	10c000cc 	andi	r3,r2,3
  80e1d4:	e0bffe17 	ldw	r2,-8(fp)
  80e1d8:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
  80e1dc:	e0bffe17 	ldw	r2,-8(fp)
  80e1e0:	10800017 	ldw	r2,0(r2)
  80e1e4:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
  80e1e8:	e0bffe17 	ldw	r2,-8(fp)
  80e1ec:	10800017 	ldw	r2,0(r2)
  80e1f0:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
  80e1f4:	e0bffe17 	ldw	r2,-8(fp)
  80e1f8:	10800717 	ldw	r2,28(r2)
  80e1fc:	e13ffe17 	ldw	r4,-8(fp)
  80e200:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
  80e204:	e0bff917 	ldw	r2,-28(fp)
  80e208:	1004c03a 	cmpne	r2,r2,zero
  80e20c:	1000151e 	bne	r2,zero,80e264 <alt_avalon_dma_irq+0x14c>
  80e210:	e0bffd17 	ldw	r2,-12(fp)
  80e214:	10800217 	ldw	r2,8(r2)
  80e218:	1005003a 	cmpeq	r2,r2,zero
  80e21c:	1000111e 	bne	r2,zero,80e264 <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e220:	0005303a 	rdctl	r2,status
  80e224:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e228:	e0fff617 	ldw	r3,-40(fp)
  80e22c:	00bfff84 	movi	r2,-2
  80e230:	1884703a 	and	r2,r3,r2
  80e234:	1001703a 	wrctl	status,r2
  
  return context;
  80e238:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
  80e23c:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
  80e240:	e0bffd17 	ldw	r2,-12(fp)
  80e244:	10c00217 	ldw	r3,8(r2)
  80e248:	e0bffd17 	ldw	r2,-12(fp)
  80e24c:	11000317 	ldw	r4,12(r2)
  80e250:	183ee83a 	callr	r3
  80e254:	e0bff717 	ldw	r2,-36(fp)
  80e258:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e25c:	e0bff517 	ldw	r2,-44(fp)
  80e260:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
  80e264:	e0bff817 	ldw	r2,-32(fp)
  80e268:	1004c03a 	cmpne	r2,r2,zero
  80e26c:	1000171e 	bne	r2,zero,80e2cc <alt_avalon_dma_irq+0x1b4>
  80e270:	e0bffc17 	ldw	r2,-16(fp)
  80e274:	10800217 	ldw	r2,8(r2)
  80e278:	1005003a 	cmpeq	r2,r2,zero
  80e27c:	1000131e 	bne	r2,zero,80e2cc <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e280:	0005303a 	rdctl	r2,status
  80e284:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e288:	e0fff417 	ldw	r3,-48(fp)
  80e28c:	00bfff84 	movi	r2,-2
  80e290:	1884703a 	and	r2,r3,r2
  80e294:	1001703a 	wrctl	status,r2
  
  return context;
  80e298:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
  80e29c:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
  80e2a0:	e0bffc17 	ldw	r2,-16(fp)
  80e2a4:	10c00217 	ldw	r3,8(r2)
  80e2a8:	e0bffc17 	ldw	r2,-16(fp)
  80e2ac:	11000317 	ldw	r4,12(r2)
  80e2b0:	e0bffc17 	ldw	r2,-16(fp)
  80e2b4:	11400017 	ldw	r5,0(r2)
  80e2b8:	183ee83a 	callr	r3
  80e2bc:	e0bff717 	ldw	r2,-36(fp)
  80e2c0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e2c4:	e0bff317 	ldw	r2,-52(fp)
  80e2c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
  80e2cc:	e037883a 	mov	sp,fp
  80e2d0:	dfc00117 	ldw	ra,4(sp)
  80e2d4:	df000017 	ldw	fp,0(sp)
  80e2d8:	dec00204 	addi	sp,sp,8
  80e2dc:	f800283a 	ret

0080e2e0 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
  80e2e0:	defff904 	addi	sp,sp,-28
  80e2e4:	dfc00615 	stw	ra,24(sp)
  80e2e8:	df000515 	stw	fp,20(sp)
  80e2ec:	df000504 	addi	fp,sp,20
  80e2f0:	e13ffc15 	stw	r4,-16(fp)
  80e2f4:	e17ffd15 	stw	r5,-12(fp)
  80e2f8:	e1bffe15 	stw	r6,-8(fp)
  80e2fc:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  80e300:	e0bffe17 	ldw	r2,-8(fp)
  80e304:	10800604 	addi	r2,r2,24
  80e308:	1007883a 	mov	r3,r2
  80e30c:	00840004 	movi	r2,4096
  80e310:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  80e314:	e0bffe17 	ldw	r2,-8(fp)
  80e318:	10800604 	addi	r2,r2,24
  80e31c:	1007883a 	mov	r3,r2
  80e320:	00840004 	movi	r2,4096
  80e324:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
  80e328:	e0bffe17 	ldw	r2,-8(fp)
  80e32c:	10800604 	addi	r2,r2,24
  80e330:	1007883a 	mov	r3,r2
  80e334:	00803f04 	movi	r2,252
  80e338:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
  80e33c:	e0bffe17 	ldw	r2,-8(fp)
  80e340:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
  80e344:	e0bffc17 	ldw	r2,-16(fp)
  80e348:	11c00617 	ldw	r7,24(r2)
  80e34c:	d8000015 	stw	zero,0(sp)
  80e350:	e13fff17 	ldw	r4,-4(fp)
  80e354:	e1400217 	ldw	r5,8(fp)
  80e358:	01802074 	movhi	r6,129
  80e35c:	31b84604 	addi	r6,r6,-7912
  80e360:	080f8cc0 	call	80f8cc <alt_ic_isr_register>
  80e364:	1004803a 	cmplt	r2,r2,zero
  80e368:	1000041e 	bne	r2,zero,80e37c <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
  80e36c:	e13ffc17 	ldw	r4,-16(fp)
  80e370:	080e3900 	call	80e390 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
  80e374:	e13ffd17 	ldw	r4,-12(fp)
  80e378:	080e3c80 	call	80e3c8 <alt_dma_rxchan_reg>
  }
}
  80e37c:	e037883a 	mov	sp,fp
  80e380:	dfc00117 	ldw	ra,4(sp)
  80e384:	df000017 	ldw	fp,0(sp)
  80e388:	dec00204 	addi	sp,sp,8
  80e38c:	f800283a 	ret

0080e390 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  80e390:	defffd04 	addi	sp,sp,-12
  80e394:	dfc00215 	stw	ra,8(sp)
  80e398:	df000115 	stw	fp,4(sp)
  80e39c:	df000104 	addi	fp,sp,4
  80e3a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
  80e3a4:	e13fff17 	ldw	r4,-4(fp)
  80e3a8:	01402074 	movhi	r5,129
  80e3ac:	2949f804 	addi	r5,r5,10208
  80e3b0:	080f6c00 	call	80f6c0 <alt_dev_llist_insert>
}
  80e3b4:	e037883a 	mov	sp,fp
  80e3b8:	dfc00117 	ldw	ra,4(sp)
  80e3bc:	df000017 	ldw	fp,0(sp)
  80e3c0:	dec00204 	addi	sp,sp,8
  80e3c4:	f800283a 	ret

0080e3c8 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  80e3c8:	defffd04 	addi	sp,sp,-12
  80e3cc:	dfc00215 	stw	ra,8(sp)
  80e3d0:	df000115 	stw	fp,4(sp)
  80e3d4:	df000104 	addi	fp,sp,4
  80e3d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
  80e3dc:	e13fff17 	ldw	r4,-4(fp)
  80e3e0:	01402074 	movhi	r5,129
  80e3e4:	2949f604 	addi	r5,r5,10200
  80e3e8:	080f6c00 	call	80f6c0 <alt_dev_llist_insert>
}
  80e3ec:	e037883a 	mov	sp,fp
  80e3f0:	dfc00117 	ldw	ra,4(sp)
  80e3f4:	df000017 	ldw	fp,0(sp)
  80e3f8:	dec00204 	addi	sp,sp,8
  80e3fc:	f800283a 	ret

0080e400 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e400:	defffa04 	addi	sp,sp,-24
  80e404:	dfc00515 	stw	ra,20(sp)
  80e408:	df000415 	stw	fp,16(sp)
  80e40c:	df000404 	addi	fp,sp,16
  80e410:	e13ffd15 	stw	r4,-12(fp)
  80e414:	e17ffe15 	stw	r5,-8(fp)
  80e418:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e41c:	e0bffd17 	ldw	r2,-12(fp)
  80e420:	10800017 	ldw	r2,0(r2)
  80e424:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80e428:	e0bffc17 	ldw	r2,-16(fp)
  80e42c:	11000a04 	addi	r4,r2,40
  80e430:	e0bffd17 	ldw	r2,-12(fp)
  80e434:	11c00217 	ldw	r7,8(r2)
  80e438:	e17ffe17 	ldw	r5,-8(fp)
  80e43c:	e1bfff17 	ldw	r6,-4(fp)
  80e440:	080ea480 	call	80ea48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e444:	e037883a 	mov	sp,fp
  80e448:	dfc00117 	ldw	ra,4(sp)
  80e44c:	df000017 	ldw	fp,0(sp)
  80e450:	dec00204 	addi	sp,sp,8
  80e454:	f800283a 	ret

0080e458 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e458:	defffa04 	addi	sp,sp,-24
  80e45c:	dfc00515 	stw	ra,20(sp)
  80e460:	df000415 	stw	fp,16(sp)
  80e464:	df000404 	addi	fp,sp,16
  80e468:	e13ffd15 	stw	r4,-12(fp)
  80e46c:	e17ffe15 	stw	r5,-8(fp)
  80e470:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e474:	e0bffd17 	ldw	r2,-12(fp)
  80e478:	10800017 	ldw	r2,0(r2)
  80e47c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e480:	e0bffc17 	ldw	r2,-16(fp)
  80e484:	11000a04 	addi	r4,r2,40
  80e488:	e0bffd17 	ldw	r2,-12(fp)
  80e48c:	11c00217 	ldw	r7,8(r2)
  80e490:	e17ffe17 	ldw	r5,-8(fp)
  80e494:	e1bfff17 	ldw	r6,-4(fp)
  80e498:	080ec6c0 	call	80ec6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e49c:	e037883a 	mov	sp,fp
  80e4a0:	dfc00117 	ldw	ra,4(sp)
  80e4a4:	df000017 	ldw	fp,0(sp)
  80e4a8:	dec00204 	addi	sp,sp,8
  80e4ac:	f800283a 	ret

0080e4b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e4b0:	defffc04 	addi	sp,sp,-16
  80e4b4:	dfc00315 	stw	ra,12(sp)
  80e4b8:	df000215 	stw	fp,8(sp)
  80e4bc:	df000204 	addi	fp,sp,8
  80e4c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e4c4:	e0bfff17 	ldw	r2,-4(fp)
  80e4c8:	10800017 	ldw	r2,0(r2)
  80e4cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e4d0:	e0bffe17 	ldw	r2,-8(fp)
  80e4d4:	11000a04 	addi	r4,r2,40
  80e4d8:	e0bfff17 	ldw	r2,-4(fp)
  80e4dc:	11400217 	ldw	r5,8(r2)
  80e4e0:	080e8e00 	call	80e8e0 <altera_avalon_jtag_uart_close>
}
  80e4e4:	e037883a 	mov	sp,fp
  80e4e8:	dfc00117 	ldw	ra,4(sp)
  80e4ec:	df000017 	ldw	fp,0(sp)
  80e4f0:	dec00204 	addi	sp,sp,8
  80e4f4:	f800283a 	ret

0080e4f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e4f8:	defffa04 	addi	sp,sp,-24
  80e4fc:	dfc00515 	stw	ra,20(sp)
  80e500:	df000415 	stw	fp,16(sp)
  80e504:	df000404 	addi	fp,sp,16
  80e508:	e13ffd15 	stw	r4,-12(fp)
  80e50c:	e17ffe15 	stw	r5,-8(fp)
  80e510:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e514:	e0bffd17 	ldw	r2,-12(fp)
  80e518:	10800017 	ldw	r2,0(r2)
  80e51c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80e520:	e0bffc17 	ldw	r2,-16(fp)
  80e524:	11000a04 	addi	r4,r2,40
  80e528:	e17ffe17 	ldw	r5,-8(fp)
  80e52c:	e1bfff17 	ldw	r6,-4(fp)
  80e530:	080e9540 	call	80e954 <altera_avalon_jtag_uart_ioctl>
}
  80e534:	e037883a 	mov	sp,fp
  80e538:	dfc00117 	ldw	ra,4(sp)
  80e53c:	df000017 	ldw	fp,0(sp)
  80e540:	dec00204 	addi	sp,sp,8
  80e544:	f800283a 	ret

0080e548 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80e548:	defffa04 	addi	sp,sp,-24
  80e54c:	dfc00515 	stw	ra,20(sp)
  80e550:	df000415 	stw	fp,16(sp)
  80e554:	df000404 	addi	fp,sp,16
  80e558:	e13ffd15 	stw	r4,-12(fp)
  80e55c:	e17ffe15 	stw	r5,-8(fp)
  80e560:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e564:	e0fffd17 	ldw	r3,-12(fp)
  80e568:	00800044 	movi	r2,1
  80e56c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80e570:	e0bffd17 	ldw	r2,-12(fp)
  80e574:	10800017 	ldw	r2,0(r2)
  80e578:	11000104 	addi	r4,r2,4
  80e57c:	e0bffd17 	ldw	r2,-12(fp)
  80e580:	10800817 	ldw	r2,32(r2)
  80e584:	1007883a 	mov	r3,r2
  80e588:	2005883a 	mov	r2,r4
  80e58c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80e590:	e13ffe17 	ldw	r4,-8(fp)
  80e594:	e17fff17 	ldw	r5,-4(fp)
  80e598:	d8000015 	stw	zero,0(sp)
  80e59c:	01802074 	movhi	r6,129
  80e5a0:	31b98204 	addi	r6,r6,-6648
  80e5a4:	e1fffd17 	ldw	r7,-12(fp)
  80e5a8:	080f8cc0 	call	80f8cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80e5ac:	e0bffd17 	ldw	r2,-12(fp)
  80e5b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80e5b4:	e0bffd17 	ldw	r2,-12(fp)
  80e5b8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e5bc:	00802074 	movhi	r2,129
  80e5c0:	10910c04 	addi	r2,r2,17456
  80e5c4:	10800017 	ldw	r2,0(r2)
  80e5c8:	100b883a 	mov	r5,r2
  80e5cc:	01802074 	movhi	r6,129
  80e5d0:	31ba0c04 	addi	r6,r6,-6096
  80e5d4:	e1fffd17 	ldw	r7,-12(fp)
  80e5d8:	080f3dc0 	call	80f3dc <alt_alarm_start>
  80e5dc:	1004403a 	cmpge	r2,r2,zero
  80e5e0:	1000041e 	bne	r2,zero,80e5f4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80e5e4:	e0fffd17 	ldw	r3,-12(fp)
  80e5e8:	00a00034 	movhi	r2,32768
  80e5ec:	10bfffc4 	addi	r2,r2,-1
  80e5f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80e5f4:	e037883a 	mov	sp,fp
  80e5f8:	dfc00117 	ldw	ra,4(sp)
  80e5fc:	df000017 	ldw	fp,0(sp)
  80e600:	dec00204 	addi	sp,sp,8
  80e604:	f800283a 	ret

0080e608 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80e608:	defff804 	addi	sp,sp,-32
  80e60c:	df000715 	stw	fp,28(sp)
  80e610:	df000704 	addi	fp,sp,28
  80e614:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80e618:	e0bfff17 	ldw	r2,-4(fp)
  80e61c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80e620:	e0bffe17 	ldw	r2,-8(fp)
  80e624:	10800017 	ldw	r2,0(r2)
  80e628:	e0bffd15 	stw	r2,-12(fp)
  80e62c:	00000006 	br	80e630 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e630:	e0bffd17 	ldw	r2,-12(fp)
  80e634:	10800104 	addi	r2,r2,4
  80e638:	10800037 	ldwio	r2,0(r2)
  80e63c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80e640:	e0bffc17 	ldw	r2,-16(fp)
  80e644:	1080c00c 	andi	r2,r2,768
  80e648:	1005003a 	cmpeq	r2,r2,zero
  80e64c:	1000741e 	bne	r2,zero,80e820 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80e650:	e0bffc17 	ldw	r2,-16(fp)
  80e654:	1080400c 	andi	r2,r2,256
  80e658:	1005003a 	cmpeq	r2,r2,zero
  80e65c:	1000351e 	bne	r2,zero,80e734 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80e660:	00800074 	movhi	r2,1
  80e664:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e668:	e0bffe17 	ldw	r2,-8(fp)
  80e66c:	10800a17 	ldw	r2,40(r2)
  80e670:	10800044 	addi	r2,r2,1
  80e674:	1081ffcc 	andi	r2,r2,2047
  80e678:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80e67c:	e0bffe17 	ldw	r2,-8(fp)
  80e680:	10c00b17 	ldw	r3,44(r2)
  80e684:	e0bffa17 	ldw	r2,-24(fp)
  80e688:	18801626 	beq	r3,r2,80e6e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80e68c:	e0bffd17 	ldw	r2,-12(fp)
  80e690:	10800037 	ldwio	r2,0(r2)
  80e694:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80e698:	e0bffb17 	ldw	r2,-20(fp)
  80e69c:	10a0000c 	andi	r2,r2,32768
  80e6a0:	1005003a 	cmpeq	r2,r2,zero
  80e6a4:	10000f1e 	bne	r2,zero,80e6e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80e6a8:	e0bffe17 	ldw	r2,-8(fp)
  80e6ac:	10c00a17 	ldw	r3,40(r2)
  80e6b0:	e0bffb17 	ldw	r2,-20(fp)
  80e6b4:	1009883a 	mov	r4,r2
  80e6b8:	e0bffe17 	ldw	r2,-8(fp)
  80e6bc:	1885883a 	add	r2,r3,r2
  80e6c0:	10800e04 	addi	r2,r2,56
  80e6c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e6c8:	e0bffe17 	ldw	r2,-8(fp)
  80e6cc:	10800a17 	ldw	r2,40(r2)
  80e6d0:	10800044 	addi	r2,r2,1
  80e6d4:	10c1ffcc 	andi	r3,r2,2047
  80e6d8:	e0bffe17 	ldw	r2,-8(fp)
  80e6dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80e6e0:	003fe106 	br	80e668 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80e6e4:	e0bffb17 	ldw	r2,-20(fp)
  80e6e8:	10bfffec 	andhi	r2,r2,65535
  80e6ec:	1005003a 	cmpeq	r2,r2,zero
  80e6f0:	1000101e 	bne	r2,zero,80e734 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e6f4:	e0bffe17 	ldw	r2,-8(fp)
  80e6f8:	10c00817 	ldw	r3,32(r2)
  80e6fc:	00bfff84 	movi	r2,-2
  80e700:	1886703a 	and	r3,r3,r2
  80e704:	e0bffe17 	ldw	r2,-8(fp)
  80e708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80e70c:	e0bffd17 	ldw	r2,-12(fp)
  80e710:	11000104 	addi	r4,r2,4
  80e714:	e0bffe17 	ldw	r2,-8(fp)
  80e718:	10800817 	ldw	r2,32(r2)
  80e71c:	1007883a 	mov	r3,r2
  80e720:	2005883a 	mov	r2,r4
  80e724:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e728:	e0bffd17 	ldw	r2,-12(fp)
  80e72c:	10800104 	addi	r2,r2,4
  80e730:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80e734:	e0bffc17 	ldw	r2,-16(fp)
  80e738:	1080800c 	andi	r2,r2,512
  80e73c:	1005003a 	cmpeq	r2,r2,zero
  80e740:	103fbb1e 	bne	r2,zero,80e630 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80e744:	e0bffc17 	ldw	r2,-16(fp)
  80e748:	10bfffec 	andhi	r2,r2,65535
  80e74c:	1004d43a 	srli	r2,r2,16
  80e750:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e754:	00001506 	br	80e7ac <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80e758:	e13ffd17 	ldw	r4,-12(fp)
  80e75c:	e0bffe17 	ldw	r2,-8(fp)
  80e760:	10c00d17 	ldw	r3,52(r2)
  80e764:	e0bffe17 	ldw	r2,-8(fp)
  80e768:	1885883a 	add	r2,r3,r2
  80e76c:	10820e04 	addi	r2,r2,2104
  80e770:	10800003 	ldbu	r2,0(r2)
  80e774:	10c03fcc 	andi	r3,r2,255
  80e778:	18c0201c 	xori	r3,r3,128
  80e77c:	18ffe004 	addi	r3,r3,-128
  80e780:	2005883a 	mov	r2,r4
  80e784:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e788:	e0bffe17 	ldw	r2,-8(fp)
  80e78c:	10800d17 	ldw	r2,52(r2)
  80e790:	10800044 	addi	r2,r2,1
  80e794:	10c1ffcc 	andi	r3,r2,2047
  80e798:	e0bffe17 	ldw	r2,-8(fp)
  80e79c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80e7a0:	e0bff917 	ldw	r2,-28(fp)
  80e7a4:	10bfffc4 	addi	r2,r2,-1
  80e7a8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e7ac:	e0bff917 	ldw	r2,-28(fp)
  80e7b0:	1005003a 	cmpeq	r2,r2,zero
  80e7b4:	1000051e 	bne	r2,zero,80e7cc <altera_avalon_jtag_uart_irq+0x1c4>
  80e7b8:	e0bffe17 	ldw	r2,-8(fp)
  80e7bc:	10c00d17 	ldw	r3,52(r2)
  80e7c0:	e0bffe17 	ldw	r2,-8(fp)
  80e7c4:	10800c17 	ldw	r2,48(r2)
  80e7c8:	18bfe31e 	bne	r3,r2,80e758 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80e7cc:	e0bff917 	ldw	r2,-28(fp)
  80e7d0:	1005003a 	cmpeq	r2,r2,zero
  80e7d4:	103f961e 	bne	r2,zero,80e630 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e7d8:	e0bffe17 	ldw	r2,-8(fp)
  80e7dc:	10c00817 	ldw	r3,32(r2)
  80e7e0:	00bfff44 	movi	r2,-3
  80e7e4:	1886703a 	and	r3,r3,r2
  80e7e8:	e0bffe17 	ldw	r2,-8(fp)
  80e7ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e7f0:	e0bffe17 	ldw	r2,-8(fp)
  80e7f4:	10800017 	ldw	r2,0(r2)
  80e7f8:	11000104 	addi	r4,r2,4
  80e7fc:	e0bffe17 	ldw	r2,-8(fp)
  80e800:	10800817 	ldw	r2,32(r2)
  80e804:	1007883a 	mov	r3,r2
  80e808:	2005883a 	mov	r2,r4
  80e80c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e810:	e0bffd17 	ldw	r2,-12(fp)
  80e814:	10800104 	addi	r2,r2,4
  80e818:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80e81c:	003f8406 	br	80e630 <altera_avalon_jtag_uart_irq+0x28>
}
  80e820:	e037883a 	mov	sp,fp
  80e824:	df000017 	ldw	fp,0(sp)
  80e828:	dec00104 	addi	sp,sp,4
  80e82c:	f800283a 	ret

0080e830 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80e830:	defffc04 	addi	sp,sp,-16
  80e834:	df000315 	stw	fp,12(sp)
  80e838:	df000304 	addi	fp,sp,12
  80e83c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80e840:	e0bfff17 	ldw	r2,-4(fp)
  80e844:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80e848:	e0bffe17 	ldw	r2,-8(fp)
  80e84c:	10800017 	ldw	r2,0(r2)
  80e850:	10800104 	addi	r2,r2,4
  80e854:	10800037 	ldwio	r2,0(r2)
  80e858:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80e85c:	e0bffd17 	ldw	r2,-12(fp)
  80e860:	1081000c 	andi	r2,r2,1024
  80e864:	1005003a 	cmpeq	r2,r2,zero
  80e868:	10000c1e 	bne	r2,zero,80e89c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80e86c:	e0bffe17 	ldw	r2,-8(fp)
  80e870:	10800017 	ldw	r2,0(r2)
  80e874:	11000104 	addi	r4,r2,4
  80e878:	e0bffe17 	ldw	r2,-8(fp)
  80e87c:	10800817 	ldw	r2,32(r2)
  80e880:	10810014 	ori	r2,r2,1024
  80e884:	1007883a 	mov	r3,r2
  80e888:	2005883a 	mov	r2,r4
  80e88c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80e890:	e0bffe17 	ldw	r2,-8(fp)
  80e894:	10000915 	stw	zero,36(r2)
  80e898:	00000a06 	br	80e8c4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80e89c:	e0bffe17 	ldw	r2,-8(fp)
  80e8a0:	10c00917 	ldw	r3,36(r2)
  80e8a4:	00a00034 	movhi	r2,32768
  80e8a8:	10bfff04 	addi	r2,r2,-4
  80e8ac:	10c00536 	bltu	r2,r3,80e8c4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80e8b0:	e0bffe17 	ldw	r2,-8(fp)
  80e8b4:	10800917 	ldw	r2,36(r2)
  80e8b8:	10c00044 	addi	r3,r2,1
  80e8bc:	e0bffe17 	ldw	r2,-8(fp)
  80e8c0:	10c00915 	stw	r3,36(r2)
  80e8c4:	00802074 	movhi	r2,129
  80e8c8:	10910c04 	addi	r2,r2,17456
  80e8cc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80e8d0:	e037883a 	mov	sp,fp
  80e8d4:	df000017 	ldw	fp,0(sp)
  80e8d8:	dec00104 	addi	sp,sp,4
  80e8dc:	f800283a 	ret

0080e8e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80e8e0:	defffc04 	addi	sp,sp,-16
  80e8e4:	df000315 	stw	fp,12(sp)
  80e8e8:	df000304 	addi	fp,sp,12
  80e8ec:	e13ffd15 	stw	r4,-12(fp)
  80e8f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e8f4:	00000706 	br	80e914 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80e8f8:	e0bffe17 	ldw	r2,-8(fp)
  80e8fc:	1090000c 	andi	r2,r2,16384
  80e900:	1005003a 	cmpeq	r2,r2,zero
  80e904:	1000031e 	bne	r2,zero,80e914 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80e908:	00bffd44 	movi	r2,-11
  80e90c:	e0bfff15 	stw	r2,-4(fp)
  80e910:	00000b06 	br	80e940 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e914:	e0bffd17 	ldw	r2,-12(fp)
  80e918:	10c00d17 	ldw	r3,52(r2)
  80e91c:	e0bffd17 	ldw	r2,-12(fp)
  80e920:	10800c17 	ldw	r2,48(r2)
  80e924:	18800526 	beq	r3,r2,80e93c <altera_avalon_jtag_uart_close+0x5c>
  80e928:	e0bffd17 	ldw	r2,-12(fp)
  80e92c:	10c00917 	ldw	r3,36(r2)
  80e930:	e0bffd17 	ldw	r2,-12(fp)
  80e934:	10800117 	ldw	r2,4(r2)
  80e938:	18bfef36 	bltu	r3,r2,80e8f8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80e93c:	e03fff15 	stw	zero,-4(fp)
  80e940:	e0bfff17 	ldw	r2,-4(fp)
}
  80e944:	e037883a 	mov	sp,fp
  80e948:	df000017 	ldw	fp,0(sp)
  80e94c:	dec00104 	addi	sp,sp,4
  80e950:	f800283a 	ret

0080e954 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80e954:	defff804 	addi	sp,sp,-32
  80e958:	df000715 	stw	fp,28(sp)
  80e95c:	df000704 	addi	fp,sp,28
  80e960:	e13ffb15 	stw	r4,-20(fp)
  80e964:	e17ffc15 	stw	r5,-16(fp)
  80e968:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80e96c:	00bff9c4 	movi	r2,-25
  80e970:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80e974:	e0bffc17 	ldw	r2,-16(fp)
  80e978:	e0bfff15 	stw	r2,-4(fp)
  80e97c:	e0ffff17 	ldw	r3,-4(fp)
  80e980:	189a8060 	cmpeqi	r2,r3,27137
  80e984:	1000041e 	bne	r2,zero,80e998 <altera_avalon_jtag_uart_ioctl+0x44>
  80e988:	e0ffff17 	ldw	r3,-4(fp)
  80e98c:	189a80a0 	cmpeqi	r2,r3,27138
  80e990:	10001b1e 	bne	r2,zero,80ea00 <altera_avalon_jtag_uart_ioctl+0xac>
  80e994:	00002706 	br	80ea34 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80e998:	e0bffb17 	ldw	r2,-20(fp)
  80e99c:	10c00117 	ldw	r3,4(r2)
  80e9a0:	00a00034 	movhi	r2,32768
  80e9a4:	10bfffc4 	addi	r2,r2,-1
  80e9a8:	18802226 	beq	r3,r2,80ea34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80e9ac:	e0bffd17 	ldw	r2,-12(fp)
  80e9b0:	10800017 	ldw	r2,0(r2)
  80e9b4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80e9b8:	e0bff917 	ldw	r2,-28(fp)
  80e9bc:	10800090 	cmplti	r2,r2,2
  80e9c0:	1000071e 	bne	r2,zero,80e9e0 <altera_avalon_jtag_uart_ioctl+0x8c>
  80e9c4:	e0fff917 	ldw	r3,-28(fp)
  80e9c8:	00a00034 	movhi	r2,32768
  80e9cc:	10bfffc4 	addi	r2,r2,-1
  80e9d0:	18800326 	beq	r3,r2,80e9e0 <altera_avalon_jtag_uart_ioctl+0x8c>
  80e9d4:	e0bff917 	ldw	r2,-28(fp)
  80e9d8:	e0bffe15 	stw	r2,-8(fp)
  80e9dc:	00000306 	br	80e9ec <altera_avalon_jtag_uart_ioctl+0x98>
  80e9e0:	00e00034 	movhi	r3,32768
  80e9e4:	18ffff84 	addi	r3,r3,-2
  80e9e8:	e0fffe15 	stw	r3,-8(fp)
  80e9ec:	e0bffb17 	ldw	r2,-20(fp)
  80e9f0:	e0fffe17 	ldw	r3,-8(fp)
  80e9f4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80e9f8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80e9fc:	00000d06 	br	80ea34 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80ea00:	e0bffb17 	ldw	r2,-20(fp)
  80ea04:	10c00117 	ldw	r3,4(r2)
  80ea08:	00a00034 	movhi	r2,32768
  80ea0c:	10bfffc4 	addi	r2,r2,-1
  80ea10:	18800826 	beq	r3,r2,80ea34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80ea14:	e13ffd17 	ldw	r4,-12(fp)
  80ea18:	e0bffb17 	ldw	r2,-20(fp)
  80ea1c:	10c00917 	ldw	r3,36(r2)
  80ea20:	e0bffb17 	ldw	r2,-20(fp)
  80ea24:	10800117 	ldw	r2,4(r2)
  80ea28:	1885803a 	cmpltu	r2,r3,r2
  80ea2c:	20800015 	stw	r2,0(r4)
      rc = 0;
  80ea30:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80ea34:	e0bffa17 	ldw	r2,-24(fp)
}
  80ea38:	e037883a 	mov	sp,fp
  80ea3c:	df000017 	ldw	fp,0(sp)
  80ea40:	dec00104 	addi	sp,sp,4
  80ea44:	f800283a 	ret

0080ea48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ea48:	defff204 	addi	sp,sp,-56
  80ea4c:	dfc00d15 	stw	ra,52(sp)
  80ea50:	df000c15 	stw	fp,48(sp)
  80ea54:	df000c04 	addi	fp,sp,48
  80ea58:	e13ffb15 	stw	r4,-20(fp)
  80ea5c:	e17ffc15 	stw	r5,-16(fp)
  80ea60:	e1bffd15 	stw	r6,-12(fp)
  80ea64:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80ea68:	e0bffc17 	ldw	r2,-16(fp)
  80ea6c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ea70:	00004806 	br	80eb94 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ea74:	e0bffb17 	ldw	r2,-20(fp)
  80ea78:	10800a17 	ldw	r2,40(r2)
  80ea7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80ea80:	e0bffb17 	ldw	r2,-20(fp)
  80ea84:	10800b17 	ldw	r2,44(r2)
  80ea88:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80ea8c:	e0fff717 	ldw	r3,-36(fp)
  80ea90:	e0bff617 	ldw	r2,-40(fp)
  80ea94:	18800536 	bltu	r3,r2,80eaac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ea98:	e0bff717 	ldw	r2,-36(fp)
  80ea9c:	e0fff617 	ldw	r3,-40(fp)
  80eaa0:	10c5c83a 	sub	r2,r2,r3
  80eaa4:	e0bff815 	stw	r2,-32(fp)
  80eaa8:	00000406 	br	80eabc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80eaac:	00820004 	movi	r2,2048
  80eab0:	e0fff617 	ldw	r3,-40(fp)
  80eab4:	10c5c83a 	sub	r2,r2,r3
  80eab8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80eabc:	e0bff817 	ldw	r2,-32(fp)
  80eac0:	1005003a 	cmpeq	r2,r2,zero
  80eac4:	10001f1e 	bne	r2,zero,80eb44 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80eac8:	e0fffd17 	ldw	r3,-12(fp)
  80eacc:	e0bff817 	ldw	r2,-32(fp)
  80ead0:	1880022e 	bgeu	r3,r2,80eadc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80ead4:	e0bffd17 	ldw	r2,-12(fp)
  80ead8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80eadc:	e0bffb17 	ldw	r2,-20(fp)
  80eae0:	10c00e04 	addi	r3,r2,56
  80eae4:	e0bff617 	ldw	r2,-40(fp)
  80eae8:	1887883a 	add	r3,r3,r2
  80eaec:	e0bffa17 	ldw	r2,-24(fp)
  80eaf0:	1009883a 	mov	r4,r2
  80eaf4:	180b883a 	mov	r5,r3
  80eaf8:	e1bff817 	ldw	r6,-32(fp)
  80eafc:	0806d800 	call	806d80 <memcpy>
      ptr   += n;
  80eb00:	e0fff817 	ldw	r3,-32(fp)
  80eb04:	e0bffa17 	ldw	r2,-24(fp)
  80eb08:	10c5883a 	add	r2,r2,r3
  80eb0c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80eb10:	e0fffd17 	ldw	r3,-12(fp)
  80eb14:	e0bff817 	ldw	r2,-32(fp)
  80eb18:	1885c83a 	sub	r2,r3,r2
  80eb1c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eb20:	e0fff617 	ldw	r3,-40(fp)
  80eb24:	e0bff817 	ldw	r2,-32(fp)
  80eb28:	1885883a 	add	r2,r3,r2
  80eb2c:	10c1ffcc 	andi	r3,r2,2047
  80eb30:	e0bffb17 	ldw	r2,-20(fp)
  80eb34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80eb38:	e0bffd17 	ldw	r2,-12(fp)
  80eb3c:	10800048 	cmpgei	r2,r2,1
  80eb40:	103fcc1e 	bne	r2,zero,80ea74 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80eb44:	e0fffa17 	ldw	r3,-24(fp)
  80eb48:	e0bffc17 	ldw	r2,-16(fp)
  80eb4c:	1880141e 	bne	r3,r2,80eba0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80eb50:	e0bffe17 	ldw	r2,-8(fp)
  80eb54:	1090000c 	andi	r2,r2,16384
  80eb58:	1004c03a 	cmpne	r2,r2,zero
  80eb5c:	1000101e 	bne	r2,zero,80eba0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80eb60:	e0bffb17 	ldw	r2,-20(fp)
  80eb64:	10c00a17 	ldw	r3,40(r2)
  80eb68:	e0bff717 	ldw	r2,-36(fp)
  80eb6c:	1880051e 	bne	r3,r2,80eb84 <altera_avalon_jtag_uart_read+0x13c>
  80eb70:	e0bffb17 	ldw	r2,-20(fp)
  80eb74:	10c00917 	ldw	r3,36(r2)
  80eb78:	e0bffb17 	ldw	r2,-20(fp)
  80eb7c:	10800117 	ldw	r2,4(r2)
  80eb80:	18bff736 	bltu	r3,r2,80eb60 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80eb84:	e0bffb17 	ldw	r2,-20(fp)
  80eb88:	10c00a17 	ldw	r3,40(r2)
  80eb8c:	e0bff717 	ldw	r2,-36(fp)
  80eb90:	18800326 	beq	r3,r2,80eba0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80eb94:	e0bffd17 	ldw	r2,-12(fp)
  80eb98:	10800048 	cmpgei	r2,r2,1
  80eb9c:	103fb51e 	bne	r2,zero,80ea74 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80eba0:	e0fffa17 	ldw	r3,-24(fp)
  80eba4:	e0bffc17 	ldw	r2,-16(fp)
  80eba8:	18801926 	beq	r3,r2,80ec10 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ebac:	0005303a 	rdctl	r2,status
  80ebb0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ebb4:	e0fff517 	ldw	r3,-44(fp)
  80ebb8:	00bfff84 	movi	r2,-2
  80ebbc:	1884703a 	and	r2,r3,r2
  80ebc0:	1001703a 	wrctl	status,r2
  
  return context;
  80ebc4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80ebc8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ebcc:	e0bffb17 	ldw	r2,-20(fp)
  80ebd0:	10800817 	ldw	r2,32(r2)
  80ebd4:	10c00054 	ori	r3,r2,1
  80ebd8:	e0bffb17 	ldw	r2,-20(fp)
  80ebdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ebe0:	e0bffb17 	ldw	r2,-20(fp)
  80ebe4:	10800017 	ldw	r2,0(r2)
  80ebe8:	11000104 	addi	r4,r2,4
  80ebec:	e0bffb17 	ldw	r2,-20(fp)
  80ebf0:	10800817 	ldw	r2,32(r2)
  80ebf4:	1007883a 	mov	r3,r2
  80ebf8:	2005883a 	mov	r2,r4
  80ebfc:	10c00035 	stwio	r3,0(r2)
  80ec00:	e0bff917 	ldw	r2,-28(fp)
  80ec04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec08:	e0bff417 	ldw	r2,-48(fp)
  80ec0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80ec10:	e0fffa17 	ldw	r3,-24(fp)
  80ec14:	e0bffc17 	ldw	r2,-16(fp)
  80ec18:	18800526 	beq	r3,r2,80ec30 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80ec1c:	e0fffa17 	ldw	r3,-24(fp)
  80ec20:	e0bffc17 	ldw	r2,-16(fp)
  80ec24:	1887c83a 	sub	r3,r3,r2
  80ec28:	e0ffff15 	stw	r3,-4(fp)
  80ec2c:	00000906 	br	80ec54 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80ec30:	e0bffe17 	ldw	r2,-8(fp)
  80ec34:	1090000c 	andi	r2,r2,16384
  80ec38:	1005003a 	cmpeq	r2,r2,zero
  80ec3c:	1000031e 	bne	r2,zero,80ec4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80ec40:	00bffd44 	movi	r2,-11
  80ec44:	e0bfff15 	stw	r2,-4(fp)
  80ec48:	00000206 	br	80ec54 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80ec4c:	00bffec4 	movi	r2,-5
  80ec50:	e0bfff15 	stw	r2,-4(fp)
  80ec54:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec58:	e037883a 	mov	sp,fp
  80ec5c:	dfc00117 	ldw	ra,4(sp)
  80ec60:	df000017 	ldw	fp,0(sp)
  80ec64:	dec00204 	addi	sp,sp,8
  80ec68:	f800283a 	ret

0080ec6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80ec6c:	defff204 	addi	sp,sp,-56
  80ec70:	dfc00d15 	stw	ra,52(sp)
  80ec74:	df000c15 	stw	fp,48(sp)
  80ec78:	df000c04 	addi	fp,sp,48
  80ec7c:	e13ffb15 	stw	r4,-20(fp)
  80ec80:	e17ffc15 	stw	r5,-16(fp)
  80ec84:	e1bffd15 	stw	r6,-12(fp)
  80ec88:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80ec8c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80ec90:	e0bffc17 	ldw	r2,-16(fp)
  80ec94:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ec98:	00003a06 	br	80ed84 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80ec9c:	e0bffb17 	ldw	r2,-20(fp)
  80eca0:	10800c17 	ldw	r2,48(r2)
  80eca4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80eca8:	e0bffb17 	ldw	r2,-20(fp)
  80ecac:	10800d17 	ldw	r2,52(r2)
  80ecb0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80ecb4:	e0fffa17 	ldw	r3,-24(fp)
  80ecb8:	e0bff917 	ldw	r2,-28(fp)
  80ecbc:	1880062e 	bgeu	r3,r2,80ecd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80ecc0:	e0fff917 	ldw	r3,-28(fp)
  80ecc4:	e0bffa17 	ldw	r2,-24(fp)
  80ecc8:	1885c83a 	sub	r2,r3,r2
  80eccc:	10bfffc4 	addi	r2,r2,-1
  80ecd0:	e0bff815 	stw	r2,-32(fp)
  80ecd4:	00000c06 	br	80ed08 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80ecd8:	e0bff917 	ldw	r2,-28(fp)
  80ecdc:	1005003a 	cmpeq	r2,r2,zero
  80ece0:	1000051e 	bne	r2,zero,80ecf8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ece4:	00820004 	movi	r2,2048
  80ece8:	e0fffa17 	ldw	r3,-24(fp)
  80ecec:	10c5c83a 	sub	r2,r2,r3
  80ecf0:	e0bff815 	stw	r2,-32(fp)
  80ecf4:	00000406 	br	80ed08 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ecf8:	0081ffc4 	movi	r2,2047
  80ecfc:	e0fffa17 	ldw	r3,-24(fp)
  80ed00:	10c5c83a 	sub	r2,r2,r3
  80ed04:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80ed08:	e0bff817 	ldw	r2,-32(fp)
  80ed0c:	1005003a 	cmpeq	r2,r2,zero
  80ed10:	10001f1e 	bne	r2,zero,80ed90 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80ed14:	e0fffd17 	ldw	r3,-12(fp)
  80ed18:	e0bff817 	ldw	r2,-32(fp)
  80ed1c:	1880022e 	bgeu	r3,r2,80ed28 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80ed20:	e0bffd17 	ldw	r2,-12(fp)
  80ed24:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80ed28:	e0bffb17 	ldw	r2,-20(fp)
  80ed2c:	10c20e04 	addi	r3,r2,2104
  80ed30:	e0bffa17 	ldw	r2,-24(fp)
  80ed34:	1885883a 	add	r2,r3,r2
  80ed38:	e0fffc17 	ldw	r3,-16(fp)
  80ed3c:	1009883a 	mov	r4,r2
  80ed40:	180b883a 	mov	r5,r3
  80ed44:	e1bff817 	ldw	r6,-32(fp)
  80ed48:	0806d800 	call	806d80 <memcpy>
      ptr   += n;
  80ed4c:	e0fff817 	ldw	r3,-32(fp)
  80ed50:	e0bffc17 	ldw	r2,-16(fp)
  80ed54:	10c5883a 	add	r2,r2,r3
  80ed58:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80ed5c:	e0fffd17 	ldw	r3,-12(fp)
  80ed60:	e0bff817 	ldw	r2,-32(fp)
  80ed64:	1885c83a 	sub	r2,r3,r2
  80ed68:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ed6c:	e0fffa17 	ldw	r3,-24(fp)
  80ed70:	e0bff817 	ldw	r2,-32(fp)
  80ed74:	1885883a 	add	r2,r3,r2
  80ed78:	10c1ffcc 	andi	r3,r2,2047
  80ed7c:	e0bffb17 	ldw	r2,-20(fp)
  80ed80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ed84:	e0bffd17 	ldw	r2,-12(fp)
  80ed88:	10800048 	cmpgei	r2,r2,1
  80ed8c:	103fc31e 	bne	r2,zero,80ec9c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed90:	0005303a 	rdctl	r2,status
  80ed94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed98:	e0fff517 	ldw	r3,-44(fp)
  80ed9c:	00bfff84 	movi	r2,-2
  80eda0:	1884703a 	and	r2,r3,r2
  80eda4:	1001703a 	wrctl	status,r2
  
  return context;
  80eda8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80edac:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80edb0:	e0bffb17 	ldw	r2,-20(fp)
  80edb4:	10800817 	ldw	r2,32(r2)
  80edb8:	10c00094 	ori	r3,r2,2
  80edbc:	e0bffb17 	ldw	r2,-20(fp)
  80edc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80edc4:	e0bffb17 	ldw	r2,-20(fp)
  80edc8:	10800017 	ldw	r2,0(r2)
  80edcc:	11000104 	addi	r4,r2,4
  80edd0:	e0bffb17 	ldw	r2,-20(fp)
  80edd4:	10800817 	ldw	r2,32(r2)
  80edd8:	1007883a 	mov	r3,r2
  80eddc:	2005883a 	mov	r2,r4
  80ede0:	10c00035 	stwio	r3,0(r2)
  80ede4:	e0bff717 	ldw	r2,-36(fp)
  80ede8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edec:	e0bff417 	ldw	r2,-48(fp)
  80edf0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80edf4:	e0bffd17 	ldw	r2,-12(fp)
  80edf8:	10800050 	cmplti	r2,r2,1
  80edfc:	1000111e 	bne	r2,zero,80ee44 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80ee00:	e0bffe17 	ldw	r2,-8(fp)
  80ee04:	1090000c 	andi	r2,r2,16384
  80ee08:	1004c03a 	cmpne	r2,r2,zero
  80ee0c:	1000101e 	bne	r2,zero,80ee50 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80ee10:	e0bffb17 	ldw	r2,-20(fp)
  80ee14:	10c00d17 	ldw	r3,52(r2)
  80ee18:	e0bff917 	ldw	r2,-28(fp)
  80ee1c:	1880051e 	bne	r3,r2,80ee34 <altera_avalon_jtag_uart_write+0x1c8>
  80ee20:	e0bffb17 	ldw	r2,-20(fp)
  80ee24:	10c00917 	ldw	r3,36(r2)
  80ee28:	e0bffb17 	ldw	r2,-20(fp)
  80ee2c:	10800117 	ldw	r2,4(r2)
  80ee30:	18bff736 	bltu	r3,r2,80ee10 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80ee34:	e0bffb17 	ldw	r2,-20(fp)
  80ee38:	10c00d17 	ldw	r3,52(r2)
  80ee3c:	e0bff917 	ldw	r2,-28(fp)
  80ee40:	18800326 	beq	r3,r2,80ee50 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80ee44:	e0bffd17 	ldw	r2,-12(fp)
  80ee48:	10800048 	cmpgei	r2,r2,1
  80ee4c:	103fcd1e 	bne	r2,zero,80ed84 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80ee50:	e0fffc17 	ldw	r3,-16(fp)
  80ee54:	e0bff617 	ldw	r2,-40(fp)
  80ee58:	18800526 	beq	r3,r2,80ee70 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80ee5c:	e0fffc17 	ldw	r3,-16(fp)
  80ee60:	e0bff617 	ldw	r2,-40(fp)
  80ee64:	1887c83a 	sub	r3,r3,r2
  80ee68:	e0ffff15 	stw	r3,-4(fp)
  80ee6c:	00000906 	br	80ee94 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80ee70:	e0bffe17 	ldw	r2,-8(fp)
  80ee74:	1090000c 	andi	r2,r2,16384
  80ee78:	1005003a 	cmpeq	r2,r2,zero
  80ee7c:	1000031e 	bne	r2,zero,80ee8c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80ee80:	00bffd44 	movi	r2,-11
  80ee84:	e0bfff15 	stw	r2,-4(fp)
  80ee88:	00000206 	br	80ee94 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80ee8c:	00bffec4 	movi	r2,-5
  80ee90:	e0bfff15 	stw	r2,-4(fp)
  80ee94:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee98:	e037883a 	mov	sp,fp
  80ee9c:	dfc00117 	ldw	ra,4(sp)
  80eea0:	df000017 	ldw	fp,0(sp)
  80eea4:	dec00204 	addi	sp,sp,8
  80eea8:	f800283a 	ret

0080eeac <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  80eeac:	defffc04 	addi	sp,sp,-16
  80eeb0:	df000315 	stw	fp,12(sp)
  80eeb4:	df000304 	addi	fp,sp,12
  80eeb8:	e13ffe15 	stw	r4,-8(fp)
  80eebc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  80eec0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  80eec4:	e0bfff17 	ldw	r2,-4(fp)
  80eec8:	1004c03a 	cmpne	r2,r2,zero
  80eecc:	1000061e 	bne	r2,zero,80eee8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  80eed0:	e0bffe17 	ldw	r2,-8(fp)
  80eed4:	1007883a 	mov	r3,r2
  80eed8:	e0bffd03 	ldbu	r2,-12(fp)
  80eedc:	10c4b03a 	or	r2,r2,r3
  80eee0:	e0bffd05 	stb	r2,-12(fp)
  80eee4:	00000806 	br	80ef08 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  80eee8:	e0bffe17 	ldw	r2,-8(fp)
  80eeec:	1007883a 	mov	r3,r2
  80eef0:	e0bffd03 	ldbu	r2,-12(fp)
  80eef4:	10c4b03a 	or	r2,r2,r3
  80eef8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  80eefc:	e0bffd03 	ldbu	r2,-12(fp)
  80ef00:	10801014 	ori	r2,r2,64
  80ef04:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  80ef08:	e0fffd03 	ldbu	r3,-12(fp)
  80ef0c:	00bfe004 	movi	r2,-128
  80ef10:	1884b03a 	or	r2,r3,r2
  80ef14:	10803fcc 	andi	r2,r2,255
}
  80ef18:	e037883a 	mov	sp,fp
  80ef1c:	df000017 	ldw	fp,0(sp)
  80ef20:	dec00104 	addi	sp,sp,4
  80ef24:	f800283a 	ret

0080ef28 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  80ef28:	defffd04 	addi	sp,sp,-12
  80ef2c:	df000215 	stw	fp,8(sp)
  80ef30:	df000204 	addi	fp,sp,8
  80ef34:	e13ffe15 	stw	r4,-8(fp)
  80ef38:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  80ef3c:	e0bffe17 	ldw	r2,-8(fp)
  80ef40:	10800a17 	ldw	r2,40(r2)
  80ef44:	e0ffff03 	ldbu	r3,-4(fp)
  80ef48:	10c00025 	stbio	r3,0(r2)
}
  80ef4c:	e037883a 	mov	sp,fp
  80ef50:	df000017 	ldw	fp,0(sp)
  80ef54:	dec00104 	addi	sp,sp,4
  80ef58:	f800283a 	ret

0080ef5c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  80ef5c:	defffe04 	addi	sp,sp,-8
  80ef60:	df000115 	stw	fp,4(sp)
  80ef64:	df000104 	addi	fp,sp,4
  80ef68:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  80ef6c:	e0bfff17 	ldw	r2,-4(fp)
  80ef70:	10800a17 	ldw	r2,40(r2)
  80ef74:	1007883a 	mov	r3,r2
  80ef78:	00800044 	movi	r2,1
  80ef7c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  80ef80:	e037883a 	mov	sp,fp
  80ef84:	df000017 	ldw	fp,0(sp)
  80ef88:	dec00104 	addi	sp,sp,4
  80ef8c:	f800283a 	ret

0080ef90 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  80ef90:	defffc04 	addi	sp,sp,-16
  80ef94:	dfc00315 	stw	ra,12(sp)
  80ef98:	df000215 	stw	fp,8(sp)
  80ef9c:	df000204 	addi	fp,sp,8
  80efa0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  80efa4:	e13fff17 	ldw	r4,-4(fp)
  80efa8:	01402074 	movhi	r5,129
  80efac:	2949f304 	addi	r5,r5,10188
  80efb0:	080c8840 	call	80c884 <alt_find_dev>
  80efb4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  80efb8:	e0bffe17 	ldw	r2,-8(fp)
}
  80efbc:	e037883a 	mov	sp,fp
  80efc0:	dfc00117 	ldw	ra,4(sp)
  80efc4:	df000017 	ldw	fp,0(sp)
  80efc8:	dec00204 	addi	sp,sp,8
  80efcc:	f800283a 	ret

0080efd0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  80efd0:	defffb04 	addi	sp,sp,-20
  80efd4:	df000415 	stw	fp,16(sp)
  80efd8:	df000404 	addi	fp,sp,16
  80efdc:	e13ffd15 	stw	r4,-12(fp)
  80efe0:	e17ffe15 	stw	r5,-8(fp)
  80efe4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  80efe8:	e03ffc15 	stw	zero,-16(fp)
  80efec:	00000f06 	br	80f02c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  80eff0:	e0bffd17 	ldw	r2,-12(fp)
  80eff4:	10800a17 	ldw	r2,40(r2)
  80eff8:	11000044 	addi	r4,r2,1
  80effc:	e0fffc17 	ldw	r3,-16(fp)
  80f000:	e0bffe17 	ldw	r2,-8(fp)
  80f004:	1885883a 	add	r2,r3,r2
  80f008:	10800003 	ldbu	r2,0(r2)
  80f00c:	10c03fcc 	andi	r3,r2,255
  80f010:	18c0201c 	xori	r3,r3,128
  80f014:	18ffe004 	addi	r3,r3,-128
  80f018:	2005883a 	mov	r2,r4
  80f01c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  80f020:	e0bffc17 	ldw	r2,-16(fp)
  80f024:	10800044 	addi	r2,r2,1
  80f028:	e0bffc15 	stw	r2,-16(fp)
  80f02c:	e0fffc17 	ldw	r3,-16(fp)
  80f030:	e0bfff17 	ldw	r2,-4(fp)
  80f034:	18bfee36 	bltu	r3,r2,80eff0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  80f038:	e037883a 	mov	sp,fp
  80f03c:	df000017 	ldw	fp,0(sp)
  80f040:	dec00104 	addi	sp,sp,4
  80f044:	f800283a 	ret

0080f048 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  80f048:	defffd04 	addi	sp,sp,-12
  80f04c:	df000215 	stw	fp,8(sp)
  80f050:	df000204 	addi	fp,sp,8
  80f054:	e13ffe15 	stw	r4,-8(fp)
  80f058:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  80f05c:	00000d06 	br	80f094 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  80f060:	e0bffe17 	ldw	r2,-8(fp)
  80f064:	10800a17 	ldw	r2,40(r2)
  80f068:	11000044 	addi	r4,r2,1
  80f06c:	e0bfff17 	ldw	r2,-4(fp)
  80f070:	10800003 	ldbu	r2,0(r2)
  80f074:	10c03fcc 	andi	r3,r2,255
  80f078:	18c0201c 	xori	r3,r3,128
  80f07c:	18ffe004 	addi	r3,r3,-128
  80f080:	2005883a 	mov	r2,r4
  80f084:	10c00025 	stbio	r3,0(r2)
		++ptr;
  80f088:	e0bfff17 	ldw	r2,-4(fp)
  80f08c:	10800044 	addi	r2,r2,1
  80f090:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  80f094:	e0bfff17 	ldw	r2,-4(fp)
  80f098:	10800003 	ldbu	r2,0(r2)
  80f09c:	10803fcc 	andi	r2,r2,255
  80f0a0:	1080201c 	xori	r2,r2,128
  80f0a4:	10bfe004 	addi	r2,r2,-128
  80f0a8:	1004c03a 	cmpne	r2,r2,zero
  80f0ac:	103fec1e 	bne	r2,zero,80f060 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  80f0b0:	e037883a 	mov	sp,fp
  80f0b4:	df000017 	ldw	fp,0(sp)
  80f0b8:	dec00104 	addi	sp,sp,4
  80f0bc:	f800283a 	ret

0080f0c0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  80f0c0:	defffb04 	addi	sp,sp,-20
  80f0c4:	dfc00415 	stw	ra,16(sp)
  80f0c8:	df000315 	stw	fp,12(sp)
  80f0cc:	df000304 	addi	fp,sp,12
  80f0d0:	e13ffd15 	stw	r4,-12(fp)
  80f0d4:	e17ffe15 	stw	r5,-8(fp)
  80f0d8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  80f0dc:	e0bffd17 	ldw	r2,-12(fp)
  80f0e0:	10800017 	ldw	r2,0(r2)
  80f0e4:	1009883a 	mov	r4,r2
  80f0e8:	e1bfff17 	ldw	r6,-4(fp)
  80f0ec:	e17ffe17 	ldw	r5,-8(fp)
  80f0f0:	080efd00 	call	80efd0 <alt_up_character_lcd_write>
	return 0;
  80f0f4:	0005883a 	mov	r2,zero
}
  80f0f8:	e037883a 	mov	sp,fp
  80f0fc:	dfc00117 	ldw	ra,4(sp)
  80f100:	df000017 	ldw	fp,0(sp)
  80f104:	dec00204 	addi	sp,sp,8
  80f108:	f800283a 	ret

0080f10c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  80f10c:	defff904 	addi	sp,sp,-28
  80f110:	dfc00615 	stw	ra,24(sp)
  80f114:	df000515 	stw	fp,20(sp)
  80f118:	df000504 	addi	fp,sp,20
  80f11c:	e13ffc15 	stw	r4,-16(fp)
  80f120:	e17ffd15 	stw	r5,-12(fp)
  80f124:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  80f128:	e0bffd17 	ldw	r2,-12(fp)
  80f12c:	10800a28 	cmpgeui	r2,r2,40
  80f130:	1000031e 	bne	r2,zero,80f140 <alt_up_character_lcd_set_cursor_pos+0x34>
  80f134:	e0bffe17 	ldw	r2,-8(fp)
  80f138:	108000b0 	cmpltui	r2,r2,2
  80f13c:	1000031e 	bne	r2,zero,80f14c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  80f140:	00bfffc4 	movi	r2,-1
  80f144:	e0bfff15 	stw	r2,-4(fp)
  80f148:	00000806 	br	80f16c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80f14c:	e13ffd17 	ldw	r4,-12(fp)
  80f150:	e17ffe17 	ldw	r5,-8(fp)
  80f154:	080eeac0 	call	80eeac <get_DDRAM_addr>
  80f158:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  80f15c:	e17ffb03 	ldbu	r5,-20(fp)
  80f160:	e13ffc17 	ldw	r4,-16(fp)
  80f164:	080ef280 	call	80ef28 <alt_up_character_lcd_send_cmd>
	return 0;
  80f168:	e03fff15 	stw	zero,-4(fp)
  80f16c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f170:	e037883a 	mov	sp,fp
  80f174:	dfc00117 	ldw	ra,4(sp)
  80f178:	df000017 	ldw	fp,0(sp)
  80f17c:	dec00204 	addi	sp,sp,8
  80f180:	f800283a 	ret

0080f184 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80f184:	defff904 	addi	sp,sp,-28
  80f188:	dfc00615 	stw	ra,24(sp)
  80f18c:	df000515 	stw	fp,20(sp)
  80f190:	df000504 	addi	fp,sp,20
  80f194:	e13ffc15 	stw	r4,-16(fp)
  80f198:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80f19c:	e0bffd17 	ldw	r2,-12(fp)
  80f1a0:	1005003a 	cmpeq	r2,r2,zero
  80f1a4:	10001e1e 	bne	r2,zero,80f220 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  80f1a8:	e0bffd17 	ldw	r2,-12(fp)
  80f1ac:	10800050 	cmplti	r2,r2,1
  80f1b0:	1000031e 	bne	r2,zero,80f1c0 <alt_up_character_lcd_shift_cursor+0x3c>
  80f1b4:	00800504 	movi	r2,20
  80f1b8:	e0bfff05 	stb	r2,-4(fp)
  80f1bc:	00000206 	br	80f1c8 <alt_up_character_lcd_shift_cursor+0x44>
  80f1c0:	00c00404 	movi	r3,16
  80f1c4:	e0ffff05 	stb	r3,-4(fp)
  80f1c8:	e0bfff03 	ldbu	r2,-4(fp)
  80f1cc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80f1d0:	e0fffd17 	ldw	r3,-12(fp)
  80f1d4:	e0fffe15 	stw	r3,-8(fp)
  80f1d8:	e0fffe17 	ldw	r3,-8(fp)
  80f1dc:	1804403a 	cmpge	r2,r3,zero
  80f1e0:	1000031e 	bne	r2,zero,80f1f0 <alt_up_character_lcd_shift_cursor+0x6c>
  80f1e4:	e0bffe17 	ldw	r2,-8(fp)
  80f1e8:	0085c83a 	sub	r2,zero,r2
  80f1ec:	e0bffe15 	stw	r2,-8(fp)
  80f1f0:	e0fffe17 	ldw	r3,-8(fp)
  80f1f4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80f1f8:	00000306 	br	80f208 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80f1fc:	e17ffb43 	ldbu	r5,-19(fp)
  80f200:	e13ffc17 	ldw	r4,-16(fp)
  80f204:	080ef280 	call	80ef28 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80f208:	e0bffb03 	ldbu	r2,-20(fp)
  80f20c:	10bfffc4 	addi	r2,r2,-1
  80f210:	e0bffb05 	stb	r2,-20(fp)
  80f214:	e0bffb03 	ldbu	r2,-20(fp)
  80f218:	10803fd8 	cmpnei	r2,r2,255
  80f21c:	103ff71e 	bne	r2,zero,80f1fc <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80f220:	e037883a 	mov	sp,fp
  80f224:	dfc00117 	ldw	ra,4(sp)
  80f228:	df000017 	ldw	fp,0(sp)
  80f22c:	dec00204 	addi	sp,sp,8
  80f230:	f800283a 	ret

0080f234 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  80f234:	defff904 	addi	sp,sp,-28
  80f238:	dfc00615 	stw	ra,24(sp)
  80f23c:	df000515 	stw	fp,20(sp)
  80f240:	df000504 	addi	fp,sp,20
  80f244:	e13ffc15 	stw	r4,-16(fp)
  80f248:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  80f24c:	e0bffd17 	ldw	r2,-12(fp)
  80f250:	1005003a 	cmpeq	r2,r2,zero
  80f254:	10001e1e 	bne	r2,zero,80f2d0 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  80f258:	e0bffd17 	ldw	r2,-12(fp)
  80f25c:	10800050 	cmplti	r2,r2,1
  80f260:	1000031e 	bne	r2,zero,80f270 <alt_up_character_lcd_shift_display+0x3c>
  80f264:	00800704 	movi	r2,28
  80f268:	e0bfff05 	stb	r2,-4(fp)
  80f26c:	00000206 	br	80f278 <alt_up_character_lcd_shift_display+0x44>
  80f270:	00c00604 	movi	r3,24
  80f274:	e0ffff05 	stb	r3,-4(fp)
  80f278:	e0bfff03 	ldbu	r2,-4(fp)
  80f27c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  80f280:	e0fffd17 	ldw	r3,-12(fp)
  80f284:	e0fffe15 	stw	r3,-8(fp)
  80f288:	e0fffe17 	ldw	r3,-8(fp)
  80f28c:	1804403a 	cmpge	r2,r3,zero
  80f290:	1000031e 	bne	r2,zero,80f2a0 <alt_up_character_lcd_shift_display+0x6c>
  80f294:	e0bffe17 	ldw	r2,-8(fp)
  80f298:	0085c83a 	sub	r2,zero,r2
  80f29c:	e0bffe15 	stw	r2,-8(fp)
  80f2a0:	e0fffe17 	ldw	r3,-8(fp)
  80f2a4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  80f2a8:	00000306 	br	80f2b8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  80f2ac:	e17ffb43 	ldbu	r5,-19(fp)
  80f2b0:	e13ffc17 	ldw	r4,-16(fp)
  80f2b4:	080ef280 	call	80ef28 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  80f2b8:	e0bffb03 	ldbu	r2,-20(fp)
  80f2bc:	10bfffc4 	addi	r2,r2,-1
  80f2c0:	e0bffb05 	stb	r2,-20(fp)
  80f2c4:	e0bffb03 	ldbu	r2,-20(fp)
  80f2c8:	10803fd8 	cmpnei	r2,r2,255
  80f2cc:	103ff71e 	bne	r2,zero,80f2ac <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  80f2d0:	e037883a 	mov	sp,fp
  80f2d4:	dfc00117 	ldw	ra,4(sp)
  80f2d8:	df000017 	ldw	fp,0(sp)
  80f2dc:	dec00204 	addi	sp,sp,8
  80f2e0:	f800283a 	ret

0080f2e4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  80f2e4:	defff904 	addi	sp,sp,-28
  80f2e8:	dfc00615 	stw	ra,24(sp)
  80f2ec:	df000515 	stw	fp,20(sp)
  80f2f0:	df000504 	addi	fp,sp,20
  80f2f4:	e13ffc15 	stw	r4,-16(fp)
  80f2f8:	e17ffd15 	stw	r5,-12(fp)
  80f2fc:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  80f300:	e0bffd17 	ldw	r2,-12(fp)
  80f304:	10800a28 	cmpgeui	r2,r2,40
  80f308:	1000031e 	bne	r2,zero,80f318 <alt_up_character_lcd_erase_pos+0x34>
  80f30c:	e0bffe17 	ldw	r2,-8(fp)
  80f310:	108000b0 	cmpltui	r2,r2,2
  80f314:	1000031e 	bne	r2,zero,80f324 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  80f318:	00bfffc4 	movi	r2,-1
  80f31c:	e0bfff15 	stw	r2,-4(fp)
  80f320:	00000e06 	br	80f35c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  80f324:	e13ffd17 	ldw	r4,-12(fp)
  80f328:	e17ffe17 	ldw	r5,-8(fp)
  80f32c:	080eeac0 	call	80eeac <get_DDRAM_addr>
  80f330:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  80f334:	e17ffb03 	ldbu	r5,-20(fp)
  80f338:	e13ffc17 	ldw	r4,-16(fp)
  80f33c:	080ef280 	call	80ef28 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  80f340:	e0bffc17 	ldw	r2,-16(fp)
  80f344:	10800a17 	ldw	r2,40(r2)
  80f348:	10800044 	addi	r2,r2,1
  80f34c:	1007883a 	mov	r3,r2
  80f350:	00800084 	movi	r2,2
  80f354:	18800025 	stbio	r2,0(r3)
	return 0;
  80f358:	e03fff15 	stw	zero,-4(fp)
  80f35c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f360:	e037883a 	mov	sp,fp
  80f364:	dfc00117 	ldw	ra,4(sp)
  80f368:	df000017 	ldw	fp,0(sp)
  80f36c:	dec00204 	addi	sp,sp,8
  80f370:	f800283a 	ret

0080f374 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  80f374:	defffd04 	addi	sp,sp,-12
  80f378:	dfc00215 	stw	ra,8(sp)
  80f37c:	df000115 	stw	fp,4(sp)
  80f380:	df000104 	addi	fp,sp,4
  80f384:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  80f388:	e13fff17 	ldw	r4,-4(fp)
  80f38c:	01400304 	movi	r5,12
  80f390:	080ef280 	call	80ef28 <alt_up_character_lcd_send_cmd>
}
  80f394:	e037883a 	mov	sp,fp
  80f398:	dfc00117 	ldw	ra,4(sp)
  80f39c:	df000017 	ldw	fp,0(sp)
  80f3a0:	dec00204 	addi	sp,sp,8
  80f3a4:	f800283a 	ret

0080f3a8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  80f3a8:	defffd04 	addi	sp,sp,-12
  80f3ac:	dfc00215 	stw	ra,8(sp)
  80f3b0:	df000115 	stw	fp,4(sp)
  80f3b4:	df000104 	addi	fp,sp,4
  80f3b8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  80f3bc:	e13fff17 	ldw	r4,-4(fp)
  80f3c0:	014003c4 	movi	r5,15
  80f3c4:	080ef280 	call	80ef28 <alt_up_character_lcd_send_cmd>
}
  80f3c8:	e037883a 	mov	sp,fp
  80f3cc:	dfc00117 	ldw	ra,4(sp)
  80f3d0:	df000017 	ldw	fp,0(sp)
  80f3d4:	dec00204 	addi	sp,sp,8
  80f3d8:	f800283a 	ret

0080f3dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f3dc:	defff404 	addi	sp,sp,-48
  80f3e0:	df000b15 	stw	fp,44(sp)
  80f3e4:	df000b04 	addi	fp,sp,44
  80f3e8:	e13ffb15 	stw	r4,-20(fp)
  80f3ec:	e17ffc15 	stw	r5,-16(fp)
  80f3f0:	e1bffd15 	stw	r6,-12(fp)
  80f3f4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f3f8:	e03ff915 	stw	zero,-28(fp)
  80f3fc:	00802074 	movhi	r2,129
  80f400:	10910c04 	addi	r2,r2,17456
  80f404:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80f408:	1005003a 	cmpeq	r2,r2,zero
  80f40c:	1000411e 	bne	r2,zero,80f514 <alt_alarm_start+0x138>
  {
    if (alarm)
  80f410:	e0bffb17 	ldw	r2,-20(fp)
  80f414:	1005003a 	cmpeq	r2,r2,zero
  80f418:	10003b1e 	bne	r2,zero,80f508 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80f41c:	e0fffb17 	ldw	r3,-20(fp)
  80f420:	e0bffd17 	ldw	r2,-12(fp)
  80f424:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80f428:	e0fffb17 	ldw	r3,-20(fp)
  80f42c:	e0bffe17 	ldw	r2,-8(fp)
  80f430:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f434:	0005303a 	rdctl	r2,status
  80f438:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f43c:	e0fff817 	ldw	r3,-32(fp)
  80f440:	00bfff84 	movi	r2,-2
  80f444:	1884703a 	and	r2,r3,r2
  80f448:	1001703a 	wrctl	status,r2
  
  return context;
  80f44c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80f450:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f454:	00802074 	movhi	r2,129
  80f458:	10910d04 	addi	r2,r2,17460
  80f45c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80f460:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f464:	e0fffc17 	ldw	r3,-16(fp)
  80f468:	e0bff917 	ldw	r2,-28(fp)
  80f46c:	1885883a 	add	r2,r3,r2
  80f470:	10c00044 	addi	r3,r2,1
  80f474:	e0bffb17 	ldw	r2,-20(fp)
  80f478:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f47c:	e0bffb17 	ldw	r2,-20(fp)
  80f480:	10c00217 	ldw	r3,8(r2)
  80f484:	e0bff917 	ldw	r2,-28(fp)
  80f488:	1880042e 	bgeu	r3,r2,80f49c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80f48c:	e0fffb17 	ldw	r3,-20(fp)
  80f490:	00800044 	movi	r2,1
  80f494:	18800405 	stb	r2,16(r3)
  80f498:	00000206 	br	80f4a4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80f49c:	e0bffb17 	ldw	r2,-20(fp)
  80f4a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f4a4:	e0fffb17 	ldw	r3,-20(fp)
  80f4a8:	00802074 	movhi	r2,129
  80f4ac:	1089fd04 	addi	r2,r2,10228
  80f4b0:	e0bff615 	stw	r2,-40(fp)
  80f4b4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f4b8:	e0fff717 	ldw	r3,-36(fp)
  80f4bc:	e0bff617 	ldw	r2,-40(fp)
  80f4c0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80f4c4:	e0bff617 	ldw	r2,-40(fp)
  80f4c8:	10c00017 	ldw	r3,0(r2)
  80f4cc:	e0bff717 	ldw	r2,-36(fp)
  80f4d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f4d4:	e0bff617 	ldw	r2,-40(fp)
  80f4d8:	10c00017 	ldw	r3,0(r2)
  80f4dc:	e0bff717 	ldw	r2,-36(fp)
  80f4e0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80f4e4:	e0fff617 	ldw	r3,-40(fp)
  80f4e8:	e0bff717 	ldw	r2,-36(fp)
  80f4ec:	18800015 	stw	r2,0(r3)
  80f4f0:	e0bffa17 	ldw	r2,-24(fp)
  80f4f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4f8:	e0bff517 	ldw	r2,-44(fp)
  80f4fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f500:	e03fff15 	stw	zero,-4(fp)
  80f504:	00000506 	br	80f51c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80f508:	00bffa84 	movi	r2,-22
  80f50c:	e0bfff15 	stw	r2,-4(fp)
  80f510:	00000206 	br	80f51c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80f514:	00bfde84 	movi	r2,-134
  80f518:	e0bfff15 	stw	r2,-4(fp)
  80f51c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80f520:	e037883a 	mov	sp,fp
  80f524:	df000017 	ldw	fp,0(sp)
  80f528:	dec00104 	addi	sp,sp,4
  80f52c:	f800283a 	ret

0080f530 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80f530:	defffa04 	addi	sp,sp,-24
  80f534:	dfc00515 	stw	ra,20(sp)
  80f538:	df000415 	stw	fp,16(sp)
  80f53c:	df000404 	addi	fp,sp,16
  80f540:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80f544:	008000c4 	movi	r2,3
  80f548:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80f54c:	e0fffc17 	ldw	r3,-16(fp)
  80f550:	008003f4 	movhi	r2,15
  80f554:	10909004 	addi	r2,r2,16960
  80f558:	188b383a 	mul	r5,r3,r2
  80f55c:	0100bef4 	movhi	r4,763
  80f560:	213c2004 	addi	r4,r4,-3968
  80f564:	080bef00 	call	80bef0 <__udivsi3>
  80f568:	100b883a 	mov	r5,r2
  80f56c:	01200034 	movhi	r4,32768
  80f570:	213fffc4 	addi	r4,r4,-1
  80f574:	080bef00 	call	80bef0 <__udivsi3>
  80f578:	100b883a 	mov	r5,r2
  80f57c:	e13fff17 	ldw	r4,-4(fp)
  80f580:	080bef00 	call	80bef0 <__udivsi3>
  80f584:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80f588:	e0bffd17 	ldw	r2,-12(fp)
  80f58c:	1005003a 	cmpeq	r2,r2,zero
  80f590:	1000281e 	bne	r2,zero,80f634 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80f594:	e03ffe15 	stw	zero,-8(fp)
  80f598:	00001606 	br	80f5f4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80f59c:	00a00034 	movhi	r2,32768
  80f5a0:	10bfffc4 	addi	r2,r2,-1
  80f5a4:	10bfffc4 	addi	r2,r2,-1
  80f5a8:	103ffe1e 	bne	r2,zero,80f5a4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80f5ac:	e0fffc17 	ldw	r3,-16(fp)
  80f5b0:	008003f4 	movhi	r2,15
  80f5b4:	10909004 	addi	r2,r2,16960
  80f5b8:	188b383a 	mul	r5,r3,r2
  80f5bc:	0100bef4 	movhi	r4,763
  80f5c0:	213c2004 	addi	r4,r4,-3968
  80f5c4:	080bef00 	call	80bef0 <__udivsi3>
  80f5c8:	100b883a 	mov	r5,r2
  80f5cc:	01200034 	movhi	r4,32768
  80f5d0:	213fffc4 	addi	r4,r4,-1
  80f5d4:	080bef00 	call	80bef0 <__udivsi3>
  80f5d8:	1007883a 	mov	r3,r2
  80f5dc:	e0bfff17 	ldw	r2,-4(fp)
  80f5e0:	10c5c83a 	sub	r2,r2,r3
  80f5e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80f5e8:	e0bffe17 	ldw	r2,-8(fp)
  80f5ec:	10800044 	addi	r2,r2,1
  80f5f0:	e0bffe15 	stw	r2,-8(fp)
  80f5f4:	e0fffe17 	ldw	r3,-8(fp)
  80f5f8:	e0bffd17 	ldw	r2,-12(fp)
  80f5fc:	18bfe716 	blt	r3,r2,80f59c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80f600:	e0fffc17 	ldw	r3,-16(fp)
  80f604:	008003f4 	movhi	r2,15
  80f608:	10909004 	addi	r2,r2,16960
  80f60c:	188b383a 	mul	r5,r3,r2
  80f610:	0100bef4 	movhi	r4,763
  80f614:	213c2004 	addi	r4,r4,-3968
  80f618:	080bef00 	call	80bef0 <__udivsi3>
  80f61c:	1007883a 	mov	r3,r2
  80f620:	e0bfff17 	ldw	r2,-4(fp)
  80f624:	1885383a 	mul	r2,r3,r2
  80f628:	10bfffc4 	addi	r2,r2,-1
  80f62c:	103ffe1e 	bne	r2,zero,80f628 <alt_busy_sleep+0xf8>
  80f630:	00000c06 	br	80f664 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80f634:	e0fffc17 	ldw	r3,-16(fp)
  80f638:	008003f4 	movhi	r2,15
  80f63c:	10909004 	addi	r2,r2,16960
  80f640:	188b383a 	mul	r5,r3,r2
  80f644:	0100bef4 	movhi	r4,763
  80f648:	213c2004 	addi	r4,r4,-3968
  80f64c:	080bef00 	call	80bef0 <__udivsi3>
  80f650:	1007883a 	mov	r3,r2
  80f654:	e0bfff17 	ldw	r2,-4(fp)
  80f658:	1885383a 	mul	r2,r3,r2
  80f65c:	10bfffc4 	addi	r2,r2,-1
  80f660:	00bffe16 	blt	zero,r2,80f65c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80f664:	0005883a 	mov	r2,zero
}
  80f668:	e037883a 	mov	sp,fp
  80f66c:	dfc00117 	ldw	ra,4(sp)
  80f670:	df000017 	ldw	fp,0(sp)
  80f674:	dec00204 	addi	sp,sp,8
  80f678:	f800283a 	ret

0080f67c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f67c:	defffe04 	addi	sp,sp,-8
  80f680:	df000115 	stw	fp,4(sp)
  80f684:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f688:	e03fff15 	stw	zero,-4(fp)
  80f68c:	00000506 	br	80f6a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80f690:	e0bfff17 	ldw	r2,-4(fp)
  80f694:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f698:	e0bfff17 	ldw	r2,-4(fp)
  80f69c:	10800804 	addi	r2,r2,32
  80f6a0:	e0bfff15 	stw	r2,-4(fp)
  80f6a4:	e0bfff17 	ldw	r2,-4(fp)
  80f6a8:	10820030 	cmpltui	r2,r2,2048
  80f6ac:	103ff81e 	bne	r2,zero,80f690 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80f6b0:	e037883a 	mov	sp,fp
  80f6b4:	df000017 	ldw	fp,0(sp)
  80f6b8:	dec00104 	addi	sp,sp,4
  80f6bc:	f800283a 	ret

0080f6c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f6c0:	defff904 	addi	sp,sp,-28
  80f6c4:	dfc00615 	stw	ra,24(sp)
  80f6c8:	df000515 	stw	fp,20(sp)
  80f6cc:	df000504 	addi	fp,sp,20
  80f6d0:	e13ffd15 	stw	r4,-12(fp)
  80f6d4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f6d8:	e0bffd17 	ldw	r2,-12(fp)
  80f6dc:	1005003a 	cmpeq	r2,r2,zero
  80f6e0:	1000041e 	bne	r2,zero,80f6f4 <alt_dev_llist_insert+0x34>
  80f6e4:	e0bffd17 	ldw	r2,-12(fp)
  80f6e8:	10800217 	ldw	r2,8(r2)
  80f6ec:	1004c03a 	cmpne	r2,r2,zero
  80f6f0:	1000071e 	bne	r2,zero,80f710 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80f6f4:	080f7740 	call	80f774 <alt_get_errno>
  80f6f8:	1007883a 	mov	r3,r2
  80f6fc:	00800584 	movi	r2,22
  80f700:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80f704:	00bffa84 	movi	r2,-22
  80f708:	e0bfff15 	stw	r2,-4(fp)
  80f70c:	00001306 	br	80f75c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80f710:	e0fffd17 	ldw	r3,-12(fp)
  80f714:	e0bffe17 	ldw	r2,-8(fp)
  80f718:	e0bffb15 	stw	r2,-20(fp)
  80f71c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f720:	e0fffc17 	ldw	r3,-16(fp)
  80f724:	e0bffb17 	ldw	r2,-20(fp)
  80f728:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80f72c:	e0bffb17 	ldw	r2,-20(fp)
  80f730:	10c00017 	ldw	r3,0(r2)
  80f734:	e0bffc17 	ldw	r2,-16(fp)
  80f738:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f73c:	e0bffb17 	ldw	r2,-20(fp)
  80f740:	10c00017 	ldw	r3,0(r2)
  80f744:	e0bffc17 	ldw	r2,-16(fp)
  80f748:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80f74c:	e0fffb17 	ldw	r3,-20(fp)
  80f750:	e0bffc17 	ldw	r2,-16(fp)
  80f754:	18800015 	stw	r2,0(r3)

  return 0;  
  80f758:	e03fff15 	stw	zero,-4(fp)
  80f75c:	e0bfff17 	ldw	r2,-4(fp)
}
  80f760:	e037883a 	mov	sp,fp
  80f764:	dfc00117 	ldw	ra,4(sp)
  80f768:	df000017 	ldw	fp,0(sp)
  80f76c:	dec00204 	addi	sp,sp,8
  80f770:	f800283a 	ret

0080f774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f774:	defffd04 	addi	sp,sp,-12
  80f778:	dfc00215 	stw	ra,8(sp)
  80f77c:	df000115 	stw	fp,4(sp)
  80f780:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f784:	00802074 	movhi	r2,129
  80f788:	1089fa04 	addi	r2,r2,10216
  80f78c:	10800017 	ldw	r2,0(r2)
  80f790:	1005003a 	cmpeq	r2,r2,zero
  80f794:	1000061e 	bne	r2,zero,80f7b0 <alt_get_errno+0x3c>
  80f798:	00802074 	movhi	r2,129
  80f79c:	1089fa04 	addi	r2,r2,10216
  80f7a0:	10800017 	ldw	r2,0(r2)
  80f7a4:	103ee83a 	callr	r2
  80f7a8:	e0bfff15 	stw	r2,-4(fp)
  80f7ac:	00000306 	br	80f7bc <alt_get_errno+0x48>
  80f7b0:	00802074 	movhi	r2,129
  80f7b4:	10910404 	addi	r2,r2,17424
  80f7b8:	e0bfff15 	stw	r2,-4(fp)
  80f7bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f7c0:	e037883a 	mov	sp,fp
  80f7c4:	dfc00117 	ldw	ra,4(sp)
  80f7c8:	df000017 	ldw	fp,0(sp)
  80f7cc:	dec00204 	addi	sp,sp,8
  80f7d0:	f800283a 	ret

0080f7d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80f7d4:	defffd04 	addi	sp,sp,-12
  80f7d8:	dfc00215 	stw	ra,8(sp)
  80f7dc:	df000115 	stw	fp,4(sp)
  80f7e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f7e4:	00bfff04 	movi	r2,-4
  80f7e8:	00c02074 	movhi	r3,129
  80f7ec:	18c16104 	addi	r3,r3,1412
  80f7f0:	1885883a 	add	r2,r3,r2
  80f7f4:	e0bfff15 	stw	r2,-4(fp)
  80f7f8:	00000606 	br	80f814 <_do_ctors+0x40>
        (*ctor) (); 
  80f7fc:	e0bfff17 	ldw	r2,-4(fp)
  80f800:	10800017 	ldw	r2,0(r2)
  80f804:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f808:	e0bfff17 	ldw	r2,-4(fp)
  80f80c:	10bfff04 	addi	r2,r2,-4
  80f810:	e0bfff15 	stw	r2,-4(fp)
  80f814:	e0ffff17 	ldw	r3,-4(fp)
  80f818:	00802074 	movhi	r2,129
  80f81c:	10816004 	addi	r2,r2,1408
  80f820:	18bff62e 	bgeu	r3,r2,80f7fc <_do_ctors+0x28>
        (*ctor) (); 
}
  80f824:	e037883a 	mov	sp,fp
  80f828:	dfc00117 	ldw	ra,4(sp)
  80f82c:	df000017 	ldw	fp,0(sp)
  80f830:	dec00204 	addi	sp,sp,8
  80f834:	f800283a 	ret

0080f838 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f838:	defffd04 	addi	sp,sp,-12
  80f83c:	dfc00215 	stw	ra,8(sp)
  80f840:	df000115 	stw	fp,4(sp)
  80f844:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f848:	00bfff04 	movi	r2,-4
  80f84c:	00c02074 	movhi	r3,129
  80f850:	18c16104 	addi	r3,r3,1412
  80f854:	1885883a 	add	r2,r3,r2
  80f858:	e0bfff15 	stw	r2,-4(fp)
  80f85c:	00000606 	br	80f878 <_do_dtors+0x40>
        (*dtor) (); 
  80f860:	e0bfff17 	ldw	r2,-4(fp)
  80f864:	10800017 	ldw	r2,0(r2)
  80f868:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f86c:	e0bfff17 	ldw	r2,-4(fp)
  80f870:	10bfff04 	addi	r2,r2,-4
  80f874:	e0bfff15 	stw	r2,-4(fp)
  80f878:	e0ffff17 	ldw	r3,-4(fp)
  80f87c:	00802074 	movhi	r2,129
  80f880:	10816104 	addi	r2,r2,1412
  80f884:	18bff62e 	bgeu	r3,r2,80f860 <_do_dtors+0x28>
        (*dtor) (); 
}
  80f888:	e037883a 	mov	sp,fp
  80f88c:	dfc00117 	ldw	ra,4(sp)
  80f890:	df000017 	ldw	fp,0(sp)
  80f894:	dec00204 	addi	sp,sp,8
  80f898:	f800283a 	ret

0080f89c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f89c:	defffe04 	addi	sp,sp,-8
  80f8a0:	dfc00115 	stw	ra,4(sp)
  80f8a4:	df000015 	stw	fp,0(sp)
  80f8a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f8ac:	0009883a 	mov	r4,zero
  80f8b0:	01440004 	movi	r5,4096
  80f8b4:	08103340 	call	810334 <alt_icache_flush>
#endif
}
  80f8b8:	e037883a 	mov	sp,fp
  80f8bc:	dfc00117 	ldw	ra,4(sp)
  80f8c0:	df000017 	ldw	fp,0(sp)
  80f8c4:	dec00204 	addi	sp,sp,8
  80f8c8:	f800283a 	ret

0080f8cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80f8cc:	defff904 	addi	sp,sp,-28
  80f8d0:	dfc00615 	stw	ra,24(sp)
  80f8d4:	df000515 	stw	fp,20(sp)
  80f8d8:	df000504 	addi	fp,sp,20
  80f8dc:	e13ffc15 	stw	r4,-16(fp)
  80f8e0:	e17ffd15 	stw	r5,-12(fp)
  80f8e4:	e1bffe15 	stw	r6,-8(fp)
  80f8e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80f8ec:	e0800217 	ldw	r2,8(fp)
  80f8f0:	d8800015 	stw	r2,0(sp)
  80f8f4:	e13ffc17 	ldw	r4,-16(fp)
  80f8f8:	e17ffd17 	ldw	r5,-12(fp)
  80f8fc:	e1bffe17 	ldw	r6,-8(fp)
  80f900:	e1ffff17 	ldw	r7,-4(fp)
  80f904:	080faa00 	call	80faa0 <alt_iic_isr_register>
}  
  80f908:	e037883a 	mov	sp,fp
  80f90c:	dfc00117 	ldw	ra,4(sp)
  80f910:	df000017 	ldw	fp,0(sp)
  80f914:	dec00204 	addi	sp,sp,8
  80f918:	f800283a 	ret

0080f91c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80f91c:	defff904 	addi	sp,sp,-28
  80f920:	df000615 	stw	fp,24(sp)
  80f924:	df000604 	addi	fp,sp,24
  80f928:	e13ffe15 	stw	r4,-8(fp)
  80f92c:	e17fff15 	stw	r5,-4(fp)
  80f930:	e0bfff17 	ldw	r2,-4(fp)
  80f934:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f938:	0005303a 	rdctl	r2,status
  80f93c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f940:	e0fffb17 	ldw	r3,-20(fp)
  80f944:	00bfff84 	movi	r2,-2
  80f948:	1884703a 	and	r2,r3,r2
  80f94c:	1001703a 	wrctl	status,r2
  
  return context;
  80f950:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f954:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80f958:	e0fffc17 	ldw	r3,-16(fp)
  80f95c:	00800044 	movi	r2,1
  80f960:	10c4983a 	sll	r2,r2,r3
  80f964:	1007883a 	mov	r3,r2
  80f968:	00802074 	movhi	r2,129
  80f96c:	10910b04 	addi	r2,r2,17452
  80f970:	10800017 	ldw	r2,0(r2)
  80f974:	1886b03a 	or	r3,r3,r2
  80f978:	00802074 	movhi	r2,129
  80f97c:	10910b04 	addi	r2,r2,17452
  80f980:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f984:	00802074 	movhi	r2,129
  80f988:	10910b04 	addi	r2,r2,17452
  80f98c:	10800017 	ldw	r2,0(r2)
  80f990:	100170fa 	wrctl	ienable,r2
  80f994:	e0bffd17 	ldw	r2,-12(fp)
  80f998:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f99c:	e0bffa17 	ldw	r2,-24(fp)
  80f9a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f9a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80f9a8:	e037883a 	mov	sp,fp
  80f9ac:	df000017 	ldw	fp,0(sp)
  80f9b0:	dec00104 	addi	sp,sp,4
  80f9b4:	f800283a 	ret

0080f9b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80f9b8:	defff904 	addi	sp,sp,-28
  80f9bc:	df000615 	stw	fp,24(sp)
  80f9c0:	df000604 	addi	fp,sp,24
  80f9c4:	e13ffe15 	stw	r4,-8(fp)
  80f9c8:	e17fff15 	stw	r5,-4(fp)
  80f9cc:	e0bfff17 	ldw	r2,-4(fp)
  80f9d0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9d4:	0005303a 	rdctl	r2,status
  80f9d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9dc:	e0fffb17 	ldw	r3,-20(fp)
  80f9e0:	00bfff84 	movi	r2,-2
  80f9e4:	1884703a 	and	r2,r3,r2
  80f9e8:	1001703a 	wrctl	status,r2
  
  return context;
  80f9ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f9f0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80f9f4:	e0fffc17 	ldw	r3,-16(fp)
  80f9f8:	00800044 	movi	r2,1
  80f9fc:	10c4983a 	sll	r2,r2,r3
  80fa00:	0084303a 	nor	r2,zero,r2
  80fa04:	1007883a 	mov	r3,r2
  80fa08:	00802074 	movhi	r2,129
  80fa0c:	10910b04 	addi	r2,r2,17452
  80fa10:	10800017 	ldw	r2,0(r2)
  80fa14:	1886703a 	and	r3,r3,r2
  80fa18:	00802074 	movhi	r2,129
  80fa1c:	10910b04 	addi	r2,r2,17452
  80fa20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80fa24:	00802074 	movhi	r2,129
  80fa28:	10910b04 	addi	r2,r2,17452
  80fa2c:	10800017 	ldw	r2,0(r2)
  80fa30:	100170fa 	wrctl	ienable,r2
  80fa34:	e0bffd17 	ldw	r2,-12(fp)
  80fa38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa3c:	e0bffa17 	ldw	r2,-24(fp)
  80fa40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80fa44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80fa48:	e037883a 	mov	sp,fp
  80fa4c:	df000017 	ldw	fp,0(sp)
  80fa50:	dec00104 	addi	sp,sp,4
  80fa54:	f800283a 	ret

0080fa58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80fa58:	defffc04 	addi	sp,sp,-16
  80fa5c:	df000315 	stw	fp,12(sp)
  80fa60:	df000304 	addi	fp,sp,12
  80fa64:	e13ffe15 	stw	r4,-8(fp)
  80fa68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80fa6c:	000530fa 	rdctl	r2,ienable
  80fa70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80fa74:	e0ffff17 	ldw	r3,-4(fp)
  80fa78:	00800044 	movi	r2,1
  80fa7c:	10c4983a 	sll	r2,r2,r3
  80fa80:	1007883a 	mov	r3,r2
  80fa84:	e0bffd17 	ldw	r2,-12(fp)
  80fa88:	1884703a 	and	r2,r3,r2
  80fa8c:	1004c03a 	cmpne	r2,r2,zero
}
  80fa90:	e037883a 	mov	sp,fp
  80fa94:	df000017 	ldw	fp,0(sp)
  80fa98:	dec00104 	addi	sp,sp,4
  80fa9c:	f800283a 	ret

0080faa0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80faa0:	defff404 	addi	sp,sp,-48
  80faa4:	dfc00b15 	stw	ra,44(sp)
  80faa8:	df000a15 	stw	fp,40(sp)
  80faac:	df000a04 	addi	fp,sp,40
  80fab0:	e13ffb15 	stw	r4,-20(fp)
  80fab4:	e17ffc15 	stw	r5,-16(fp)
  80fab8:	e1bffd15 	stw	r6,-12(fp)
  80fabc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80fac0:	00bffa84 	movi	r2,-22
  80fac4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80fac8:	e0bffc17 	ldw	r2,-16(fp)
  80facc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80fad0:	e0bff917 	ldw	r2,-28(fp)
  80fad4:	10800808 	cmpgei	r2,r2,32
  80fad8:	1000291e 	bne	r2,zero,80fb80 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fadc:	0005303a 	rdctl	r2,status
  80fae0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fae4:	e0fff717 	ldw	r3,-36(fp)
  80fae8:	00bfff84 	movi	r2,-2
  80faec:	1884703a 	and	r2,r3,r2
  80faf0:	1001703a 	wrctl	status,r2
  
  return context;
  80faf4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80faf8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80fafc:	e0bff917 	ldw	r2,-28(fp)
  80fb00:	00c02074 	movhi	r3,129
  80fb04:	18d11804 	addi	r3,r3,17504
  80fb08:	100490fa 	slli	r2,r2,3
  80fb0c:	10c7883a 	add	r3,r2,r3
  80fb10:	e0bffd17 	ldw	r2,-12(fp)
  80fb14:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80fb18:	e0bff917 	ldw	r2,-28(fp)
  80fb1c:	00c02074 	movhi	r3,129
  80fb20:	18d11804 	addi	r3,r3,17504
  80fb24:	100490fa 	slli	r2,r2,3
  80fb28:	10c5883a 	add	r2,r2,r3
  80fb2c:	10c00104 	addi	r3,r2,4
  80fb30:	e0bffe17 	ldw	r2,-8(fp)
  80fb34:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80fb38:	e0bffd17 	ldw	r2,-12(fp)
  80fb3c:	1005003a 	cmpeq	r2,r2,zero
  80fb40:	1000051e 	bne	r2,zero,80fb58 <alt_iic_isr_register+0xb8>
  80fb44:	e17ff917 	ldw	r5,-28(fp)
  80fb48:	e13ffb17 	ldw	r4,-20(fp)
  80fb4c:	080f91c0 	call	80f91c <alt_ic_irq_enable>
  80fb50:	e0bfff15 	stw	r2,-4(fp)
  80fb54:	00000406 	br	80fb68 <alt_iic_isr_register+0xc8>
  80fb58:	e17ff917 	ldw	r5,-28(fp)
  80fb5c:	e13ffb17 	ldw	r4,-20(fp)
  80fb60:	080f9b80 	call	80f9b8 <alt_ic_irq_disable>
  80fb64:	e0bfff15 	stw	r2,-4(fp)
  80fb68:	e0bfff17 	ldw	r2,-4(fp)
  80fb6c:	e0bffa15 	stw	r2,-24(fp)
  80fb70:	e0bff817 	ldw	r2,-32(fp)
  80fb74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb78:	e0bff617 	ldw	r2,-40(fp)
  80fb7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80fb80:	e0bffa17 	ldw	r2,-24(fp)
}
  80fb84:	e037883a 	mov	sp,fp
  80fb88:	dfc00117 	ldw	ra,4(sp)
  80fb8c:	df000017 	ldw	fp,0(sp)
  80fb90:	dec00204 	addi	sp,sp,8
  80fb94:	f800283a 	ret

0080fb98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80fb98:	defff904 	addi	sp,sp,-28
  80fb9c:	dfc00615 	stw	ra,24(sp)
  80fba0:	df000515 	stw	fp,20(sp)
  80fba4:	df000504 	addi	fp,sp,20
  80fba8:	e13ffc15 	stw	r4,-16(fp)
  80fbac:	e17ffd15 	stw	r5,-12(fp)
  80fbb0:	e1bffe15 	stw	r6,-8(fp)
  80fbb4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80fbb8:	e13ffd17 	ldw	r4,-12(fp)
  80fbbc:	e17ffe17 	ldw	r5,-8(fp)
  80fbc0:	e1bfff17 	ldw	r6,-4(fp)
  80fbc4:	080fdb00 	call	80fdb0 <open>
  80fbc8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80fbcc:	e0bffb17 	ldw	r2,-20(fp)
  80fbd0:	1004803a 	cmplt	r2,r2,zero
  80fbd4:	10001c1e 	bne	r2,zero,80fc48 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80fbd8:	e0bffb17 	ldw	r2,-20(fp)
  80fbdc:	00c02074 	movhi	r3,129
  80fbe0:	18c50e04 	addi	r3,r3,5176
  80fbe4:	10800324 	muli	r2,r2,12
  80fbe8:	10c5883a 	add	r2,r2,r3
  80fbec:	10c00017 	ldw	r3,0(r2)
  80fbf0:	e0bffc17 	ldw	r2,-16(fp)
  80fbf4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80fbf8:	e0bffb17 	ldw	r2,-20(fp)
  80fbfc:	00c02074 	movhi	r3,129
  80fc00:	18c50e04 	addi	r3,r3,5176
  80fc04:	10800324 	muli	r2,r2,12
  80fc08:	10c5883a 	add	r2,r2,r3
  80fc0c:	10800104 	addi	r2,r2,4
  80fc10:	10c00017 	ldw	r3,0(r2)
  80fc14:	e0bffc17 	ldw	r2,-16(fp)
  80fc18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80fc1c:	e0bffb17 	ldw	r2,-20(fp)
  80fc20:	00c02074 	movhi	r3,129
  80fc24:	18c50e04 	addi	r3,r3,5176
  80fc28:	10800324 	muli	r2,r2,12
  80fc2c:	10c5883a 	add	r2,r2,r3
  80fc30:	10800204 	addi	r2,r2,8
  80fc34:	10c00017 	ldw	r3,0(r2)
  80fc38:	e0bffc17 	ldw	r2,-16(fp)
  80fc3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80fc40:	e13ffb17 	ldw	r4,-20(fp)
  80fc44:	080d1940 	call	80d194 <alt_release_fd>
  }
} 
  80fc48:	e037883a 	mov	sp,fp
  80fc4c:	dfc00117 	ldw	ra,4(sp)
  80fc50:	df000017 	ldw	fp,0(sp)
  80fc54:	dec00204 	addi	sp,sp,8
  80fc58:	f800283a 	ret

0080fc5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80fc5c:	defffb04 	addi	sp,sp,-20
  80fc60:	dfc00415 	stw	ra,16(sp)
  80fc64:	df000315 	stw	fp,12(sp)
  80fc68:	df000304 	addi	fp,sp,12
  80fc6c:	e13ffd15 	stw	r4,-12(fp)
  80fc70:	e17ffe15 	stw	r5,-8(fp)
  80fc74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80fc78:	01002074 	movhi	r4,129
  80fc7c:	21051104 	addi	r4,r4,5188
  80fc80:	e17ffd17 	ldw	r5,-12(fp)
  80fc84:	01800044 	movi	r6,1
  80fc88:	01c07fc4 	movi	r7,511
  80fc8c:	080fb980 	call	80fb98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80fc90:	01002074 	movhi	r4,129
  80fc94:	21050e04 	addi	r4,r4,5176
  80fc98:	e17ffe17 	ldw	r5,-8(fp)
  80fc9c:	000d883a 	mov	r6,zero
  80fca0:	01c07fc4 	movi	r7,511
  80fca4:	080fb980 	call	80fb98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80fca8:	01002074 	movhi	r4,129
  80fcac:	21051404 	addi	r4,r4,5200
  80fcb0:	e17fff17 	ldw	r5,-4(fp)
  80fcb4:	01800044 	movi	r6,1
  80fcb8:	01c07fc4 	movi	r7,511
  80fcbc:	080fb980 	call	80fb98 <alt_open_fd>
}  
  80fcc0:	e037883a 	mov	sp,fp
  80fcc4:	dfc00117 	ldw	ra,4(sp)
  80fcc8:	df000017 	ldw	fp,0(sp)
  80fccc:	dec00204 	addi	sp,sp,8
  80fcd0:	f800283a 	ret

0080fcd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80fcd4:	defffc04 	addi	sp,sp,-16
  80fcd8:	df000315 	stw	fp,12(sp)
  80fcdc:	df000304 	addi	fp,sp,12
  80fce0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80fce4:	e0bffe17 	ldw	r2,-8(fp)
  80fce8:	10800217 	ldw	r2,8(r2)
  80fcec:	10d00034 	orhi	r3,r2,16384
  80fcf0:	e0bffe17 	ldw	r2,-8(fp)
  80fcf4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80fcf8:	e03ffd15 	stw	zero,-12(fp)
  80fcfc:	00002006 	br	80fd80 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80fd00:	e0bffd17 	ldw	r2,-12(fp)
  80fd04:	00c02074 	movhi	r3,129
  80fd08:	18c50e04 	addi	r3,r3,5176
  80fd0c:	10800324 	muli	r2,r2,12
  80fd10:	10c5883a 	add	r2,r2,r3
  80fd14:	10c00017 	ldw	r3,0(r2)
  80fd18:	e0bffe17 	ldw	r2,-8(fp)
  80fd1c:	10800017 	ldw	r2,0(r2)
  80fd20:	1880141e 	bne	r3,r2,80fd74 <alt_file_locked+0xa0>
  80fd24:	e0bffd17 	ldw	r2,-12(fp)
  80fd28:	00c02074 	movhi	r3,129
  80fd2c:	18c50e04 	addi	r3,r3,5176
  80fd30:	10800324 	muli	r2,r2,12
  80fd34:	10c5883a 	add	r2,r2,r3
  80fd38:	10800204 	addi	r2,r2,8
  80fd3c:	10800017 	ldw	r2,0(r2)
  80fd40:	1004403a 	cmpge	r2,r2,zero
  80fd44:	10000b1e 	bne	r2,zero,80fd74 <alt_file_locked+0xa0>
  80fd48:	e0bffd17 	ldw	r2,-12(fp)
  80fd4c:	10800324 	muli	r2,r2,12
  80fd50:	1007883a 	mov	r3,r2
  80fd54:	00802074 	movhi	r2,129
  80fd58:	10850e04 	addi	r2,r2,5176
  80fd5c:	1887883a 	add	r3,r3,r2
  80fd60:	e0bffe17 	ldw	r2,-8(fp)
  80fd64:	18800326 	beq	r3,r2,80fd74 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80fd68:	00bffcc4 	movi	r2,-13
  80fd6c:	e0bfff15 	stw	r2,-4(fp)
  80fd70:	00000a06 	br	80fd9c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80fd74:	e0bffd17 	ldw	r2,-12(fp)
  80fd78:	10800044 	addi	r2,r2,1
  80fd7c:	e0bffd15 	stw	r2,-12(fp)
  80fd80:	00802074 	movhi	r2,129
  80fd84:	1089f504 	addi	r2,r2,10196
  80fd88:	10800017 	ldw	r2,0(r2)
  80fd8c:	1007883a 	mov	r3,r2
  80fd90:	e0bffd17 	ldw	r2,-12(fp)
  80fd94:	18bfda2e 	bgeu	r3,r2,80fd00 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80fd98:	e03fff15 	stw	zero,-4(fp)
  80fd9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80fda0:	e037883a 	mov	sp,fp
  80fda4:	df000017 	ldw	fp,0(sp)
  80fda8:	dec00104 	addi	sp,sp,4
  80fdac:	f800283a 	ret

0080fdb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80fdb0:	defff404 	addi	sp,sp,-48
  80fdb4:	dfc00b15 	stw	ra,44(sp)
  80fdb8:	df000a15 	stw	fp,40(sp)
  80fdbc:	df000a04 	addi	fp,sp,40
  80fdc0:	e13ffb15 	stw	r4,-20(fp)
  80fdc4:	e17ffc15 	stw	r5,-16(fp)
  80fdc8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80fdcc:	00bfffc4 	movi	r2,-1
  80fdd0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80fdd4:	00bffb44 	movi	r2,-19
  80fdd8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80fddc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80fde0:	e13ffb17 	ldw	r4,-20(fp)
  80fde4:	01402074 	movhi	r5,129
  80fde8:	2949f304 	addi	r5,r5,10188
  80fdec:	080c8840 	call	80c884 <alt_find_dev>
  80fdf0:	e0bffa15 	stw	r2,-24(fp)
  80fdf4:	e0bffa17 	ldw	r2,-24(fp)
  80fdf8:	1004c03a 	cmpne	r2,r2,zero
  80fdfc:	1000051e 	bne	r2,zero,80fe14 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80fe00:	e13ffb17 	ldw	r4,-20(fp)
  80fe04:	081015c0 	call	81015c <alt_find_file>
  80fe08:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80fe0c:	00800044 	movi	r2,1
  80fe10:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80fe14:	e0bffa17 	ldw	r2,-24(fp)
  80fe18:	1005003a 	cmpeq	r2,r2,zero
  80fe1c:	1000301e 	bne	r2,zero,80fee0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80fe20:	e13ffa17 	ldw	r4,-24(fp)
  80fe24:	081027c0 	call	81027c <alt_get_fd>
  80fe28:	e0bff815 	stw	r2,-32(fp)
  80fe2c:	e0bff817 	ldw	r2,-32(fp)
  80fe30:	1004403a 	cmpge	r2,r2,zero
  80fe34:	1000031e 	bne	r2,zero,80fe44 <open+0x94>
    {
      status = index;
  80fe38:	e0bff817 	ldw	r2,-32(fp)
  80fe3c:	e0bff715 	stw	r2,-36(fp)
  80fe40:	00002906 	br	80fee8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80fe44:	e0bff817 	ldw	r2,-32(fp)
  80fe48:	10800324 	muli	r2,r2,12
  80fe4c:	1007883a 	mov	r3,r2
  80fe50:	00802074 	movhi	r2,129
  80fe54:	10850e04 	addi	r2,r2,5176
  80fe58:	1885883a 	add	r2,r3,r2
  80fe5c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80fe60:	e0fffc17 	ldw	r3,-16(fp)
  80fe64:	00900034 	movhi	r2,16384
  80fe68:	10bfffc4 	addi	r2,r2,-1
  80fe6c:	1886703a 	and	r3,r3,r2
  80fe70:	e0bff917 	ldw	r2,-28(fp)
  80fe74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80fe78:	e0bff617 	ldw	r2,-40(fp)
  80fe7c:	1004c03a 	cmpne	r2,r2,zero
  80fe80:	1000061e 	bne	r2,zero,80fe9c <open+0xec>
  80fe84:	e13ff917 	ldw	r4,-28(fp)
  80fe88:	080fcd40 	call	80fcd4 <alt_file_locked>
  80fe8c:	e0bff715 	stw	r2,-36(fp)
  80fe90:	e0bff717 	ldw	r2,-36(fp)
  80fe94:	1004803a 	cmplt	r2,r2,zero
  80fe98:	1000131e 	bne	r2,zero,80fee8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80fe9c:	e0bffa17 	ldw	r2,-24(fp)
  80fea0:	10800317 	ldw	r2,12(r2)
  80fea4:	1005003a 	cmpeq	r2,r2,zero
  80fea8:	1000091e 	bne	r2,zero,80fed0 <open+0x120>
  80feac:	e0bffa17 	ldw	r2,-24(fp)
  80feb0:	10800317 	ldw	r2,12(r2)
  80feb4:	e13ff917 	ldw	r4,-28(fp)
  80feb8:	e17ffb17 	ldw	r5,-20(fp)
  80febc:	e1bffc17 	ldw	r6,-16(fp)
  80fec0:	e1fffd17 	ldw	r7,-12(fp)
  80fec4:	103ee83a 	callr	r2
  80fec8:	e0bfff15 	stw	r2,-4(fp)
  80fecc:	00000106 	br	80fed4 <open+0x124>
  80fed0:	e03fff15 	stw	zero,-4(fp)
  80fed4:	e0bfff17 	ldw	r2,-4(fp)
  80fed8:	e0bff715 	stw	r2,-36(fp)
  80fedc:	00000206 	br	80fee8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80fee0:	00bffb44 	movi	r2,-19
  80fee4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80fee8:	e0bff717 	ldw	r2,-36(fp)
  80feec:	1004403a 	cmpge	r2,r2,zero
  80fef0:	1000091e 	bne	r2,zero,80ff18 <open+0x168>
  {
    alt_release_fd (index);  
  80fef4:	e13ff817 	ldw	r4,-32(fp)
  80fef8:	080d1940 	call	80d194 <alt_release_fd>
    ALT_ERRNO = -status;
  80fefc:	080ff380 	call	80ff38 <alt_get_errno>
  80ff00:	e0fff717 	ldw	r3,-36(fp)
  80ff04:	00c7c83a 	sub	r3,zero,r3
  80ff08:	10c00015 	stw	r3,0(r2)
    return -1;
  80ff0c:	00bfffc4 	movi	r2,-1
  80ff10:	e0bffe15 	stw	r2,-8(fp)
  80ff14:	00000206 	br	80ff20 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80ff18:	e0bff817 	ldw	r2,-32(fp)
  80ff1c:	e0bffe15 	stw	r2,-8(fp)
  80ff20:	e0bffe17 	ldw	r2,-8(fp)
}
  80ff24:	e037883a 	mov	sp,fp
  80ff28:	dfc00117 	ldw	ra,4(sp)
  80ff2c:	df000017 	ldw	fp,0(sp)
  80ff30:	dec00204 	addi	sp,sp,8
  80ff34:	f800283a 	ret

0080ff38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ff38:	defffd04 	addi	sp,sp,-12
  80ff3c:	dfc00215 	stw	ra,8(sp)
  80ff40:	df000115 	stw	fp,4(sp)
  80ff44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ff48:	00802074 	movhi	r2,129
  80ff4c:	1089fa04 	addi	r2,r2,10216
  80ff50:	10800017 	ldw	r2,0(r2)
  80ff54:	1005003a 	cmpeq	r2,r2,zero
  80ff58:	1000061e 	bne	r2,zero,80ff74 <alt_get_errno+0x3c>
  80ff5c:	00802074 	movhi	r2,129
  80ff60:	1089fa04 	addi	r2,r2,10216
  80ff64:	10800017 	ldw	r2,0(r2)
  80ff68:	103ee83a 	callr	r2
  80ff6c:	e0bfff15 	stw	r2,-4(fp)
  80ff70:	00000306 	br	80ff80 <alt_get_errno+0x48>
  80ff74:	00802074 	movhi	r2,129
  80ff78:	10910404 	addi	r2,r2,17424
  80ff7c:	e0bfff15 	stw	r2,-4(fp)
  80ff80:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff84:	e037883a 	mov	sp,fp
  80ff88:	dfc00117 	ldw	ra,4(sp)
  80ff8c:	df000017 	ldw	fp,0(sp)
  80ff90:	dec00204 	addi	sp,sp,8
  80ff94:	f800283a 	ret

0080ff98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80ff98:	defffa04 	addi	sp,sp,-24
  80ff9c:	df000515 	stw	fp,20(sp)
  80ffa0:	df000504 	addi	fp,sp,20
  80ffa4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ffa8:	0005303a 	rdctl	r2,status
  80ffac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ffb0:	e0fffd17 	ldw	r3,-12(fp)
  80ffb4:	00bfff84 	movi	r2,-2
  80ffb8:	1884703a 	and	r2,r3,r2
  80ffbc:	1001703a 	wrctl	status,r2
  
  return context;
  80ffc0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80ffc4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80ffc8:	e0bfff17 	ldw	r2,-4(fp)
  80ffcc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80ffd0:	e0bffc17 	ldw	r2,-16(fp)
  80ffd4:	10c00017 	ldw	r3,0(r2)
  80ffd8:	e0bffc17 	ldw	r2,-16(fp)
  80ffdc:	10800117 	ldw	r2,4(r2)
  80ffe0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80ffe4:	e0bffc17 	ldw	r2,-16(fp)
  80ffe8:	10c00117 	ldw	r3,4(r2)
  80ffec:	e0bffc17 	ldw	r2,-16(fp)
  80fff0:	10800017 	ldw	r2,0(r2)
  80fff4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80fff8:	e0fffc17 	ldw	r3,-16(fp)
  80fffc:	e0bffc17 	ldw	r2,-16(fp)
  810000:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  810004:	e0fffc17 	ldw	r3,-16(fp)
  810008:	e0bffc17 	ldw	r2,-16(fp)
  81000c:	18800015 	stw	r2,0(r3)
  810010:	e0bffe17 	ldw	r2,-8(fp)
  810014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810018:	e0bffb17 	ldw	r2,-20(fp)
  81001c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810020:	e037883a 	mov	sp,fp
  810024:	df000017 	ldw	fp,0(sp)
  810028:	dec00104 	addi	sp,sp,4
  81002c:	f800283a 	ret

00810030 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810030:	defffb04 	addi	sp,sp,-20
  810034:	dfc00415 	stw	ra,16(sp)
  810038:	df000315 	stw	fp,12(sp)
  81003c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810040:	d0a01417 	ldw	r2,-32688(gp)
  810044:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  810048:	d0a72417 	ldw	r2,-25456(gp)
  81004c:	10800044 	addi	r2,r2,1
  810050:	d0a72415 	stw	r2,-25456(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810054:	00003106 	br	81011c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  810058:	e0bffe17 	ldw	r2,-8(fp)
  81005c:	10800017 	ldw	r2,0(r2)
  810060:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810064:	e0bffe17 	ldw	r2,-8(fp)
  810068:	10800403 	ldbu	r2,16(r2)
  81006c:	10803fcc 	andi	r2,r2,255
  810070:	1005003a 	cmpeq	r2,r2,zero
  810074:	1000051e 	bne	r2,zero,81008c <alt_tick+0x5c>
  810078:	d0a72417 	ldw	r2,-25456(gp)
  81007c:	1004c03a 	cmpne	r2,r2,zero
  810080:	1000021e 	bne	r2,zero,81008c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  810084:	e0bffe17 	ldw	r2,-8(fp)
  810088:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81008c:	e0bffe17 	ldw	r2,-8(fp)
  810090:	10c00217 	ldw	r3,8(r2)
  810094:	d0a72417 	ldw	r2,-25456(gp)
  810098:	10c01e36 	bltu	r2,r3,810114 <alt_tick+0xe4>
  81009c:	e0bffe17 	ldw	r2,-8(fp)
  8100a0:	10800403 	ldbu	r2,16(r2)
  8100a4:	10803fcc 	andi	r2,r2,255
  8100a8:	1004c03a 	cmpne	r2,r2,zero
  8100ac:	1000191e 	bne	r2,zero,810114 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8100b0:	e0bffe17 	ldw	r2,-8(fp)
  8100b4:	10c00317 	ldw	r3,12(r2)
  8100b8:	e0bffe17 	ldw	r2,-8(fp)
  8100bc:	11000517 	ldw	r4,20(r2)
  8100c0:	183ee83a 	callr	r3
  8100c4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8100c8:	e0bffd17 	ldw	r2,-12(fp)
  8100cc:	1004c03a 	cmpne	r2,r2,zero
  8100d0:	1000031e 	bne	r2,zero,8100e0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8100d4:	e13ffe17 	ldw	r4,-8(fp)
  8100d8:	080ff980 	call	80ff98 <alt_alarm_stop>
  8100dc:	00000d06 	br	810114 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8100e0:	e0bffe17 	ldw	r2,-8(fp)
  8100e4:	10c00217 	ldw	r3,8(r2)
  8100e8:	e0bffd17 	ldw	r2,-12(fp)
  8100ec:	1887883a 	add	r3,r3,r2
  8100f0:	e0bffe17 	ldw	r2,-8(fp)
  8100f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8100f8:	e0bffe17 	ldw	r2,-8(fp)
  8100fc:	10c00217 	ldw	r3,8(r2)
  810100:	d0a72417 	ldw	r2,-25456(gp)
  810104:	1880032e 	bgeu	r3,r2,810114 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  810108:	e0fffe17 	ldw	r3,-8(fp)
  81010c:	00800044 	movi	r2,1
  810110:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  810114:	e0bfff17 	ldw	r2,-4(fp)
  810118:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81011c:	d0e01404 	addi	r3,gp,-32688
  810120:	e0bffe17 	ldw	r2,-8(fp)
  810124:	10ffcc1e 	bne	r2,r3,810058 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  810128:	e037883a 	mov	sp,fp
  81012c:	dfc00117 	ldw	ra,4(sp)
  810130:	df000017 	ldw	fp,0(sp)
  810134:	dec00204 	addi	sp,sp,8
  810138:	f800283a 	ret

0081013c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  81013c:	deffff04 	addi	sp,sp,-4
  810140:	df000015 	stw	fp,0(sp)
  810144:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  810148:	000170fa 	wrctl	ienable,zero
}
  81014c:	e037883a 	mov	sp,fp
  810150:	df000017 	ldw	fp,0(sp)
  810154:	dec00104 	addi	sp,sp,4
  810158:	f800283a 	ret

0081015c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81015c:	defffa04 	addi	sp,sp,-24
  810160:	dfc00515 	stw	ra,20(sp)
  810164:	df000415 	stw	fp,16(sp)
  810168:	df000404 	addi	fp,sp,16
  81016c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  810170:	00802074 	movhi	r2,129
  810174:	1089f104 	addi	r2,r2,10180
  810178:	10800017 	ldw	r2,0(r2)
  81017c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810180:	00003306 	br	810250 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  810184:	e0bffd17 	ldw	r2,-12(fp)
  810188:	11000217 	ldw	r4,8(r2)
  81018c:	080206c0 	call	80206c <strlen>
  810190:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  810194:	e0bffd17 	ldw	r2,-12(fp)
  810198:	10c00217 	ldw	r3,8(r2)
  81019c:	e0bffc17 	ldw	r2,-16(fp)
  8101a0:	1885883a 	add	r2,r3,r2
  8101a4:	10bfffc4 	addi	r2,r2,-1
  8101a8:	10800003 	ldbu	r2,0(r2)
  8101ac:	10803fcc 	andi	r2,r2,255
  8101b0:	1080201c 	xori	r2,r2,128
  8101b4:	10bfe004 	addi	r2,r2,-128
  8101b8:	10800bd8 	cmpnei	r2,r2,47
  8101bc:	1000031e 	bne	r2,zero,8101cc <alt_find_file+0x70>
    {
      len -= 1;
  8101c0:	e0bffc17 	ldw	r2,-16(fp)
  8101c4:	10bfffc4 	addi	r2,r2,-1
  8101c8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8101cc:	e0bffc17 	ldw	r2,-16(fp)
  8101d0:	1007883a 	mov	r3,r2
  8101d4:	e0bffe17 	ldw	r2,-8(fp)
  8101d8:	1885883a 	add	r2,r3,r2
  8101dc:	10800003 	ldbu	r2,0(r2)
  8101e0:	10803fcc 	andi	r2,r2,255
  8101e4:	1080201c 	xori	r2,r2,128
  8101e8:	10bfe004 	addi	r2,r2,-128
  8101ec:	10800be0 	cmpeqi	r2,r2,47
  8101f0:	10000a1e 	bne	r2,zero,81021c <alt_find_file+0xc0>
  8101f4:	e0bffc17 	ldw	r2,-16(fp)
  8101f8:	1007883a 	mov	r3,r2
  8101fc:	e0bffe17 	ldw	r2,-8(fp)
  810200:	1885883a 	add	r2,r3,r2
  810204:	10800003 	ldbu	r2,0(r2)
  810208:	10803fcc 	andi	r2,r2,255
  81020c:	1080201c 	xori	r2,r2,128
  810210:	10bfe004 	addi	r2,r2,-128
  810214:	1004c03a 	cmpne	r2,r2,zero
  810218:	10000a1e 	bne	r2,zero,810244 <alt_find_file+0xe8>
  81021c:	e0bffd17 	ldw	r2,-12(fp)
  810220:	11000217 	ldw	r4,8(r2)
  810224:	e1bffc17 	ldw	r6,-16(fp)
  810228:	e17ffe17 	ldw	r5,-8(fp)
  81022c:	08103d80 	call	8103d8 <memcmp>
  810230:	1004c03a 	cmpne	r2,r2,zero
  810234:	1000031e 	bne	r2,zero,810244 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  810238:	e0bffd17 	ldw	r2,-12(fp)
  81023c:	e0bfff15 	stw	r2,-4(fp)
  810240:	00000806 	br	810264 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  810244:	e0bffd17 	ldw	r2,-12(fp)
  810248:	10800017 	ldw	r2,0(r2)
  81024c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  810250:	00c02074 	movhi	r3,129
  810254:	18c9f104 	addi	r3,r3,10180
  810258:	e0bffd17 	ldw	r2,-12(fp)
  81025c:	10ffc91e 	bne	r2,r3,810184 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  810260:	e03fff15 	stw	zero,-4(fp)
  810264:	e0bfff17 	ldw	r2,-4(fp)
}
  810268:	e037883a 	mov	sp,fp
  81026c:	dfc00117 	ldw	ra,4(sp)
  810270:	df000017 	ldw	fp,0(sp)
  810274:	dec00204 	addi	sp,sp,8
  810278:	f800283a 	ret

0081027c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81027c:	defffc04 	addi	sp,sp,-16
  810280:	df000315 	stw	fp,12(sp)
  810284:	df000304 	addi	fp,sp,12
  810288:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81028c:	00bffa04 	movi	r2,-24
  810290:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810294:	e03ffe15 	stw	zero,-8(fp)
  810298:	00001e06 	br	810314 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  81029c:	e0bffe17 	ldw	r2,-8(fp)
  8102a0:	00c02074 	movhi	r3,129
  8102a4:	18c50e04 	addi	r3,r3,5176
  8102a8:	10800324 	muli	r2,r2,12
  8102ac:	10c5883a 	add	r2,r2,r3
  8102b0:	10800017 	ldw	r2,0(r2)
  8102b4:	1004c03a 	cmpne	r2,r2,zero
  8102b8:	1000131e 	bne	r2,zero,810308 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8102bc:	e0bffe17 	ldw	r2,-8(fp)
  8102c0:	00c02074 	movhi	r3,129
  8102c4:	18c50e04 	addi	r3,r3,5176
  8102c8:	10800324 	muli	r2,r2,12
  8102cc:	10c7883a 	add	r3,r2,r3
  8102d0:	e0bfff17 	ldw	r2,-4(fp)
  8102d4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8102d8:	00802074 	movhi	r2,129
  8102dc:	1089f504 	addi	r2,r2,10196
  8102e0:	10c00017 	ldw	r3,0(r2)
  8102e4:	e0bffe17 	ldw	r2,-8(fp)
  8102e8:	1880040e 	bge	r3,r2,8102fc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8102ec:	00c02074 	movhi	r3,129
  8102f0:	18c9f504 	addi	r3,r3,10196
  8102f4:	e0bffe17 	ldw	r2,-8(fp)
  8102f8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8102fc:	e0bffe17 	ldw	r2,-8(fp)
  810300:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  810304:	00000606 	br	810320 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  810308:	e0bffe17 	ldw	r2,-8(fp)
  81030c:	10800044 	addi	r2,r2,1
  810310:	e0bffe15 	stw	r2,-8(fp)
  810314:	e0bffe17 	ldw	r2,-8(fp)
  810318:	10800810 	cmplti	r2,r2,32
  81031c:	103fdf1e 	bne	r2,zero,81029c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  810320:	e0bffd17 	ldw	r2,-12(fp)
}
  810324:	e037883a 	mov	sp,fp
  810328:	df000017 	ldw	fp,0(sp)
  81032c:	dec00104 	addi	sp,sp,4
  810330:	f800283a 	ret

00810334 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  810334:	defffb04 	addi	sp,sp,-20
  810338:	df000415 	stw	fp,16(sp)
  81033c:	df000404 	addi	fp,sp,16
  810340:	e13ffe15 	stw	r4,-8(fp)
  810344:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  810348:	e0bfff17 	ldw	r2,-4(fp)
  81034c:	10840070 	cmpltui	r2,r2,4097
  810350:	1000021e 	bne	r2,zero,81035c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  810354:	00840004 	movi	r2,4096
  810358:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81035c:	e0fffe17 	ldw	r3,-8(fp)
  810360:	e0bfff17 	ldw	r2,-4(fp)
  810364:	1885883a 	add	r2,r3,r2
  810368:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81036c:	e0bffe17 	ldw	r2,-8(fp)
  810370:	e0bffd15 	stw	r2,-12(fp)
  810374:	00000506 	br	81038c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810378:	e0bffd17 	ldw	r2,-12(fp)
  81037c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810380:	e0bffd17 	ldw	r2,-12(fp)
  810384:	10800804 	addi	r2,r2,32
  810388:	e0bffd15 	stw	r2,-12(fp)
  81038c:	e0fffd17 	ldw	r3,-12(fp)
  810390:	e0bffc17 	ldw	r2,-16(fp)
  810394:	18bff836 	bltu	r3,r2,810378 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  810398:	e0bffe17 	ldw	r2,-8(fp)
  81039c:	108007cc 	andi	r2,r2,31
  8103a0:	1005003a 	cmpeq	r2,r2,zero
  8103a4:	1000021e 	bne	r2,zero,8103b0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8103a8:	e0bffd17 	ldw	r2,-12(fp)
  8103ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8103b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8103b4:	e037883a 	mov	sp,fp
  8103b8:	df000017 	ldw	fp,0(sp)
  8103bc:	dec00104 	addi	sp,sp,4
  8103c0:	f800283a 	ret

008103c4 <atexit>:
  8103c4:	200b883a 	mov	r5,r4
  8103c8:	000d883a 	mov	r6,zero
  8103cc:	0009883a 	mov	r4,zero
  8103d0:	000f883a 	mov	r7,zero
  8103d4:	081044c1 	jmpi	81044c <__register_exitproc>

008103d8 <memcmp>:
  8103d8:	00c000c4 	movi	r3,3
  8103dc:	1980032e 	bgeu	r3,r6,8103ec <memcmp+0x14>
  8103e0:	2144b03a 	or	r2,r4,r5
  8103e4:	10c4703a 	and	r2,r2,r3
  8103e8:	10000f26 	beq	r2,zero,810428 <memcmp+0x50>
  8103ec:	31ffffc4 	addi	r7,r6,-1
  8103f0:	3000061e 	bne	r6,zero,81040c <memcmp+0x34>
  8103f4:	00000a06 	br	810420 <memcmp+0x48>
  8103f8:	39ffffc4 	addi	r7,r7,-1
  8103fc:	00bfffc4 	movi	r2,-1
  810400:	21000044 	addi	r4,r4,1
  810404:	29400044 	addi	r5,r5,1
  810408:	38800526 	beq	r7,r2,810420 <memcmp+0x48>
  81040c:	20c00003 	ldbu	r3,0(r4)
  810410:	28800003 	ldbu	r2,0(r5)
  810414:	18bff826 	beq	r3,r2,8103f8 <memcmp+0x20>
  810418:	1885c83a 	sub	r2,r3,r2
  81041c:	f800283a 	ret
  810420:	0005883a 	mov	r2,zero
  810424:	f800283a 	ret
  810428:	180f883a 	mov	r7,r3
  81042c:	20c00017 	ldw	r3,0(r4)
  810430:	28800017 	ldw	r2,0(r5)
  810434:	18bfed1e 	bne	r3,r2,8103ec <memcmp+0x14>
  810438:	31bfff04 	addi	r6,r6,-4
  81043c:	21000104 	addi	r4,r4,4
  810440:	29400104 	addi	r5,r5,4
  810444:	39bff936 	bltu	r7,r6,81042c <memcmp+0x54>
  810448:	003fe806 	br	8103ec <memcmp+0x14>

0081044c <__register_exitproc>:
  81044c:	defffa04 	addi	sp,sp,-24
  810450:	00802074 	movhi	r2,129
  810454:	1089ec04 	addi	r2,r2,10160
  810458:	dc000015 	stw	r16,0(sp)
  81045c:	14000017 	ldw	r16,0(r2)
  810460:	dd000415 	stw	r20,16(sp)
  810464:	2829883a 	mov	r20,r5
  810468:	81405217 	ldw	r5,328(r16)
  81046c:	dcc00315 	stw	r19,12(sp)
  810470:	dc800215 	stw	r18,8(sp)
  810474:	dc400115 	stw	r17,4(sp)
  810478:	dfc00515 	stw	ra,20(sp)
  81047c:	2023883a 	mov	r17,r4
  810480:	3027883a 	mov	r19,r6
  810484:	3825883a 	mov	r18,r7
  810488:	28002526 	beq	r5,zero,810520 <__register_exitproc+0xd4>
  81048c:	29000117 	ldw	r4,4(r5)
  810490:	008007c4 	movi	r2,31
  810494:	11002716 	blt	r2,r4,810534 <__register_exitproc+0xe8>
  810498:	8800101e 	bne	r17,zero,8104dc <__register_exitproc+0x90>
  81049c:	2105883a 	add	r2,r4,r4
  8104a0:	1085883a 	add	r2,r2,r2
  8104a4:	20c00044 	addi	r3,r4,1
  8104a8:	1145883a 	add	r2,r2,r5
  8104ac:	0009883a 	mov	r4,zero
  8104b0:	15000215 	stw	r20,8(r2)
  8104b4:	28c00115 	stw	r3,4(r5)
  8104b8:	2005883a 	mov	r2,r4
  8104bc:	dfc00517 	ldw	ra,20(sp)
  8104c0:	dd000417 	ldw	r20,16(sp)
  8104c4:	dcc00317 	ldw	r19,12(sp)
  8104c8:	dc800217 	ldw	r18,8(sp)
  8104cc:	dc400117 	ldw	r17,4(sp)
  8104d0:	dc000017 	ldw	r16,0(sp)
  8104d4:	dec00604 	addi	sp,sp,24
  8104d8:	f800283a 	ret
  8104dc:	29802204 	addi	r6,r5,136
  8104e0:	00800044 	movi	r2,1
  8104e4:	110e983a 	sll	r7,r2,r4
  8104e8:	30c04017 	ldw	r3,256(r6)
  8104ec:	2105883a 	add	r2,r4,r4
  8104f0:	1085883a 	add	r2,r2,r2
  8104f4:	1185883a 	add	r2,r2,r6
  8104f8:	19c6b03a 	or	r3,r3,r7
  8104fc:	14802015 	stw	r18,128(r2)
  810500:	14c00015 	stw	r19,0(r2)
  810504:	00800084 	movi	r2,2
  810508:	30c04015 	stw	r3,256(r6)
  81050c:	88bfe31e 	bne	r17,r2,81049c <__register_exitproc+0x50>
  810510:	30804117 	ldw	r2,260(r6)
  810514:	11c4b03a 	or	r2,r2,r7
  810518:	30804115 	stw	r2,260(r6)
  81051c:	003fdf06 	br	81049c <__register_exitproc+0x50>
  810520:	00802074 	movhi	r2,129
  810524:	10915804 	addi	r2,r2,17760
  810528:	100b883a 	mov	r5,r2
  81052c:	80805215 	stw	r2,328(r16)
  810530:	003fd606 	br	81048c <__register_exitproc+0x40>
  810534:	00802034 	movhi	r2,128
  810538:	1085aa04 	addi	r2,r2,5800
  81053c:	1000021e 	bne	r2,zero,810548 <__register_exitproc+0xfc>
  810540:	013fffc4 	movi	r4,-1
  810544:	003fdc06 	br	8104b8 <__register_exitproc+0x6c>
  810548:	01006404 	movi	r4,400
  81054c:	103ee83a 	callr	r2
  810550:	1007883a 	mov	r3,r2
  810554:	103ffa26 	beq	r2,zero,810540 <__register_exitproc+0xf4>
  810558:	80805217 	ldw	r2,328(r16)
  81055c:	180b883a 	mov	r5,r3
  810560:	18000115 	stw	zero,4(r3)
  810564:	18800015 	stw	r2,0(r3)
  810568:	80c05215 	stw	r3,328(r16)
  81056c:	18006215 	stw	zero,392(r3)
  810570:	18006315 	stw	zero,396(r3)
  810574:	0009883a 	mov	r4,zero
  810578:	883fc826 	beq	r17,zero,81049c <__register_exitproc+0x50>
  81057c:	003fd706 	br	8104dc <__register_exitproc+0x90>
  810580:	00804160 	cmpeqi	r2,zero,261
