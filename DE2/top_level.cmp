	component top_level is
		port (
			clk_clk                          : in    std_logic                     := 'X';             -- clk
			reset_reset_n                    : in    std_logic                     := 'X';             -- reset_n
			sdram_wire_addr                  : out   std_logic_vector(11 downto 0);                    -- addr
			sdram_wire_ba                    : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_wire_cas_n                 : out   std_logic;                                        -- cas_n
			sdram_wire_cke                   : out   std_logic;                                        -- cke
			sdram_wire_cs_n                  : out   std_logic;                                        -- cs_n
			sdram_wire_dq                    : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_wire_dqm                   : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_wire_ras_n                 : out   std_logic;                                        -- ras_n
			sdram_wire_we_n                  : out   std_logic;                                        -- we_n
			av_config_wire_SDAT              : inout std_logic                     := 'X';             -- SDAT
			av_config_wire_SCLK              : out   std_logic;                                        -- SCLK
			video_decoder_wire_TD_CLK27      : in    std_logic                     := 'X';             -- TD_CLK27
			video_decoder_wire_TD_DATA       : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- TD_DATA
			video_decoder_wire_TD_HS         : in    std_logic                     := 'X';             -- TD_HS
			video_decoder_wire_TD_VS         : in    std_logic                     := 'X';             -- TD_VS
			video_decoder_wire_clk27_reset   : in    std_logic                     := 'X';             -- clk27_reset
			video_decoder_wire_TD_RESET      : out   std_logic;                                        -- TD_RESET
			video_decoder_wire_overflow_flag : out   std_logic;                                        -- overflow_flag
			pixel_buffer_wire_DQ             : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			pixel_buffer_wire_ADDR           : out   std_logic_vector(17 downto 0);                    -- ADDR
			pixel_buffer_wire_LB_N           : out   std_logic;                                        -- LB_N
			pixel_buffer_wire_UB_N           : out   std_logic;                                        -- UB_N
			pixel_buffer_wire_CE_N           : out   std_logic;                                        -- CE_N
			pixel_buffer_wire_OE_N           : out   std_logic;                                        -- OE_N
			pixel_buffer_wire_WE_N           : out   std_logic;                                        -- WE_N
			vga_controller_wire_CLK          : out   std_logic;                                        -- CLK
			vga_controller_wire_HS           : out   std_logic;                                        -- HS
			vga_controller_wire_VS           : out   std_logic;                                        -- VS
			vga_controller_wire_BLANK        : out   std_logic;                                        -- BLANK
			vga_controller_wire_SYNC         : out   std_logic;                                        -- SYNC
			vga_controller_wire_R            : out   std_logic_vector(9 downto 0);                     -- R
			vga_controller_wire_G            : out   std_logic_vector(9 downto 0);                     -- G
			vga_controller_wire_B            : out   std_logic_vector(9 downto 0);                     -- B
			sdram_clk_clk                    : out   std_logic;                                        -- clk
			button_3_wire_export             : in    std_logic                     := 'X';             -- export
			gpio_data_export                 : out   std_logic_vector(7 downto 0);                     -- export
			gpio_in_export                   : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			gpio_signal_export               : out   std_logic_vector(1 downto 0);                     -- export
			keypad_cols_wire_export          : out   std_logic_vector(2 downto 0);                     -- export
			keypad_rows_wire_export          : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			servo_wire_export                : out   std_logic;                                        -- export
			accept_signal_export             : in    std_logic                     := 'X';             -- export
			reject_signal_export             : in    std_logic                     := 'X';             -- export
			green_led_wire_export            : out   std_logic_vector(7 downto 0);                     -- export
			red_led_wire_export              : out   std_logic_vector(17 downto 0);                    -- export
			mode_switch_wire_export          : in    std_logic                     := 'X';             -- export
			lcd_data_DATA                    : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DATA
			lcd_data_ON                      : out   std_logic;                                        -- ON
			lcd_data_BLON                    : out   std_logic;                                        -- BLON
			lcd_data_EN                      : out   std_logic;                                        -- EN
			lcd_data_RS                      : out   std_logic;                                        -- RS
			lcd_data_RW                      : out   std_logic                                         -- RW
		);
	end component top_level;

